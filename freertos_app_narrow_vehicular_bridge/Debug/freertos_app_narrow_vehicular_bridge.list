
freertos_app_narrow_vehicular_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08006128  08006128  00007128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800648c  0800648c  000080a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006494  08006494  000080a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006494  08006494  00007494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800649c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004314  200000a0  0800653c  000080a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043b4  0800653c  000083b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c0b  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341c  00000000  00000000  0001bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0001f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2b  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025659  00000000  00000000  00021183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018197  00000000  00000000  000467dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da761  00000000  00000000  0005e973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001390d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005734  00000000  00000000  00139118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0013e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006110 	.word	0x08006110

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08006110 	.word	0x08006110

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000bc 	.word	0x200000bc
 800061c:	20000120 	.word	0x20000120

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000624:	f004 fbc8 	bl	8004db8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fb50 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f812 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f8f4 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f8c8 	bl	80007c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000638:	f000 f87a 	bl	8000730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <main+0x30>)
 800063e:	f001 fc81 	bl	8001f44 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000642:	f003 fef7 	bl	8004434 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f002 fb61 	bl	8002d0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x2a>
 800064e:	bf00      	nop
 8000650:	20000320 	.word	0x20000320

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	@ 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fe33 	bl	80052ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	@ (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f940 	bl	8001968 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 f939 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fdae 	bl	8001270 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 f923 	bl	8000964 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000762:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000776:	f001 fb95 	bl	8001ea4 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000780:	f000 f8f0 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000792:	f001 fd37 	bl	8002204 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f8e2 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_TIM2_Init+0x94>)
 80007ae:	f001 ff59 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f8d4 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000320 	.word	0x20000320

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 ffc0 	bl	8002784 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8ab 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000368 	.word	0x20000368
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_GPIO_Init+0xd4>)
 80008a8:	f000 fcc8 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_GPIO_Init+0xd8>)
 80008c4:	f000 fb26 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c8:	2320      	movs	r3, #32
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0xd4>)
 80008e0:	f000 fb18 	bl	8000f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020800 	.word	0x40020800

080008f8 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <configureTimerForRunTimeStats+0x14>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	200003b0 	.word	0x200003b0

08000910 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <getRunTimeCounterValue+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200003b0 	.word	0x200003b0

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f9e9 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000946:	d104      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000950:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010000 	.word	0x40010000
 8000960:	200003b0 	.word	0x200003b0

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x54>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <HAL_MspInit+0x54>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x54>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <HAL_MspInit+0x54>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_MspInit+0x54>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f000 fa83 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d8:	d115      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 fa60 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a00:	201c      	movs	r0, #28
 8000a02:	f000 fa79 	bl	8000ef8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <HAL_UART_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12b      	bne.n	8000a8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a8a:	f000 fa43 	bl	8000f14 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	@ 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <HAL_InitTick+0xd0>)
 8000aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <HAL_InitTick+0xd0>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <HAL_InitTick+0xd0>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 020c 	add.w	r2, r7, #12
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fce2 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ae0:	f000 fccc 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8000ae4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <HAL_InitTick+0xd4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000af6:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <HAL_InitTick+0xdc>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000afc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a1e      	ldr	r2, [pc, #120]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b1a:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b1c:	f001 f9c2 	bl	8001ea4 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d11b      	bne.n	8000b66 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <HAL_InitTick+0xd8>)
 8000b30:	f001 fa08 	bl	8001f44 <HAL_TIM_Base_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b42:	2019      	movs	r0, #25
 8000b44:	f000 f9d8 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d808      	bhi.n	8000b60 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	2019      	movs	r0, #25
 8000b54:	f000 f9b4 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0xe0>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e002      	b.n	8000b66 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3730      	adds	r7, #48	@ 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	200003b4 	.word	0x200003b4
 8000b80:	40010000 	.word	0x40010000
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bc6:	f001 fa2d 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200003b4 	.word	0x200003b4

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f001 fa23 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000320 	.word	0x20000320

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f004 fba8 	bl	800536c <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	200003fc 	.word	0x200003fc
 8000c50:	200043b8 	.word	0x200043b8

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c7c:	f7ff ffea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f004 fb67 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fcb9 	bl	8000620 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000cbc:	0800649c 	.word	0x0800649c
  ldr r2, =_sbss
 8000cc0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000cc4:	200043b4 	.word	0x200043b4

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f8d8 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f7ff fed2 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe36 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000400 	.word	0x20000400

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000400 	.word	0x20000400

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e165      	b.n	80011fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8154 	bne.w	80011f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80ae 	beq.w	80011f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b5d      	ldr	r3, [pc, #372]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a58      	ldr	r2, [pc, #352]	@ (8001218 <HAL_GPIO_Init+0x304>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x308>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x30c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x216>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x310>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x314>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x318>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x20a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x31c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x206>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a49      	ldr	r2, [pc, #292]	@ (8001234 <HAL_GPIO_Init+0x320>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x202>
 8001112:	2306      	movs	r3, #6
 8001114:	e00c      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001116:	2307      	movs	r3, #7
 8001118:	e00a      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800111a:	2305      	movs	r3, #5
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800111e:	2304      	movs	r3, #4
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	@ (8001218 <HAL_GPIO_Init+0x304>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <HAL_GPIO_Init+0x324>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001172:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <HAL_GPIO_Init+0x324>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <HAL_GPIO_Init+0x324>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800119c:	4a26      	ldr	r2, [pc, #152]	@ (8001238 <HAL_GPIO_Init+0x324>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <HAL_GPIO_Init+0x324>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <HAL_GPIO_Init+0x324>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_GPIO_Init+0x324>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <HAL_GPIO_Init+0x324>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f ae96 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40021400 	.word	0x40021400
 8001234:	40021800 	.word	0x40021800
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0cc      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b68      	ldr	r3, [pc, #416]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b65      	ldr	r3, [pc, #404]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a58      	ldr	r2, [pc, #352]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a52      	ldr	r2, [pc, #328]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e067      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b37      	ldr	r3, [pc, #220]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4934      	ldr	r1, [pc, #208]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff fcea 	bl	8000d38 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff fce6 	bl	8000d38 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d20c      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 f887 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	@ (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fb44 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00
 800142c:	40023800 	.word	0x40023800
 8001430:	0800641c 	.word	0x0800641c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_RCC_GetHCLKFreq+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff0 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	0800642c 	.word	0x0800642c

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff ffdc 	bl	800143c <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0b5b      	lsrs	r3, r3, #13
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	@ (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	0800642c 	.word	0x0800642c

080014a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <HAL_RCC_GetClockConfig+0x60>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 020f 	and.w	r2, r3, #15
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800150c:	b0ae      	sub	sp, #184	@ 0xb8
 800150e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152e:	4bcb      	ldr	r3, [pc, #812]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b0c      	cmp	r3, #12
 8001538:	f200 8206 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x440>
 800153c:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001579 	.word	0x08001579
 8001548:	08001949 	.word	0x08001949
 800154c:	08001949 	.word	0x08001949
 8001550:	08001949 	.word	0x08001949
 8001554:	08001581 	.word	0x08001581
 8001558:	08001949 	.word	0x08001949
 800155c:	08001949 	.word	0x08001949
 8001560:	08001949 	.word	0x08001949
 8001564:	08001589 	.word	0x08001589
 8001568:	08001949 	.word	0x08001949
 800156c:	08001949 	.word	0x08001949
 8001570:	08001949 	.word	0x08001949
 8001574:	08001779 	.word	0x08001779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4bb9      	ldr	r3, [pc, #740]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x358>)
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800157e:	e1e7      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4bb8      	ldr	r3, [pc, #736]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001586:	e1e3      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001588:	4bb4      	ldr	r3, [pc, #720]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	4bb1      	ldr	r3, [pc, #708]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d071      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4bae      	ldr	r3, [pc, #696]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015c6:	4622      	mov	r2, r4
 80015c8:	462b      	mov	r3, r5
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0159      	lsls	r1, r3, #5
 80015d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4621      	mov	r1, r4
 80015e0:	1a51      	subs	r1, r2, r1
 80015e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80015e4:	4629      	mov	r1, r5
 80015e6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015f8:	4649      	mov	r1, r9
 80015fa:	018b      	lsls	r3, r1, #6
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001602:	4641      	mov	r1, r8
 8001604:	018a      	lsls	r2, r1, #6
 8001606:	4641      	mov	r1, r8
 8001608:	1a51      	subs	r1, r2, r1
 800160a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	eb63 0301 	sbc.w	r3, r3, r1
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001620:	4649      	mov	r1, r9
 8001622:	00cb      	lsls	r3, r1, #3
 8001624:	4641      	mov	r1, r8
 8001626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800162a:	4641      	mov	r1, r8
 800162c:	00ca      	lsls	r2, r1, #3
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	4603      	mov	r3, r0
 8001634:	4622      	mov	r2, r4
 8001636:	189b      	adds	r3, r3, r2
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
 800163a:	462b      	mov	r3, r5
 800163c:	460a      	mov	r2, r1
 800163e:	eb42 0303 	adc.w	r3, r2, r3
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001650:	4629      	mov	r1, r5
 8001652:	024b      	lsls	r3, r1, #9
 8001654:	4621      	mov	r1, r4
 8001656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165a:	4621      	mov	r1, r4
 800165c:	024a      	lsls	r2, r1, #9
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800166c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001674:	f7fe fe24 	bl	80002c0 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001682:	e067      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001684:	4b75      	ldr	r3, [pc, #468]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	2200      	movs	r2, #0
 800168c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800169e:	2300      	movs	r3, #0
 80016a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016a6:	4622      	mov	r2, r4
 80016a8:	462b      	mov	r3, r5
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0159      	lsls	r1, r3, #5
 80016b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b8:	0150      	lsls	r0, r2, #5
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4621      	mov	r1, r4
 80016c0:	1a51      	subs	r1, r2, r1
 80016c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016c4:	4629      	mov	r1, r5
 80016c6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001706:	4692      	mov	sl, r2
 8001708:	469b      	mov	fp, r3
 800170a:	4623      	mov	r3, r4
 800170c:	eb1a 0303 	adds.w	r3, sl, r3
 8001710:	623b      	str	r3, [r7, #32]
 8001712:	462b      	mov	r3, r5
 8001714:	eb4b 0303 	adc.w	r3, fp, r3
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001726:	4629      	mov	r1, r5
 8001728:	028b      	lsls	r3, r1, #10
 800172a:	4621      	mov	r1, r4
 800172c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001730:	4621      	mov	r1, r4
 8001732:	028a      	lsls	r2, r1, #10
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800173c:	2200      	movs	r2, #0
 800173e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001740:	677a      	str	r2, [r7, #116]	@ 0x74
 8001742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001746:	f7fe fdbb 	bl	80002c0 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001754:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	3301      	adds	r3, #1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001776:	e0eb      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d06b      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800179a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800179c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a4:	2300      	movs	r3, #0
 80017a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	0159      	lsls	r1, r3, #5
 80017ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017be:	0150      	lsls	r0, r2, #5
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4621      	mov	r1, r4
 80017c6:	1a51      	subs	r1, r2, r1
 80017c8:	61b9      	str	r1, [r7, #24]
 80017ca:	4629      	mov	r1, r5
 80017cc:	eb63 0301 	sbc.w	r3, r3, r1
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017de:	4659      	mov	r1, fp
 80017e0:	018b      	lsls	r3, r1, #6
 80017e2:	4651      	mov	r1, sl
 80017e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e8:	4651      	mov	r1, sl
 80017ea:	018a      	lsls	r2, r1, #6
 80017ec:	4651      	mov	r1, sl
 80017ee:	ebb2 0801 	subs.w	r8, r2, r1
 80017f2:	4659      	mov	r1, fp
 80017f4:	eb63 0901 	sbc.w	r9, r3, r1
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180c:	4690      	mov	r8, r2
 800180e:	4699      	mov	r9, r3
 8001810:	4623      	mov	r3, r4
 8001812:	eb18 0303 	adds.w	r3, r8, r3
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	462b      	mov	r3, r5
 800181a:	eb49 0303 	adc.w	r3, r9, r3
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800182c:	4629      	mov	r1, r5
 800182e:	024b      	lsls	r3, r1, #9
 8001830:	4621      	mov	r1, r4
 8001832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001836:	4621      	mov	r1, r4
 8001838:	024a      	lsls	r2, r1, #9
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001842:	2200      	movs	r2, #0
 8001844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001846:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800184c:	f7fe fd38 	bl	80002c0 <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800185a:	e065      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x420>
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	4611      	mov	r1, r2
 8001874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001878:	653b      	str	r3, [r7, #80]	@ 0x50
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	@ 0x54
 800187e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001882:	4642      	mov	r2, r8
 8001884:	464b      	mov	r3, r9
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4641      	mov	r1, r8
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	4649      	mov	r1, r9
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b4:	4659      	mov	r1, fp
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4651      	mov	r1, sl
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4651      	mov	r1, sl
 80018c4:	1a54      	subs	r4, r2, r1
 80018c6:	4659      	mov	r1, fp
 80018c8:	eb63 0501 	sbc.w	r5, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	00eb      	lsls	r3, r5, #3
 80018d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018da:	00e2      	lsls	r2, r4, #3
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	18e3      	adds	r3, r4, r3
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	464b      	mov	r3, r9
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001910:	2200      	movs	r2, #0
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001914:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800191a:	f7fe fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4613      	mov	r3, r2
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0f1b      	lsrs	r3, r3, #28
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800193a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001946:	e003      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001954:	4618      	mov	r0, r3
 8001956:	37b8      	adds	r7, #184	@ 0xb8
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400

08001968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e28d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8083 	beq.w	8001a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001988:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d019      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001994:	4b91      	ldr	r3, [pc, #580]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
        || \
 800199c:	2b08      	cmp	r3, #8
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a0:	4b8e      	ldr	r3, [pc, #568]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d112      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b84      	ldr	r3, [pc, #528]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x124>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d157      	bne.n	8001a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e25a      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x90>
 80019ea:	4b7c      	ldr	r3, [pc, #496]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7b      	ldr	r2, [pc, #492]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb4>
 8001a02:	4b76      	ldr	r3, [pc, #472]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a75      	ldr	r2, [pc, #468]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a72      	ldr	r2, [pc, #456]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f97c 	bl	8000d38 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f978 	bl	8000d38 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e21f      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b61      	ldr	r3, [pc, #388]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xdc>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f968 	bl	8000d38 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f964 	bl	8000d38 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e20b      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x104>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06f      	beq.n	8001b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a9a:	4b50      	ldr	r3, [pc, #320]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b44      	ldr	r3, [pc, #272]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1d3      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3b      	ldr	r3, [pc, #236]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4937      	ldr	r1, [pc, #220]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f911 	bl	8000d38 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f90d 	bl	8000d38 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1b4      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4925      	ldr	r1, [pc, #148]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8f0 	bl	8000d38 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f8ec 	bl	8000d38 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e193      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d036      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d016      	beq.n	8001bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff f8d0 	bl	8000d38 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f8cc 	bl	8000d38 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e173      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x234>
 8001bba:	e01b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f8b9 	bl	8000d38 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	e00e      	b.n	8001be8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f8b5 	bl	8000d38 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d907      	bls.n	8001be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e15c      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	42470000 	.word	0x42470000
 8001be4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ea      	bne.n	8001bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8097 	beq.w	8001d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b7f      	ldr	r3, [pc, #508]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b79      	ldr	r3, [pc, #484]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f875 	bl	8000d38 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff f871 	bl	8000d38 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e118      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x31e>
 8001c78:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a65      	ldr	r2, [pc, #404]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x340>
 8001c8e:	4b61      	ldr	r3, [pc, #388]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a60      	ldr	r2, [pc, #384]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a59      	ldr	r2, [pc, #356]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb4:	4b57      	ldr	r3, [pc, #348]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a56      	ldr	r2, [pc, #344]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f836 	bl	8000d38 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f832 	bl	8000d38 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0d7      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0ee      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x368>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f820 	bl	8000d38 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f81c 	bl	8000d38 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0c1      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a3a      	ldr	r2, [pc, #232]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80ad 	beq.w	8001e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3a:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d060      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d145      	bne.n	8001dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe fff0 	bl	8000d38 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe ffec 	bl	8000d38 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e093      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	071b      	lsls	r3, r3, #28
 8001da6:	491b      	ldr	r1, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7fe ffc1 	bl	8000d38 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ffbd 	bl	8000d38 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e064      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x452>
 8001dd8:	e05c      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffaa 	bl	8000d38 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ffa6 	bl	8000d38 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x480>
 8001e06:	e045      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e040      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_RCC_OscConfig+0x538>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d030      	beq.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d129      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d122      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd7c 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fa7e 	bl	80023e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e04e      	b.n	8001ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f86:	d01d      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	@ (800201c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	@ (8002020 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d010      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe6:	e007      	b.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40001800 	.word	0x40001800

08002024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0202 	mvn.w	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f999 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f98b 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f99c 	bl	80023ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0204 	mvn.w	r2, #4
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f973 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f965 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f976 	bl	80023ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0208 	mvn.w	r2, #8
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f94d 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f93f 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f950 	bl	80023ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f927 	bl	80023a6 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f919 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f92a 	bl	80023ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fbcc 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fade 	bl	8002770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8fb 	bl	80023ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0220 	mvn.w	r2, #32
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fab0 	bl	800275c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIM_ConfigClockSource+0x1c>
 800221c:	2302      	movs	r3, #2
 800221e:	e0b4      	b.n	800238a <HAL_TIM_ConfigClockSource+0x186>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800223e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002258:	d03e      	beq.n	80022d8 <HAL_TIM_ConfigClockSource+0xd4>
 800225a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800225e:	f200 8087 	bhi.w	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002266:	f000 8086 	beq.w	8002376 <HAL_TIM_ConfigClockSource+0x172>
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800226e:	d87f      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b70      	cmp	r3, #112	@ 0x70
 8002272:	d01a      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0xa6>
 8002274:	2b70      	cmp	r3, #112	@ 0x70
 8002276:	d87b      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002278:	2b60      	cmp	r3, #96	@ 0x60
 800227a:	d050      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x11a>
 800227c:	2b60      	cmp	r3, #96	@ 0x60
 800227e:	d877      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002280:	2b50      	cmp	r3, #80	@ 0x50
 8002282:	d03c      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xfa>
 8002284:	2b50      	cmp	r3, #80	@ 0x50
 8002286:	d873      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002288:	2b40      	cmp	r3, #64	@ 0x40
 800228a:	d058      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x13a>
 800228c:	2b40      	cmp	r3, #64	@ 0x40
 800228e:	d86f      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002290:	2b30      	cmp	r3, #48	@ 0x30
 8002292:	d064      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x15a>
 8002294:	2b30      	cmp	r3, #48	@ 0x30
 8002296:	d86b      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 8002298:	2b20      	cmp	r3, #32
 800229a:	d060      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x15a>
 800229c:	2b20      	cmp	r3, #32
 800229e:	d867      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05c      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x15a>
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d05a      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	e062      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ba:	f000 f9b3 	bl	8002624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	609a      	str	r2, [r3, #8]
      break;
 80022d6:	e04f      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022e8:	f000 f99c 	bl	8002624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022fa:	609a      	str	r2, [r3, #8]
      break;
 80022fc:	e03c      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	461a      	mov	r2, r3
 800230c:	f000 f910 	bl	8002530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2150      	movs	r1, #80	@ 0x50
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f969 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800231c:	e02c      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	461a      	mov	r2, r3
 800232c:	f000 f92f 	bl	800258e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2160      	movs	r1, #96	@ 0x60
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f959 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800233c:	e01c      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	461a      	mov	r2, r3
 800234c:	f000 f8f0 	bl	8002530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	@ 0x40
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f949 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800235c:	e00c      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f000 f940 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800236e:	e003      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e000      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a43      	ldr	r2, [pc, #268]	@ (8002504 <TIM_Base_SetConfig+0x120>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002402:	d00f      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <TIM_Base_SetConfig+0x124>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00b      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3f      	ldr	r2, [pc, #252]	@ (800250c <TIM_Base_SetConfig+0x128>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3e      	ldr	r2, [pc, #248]	@ (8002510 <TIM_Base_SetConfig+0x12c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	@ (8002514 <TIM_Base_SetConfig+0x130>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d108      	bne.n	8002436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a32      	ldr	r2, [pc, #200]	@ (8002504 <TIM_Base_SetConfig+0x120>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002444:	d027      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <TIM_Base_SetConfig+0x124>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d023      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2e      	ldr	r2, [pc, #184]	@ (800250c <TIM_Base_SetConfig+0x128>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2d      	ldr	r2, [pc, #180]	@ (8002510 <TIM_Base_SetConfig+0x12c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <TIM_Base_SetConfig+0x130>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d017      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <TIM_Base_SetConfig+0x134>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <TIM_Base_SetConfig+0x138>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00f      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <TIM_Base_SetConfig+0x13c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <TIM_Base_SetConfig+0x140>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <TIM_Base_SetConfig+0x144>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <TIM_Base_SetConfig+0x148>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <TIM_Base_SetConfig+0x120>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0xf2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <TIM_Base_SetConfig+0x130>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d103      	bne.n	80024de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	601a      	str	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800
 8002510:	40000c00 	.word	0x40000c00
 8002514:	40010400 	.word	0x40010400
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800
 8002524:	40001800 	.word	0x40001800
 8002528:	40001c00 	.word	0x40001c00
 800252c:	40002000 	.word	0x40002000

08002530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f023 0201 	bic.w	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800255a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f023 030a 	bic.w	r3, r3, #10
 800256c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 0210 	bic.w	r2, r3, #16
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	031b      	lsls	r3, r3, #12
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	f043 0307 	orr.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800263e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	431a      	orrs	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e05a      	b.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c8:	d01d      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800270c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40010400 	.word	0x40010400
 8002754:	40014000 	.word	0x40014000
 8002758:	40001800 	.word	0x40001800

0800275c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e042      	b.n	800281c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f932 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f82b 	bl	8002824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002828:	b0c0      	sub	sp, #256	@ 0x100
 800282a:	af00      	add	r7, sp, #0
 800282c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	ea40 0301 	orr.w	r3, r0, r1
 800284c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	431a      	orrs	r2, r3
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	431a      	orrs	r2, r3
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800287c:	f021 010c 	bic.w	r1, r1, #12
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800288a:	430b      	orrs	r3, r1
 800288c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	6999      	ldr	r1, [r3, #24]
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	ea40 0301 	orr.w	r3, r0, r1
 80028aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b8f      	ldr	r3, [pc, #572]	@ (8002af0 <UART_SetConfig+0x2cc>)
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d005      	beq.n	80028c4 <UART_SetConfig+0xa0>
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b8d      	ldr	r3, [pc, #564]	@ (8002af4 <UART_SetConfig+0x2d0>)
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d104      	bne.n	80028ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028c4:	f7fe fdda 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 80028c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028cc:	e003      	b.n	80028d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ce:	f7fe fdc1 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 80028d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e0:	f040 810c 	bne.w	8002afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028f6:	4622      	mov	r2, r4
 80028f8:	462b      	mov	r3, r5
 80028fa:	1891      	adds	r1, r2, r2
 80028fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028fe:	415b      	adcs	r3, r3
 8002900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002906:	4621      	mov	r1, r4
 8002908:	eb12 0801 	adds.w	r8, r2, r1
 800290c:	4629      	mov	r1, r5
 800290e:	eb43 0901 	adc.w	r9, r3, r1
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800291e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002926:	4690      	mov	r8, r2
 8002928:	4699      	mov	r9, r3
 800292a:	4623      	mov	r3, r4
 800292c:	eb18 0303 	adds.w	r3, r8, r3
 8002930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002934:	462b      	mov	r3, r5
 8002936:	eb49 0303 	adc.w	r3, r9, r3
 800293a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800294a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800294e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002952:	460b      	mov	r3, r1
 8002954:	18db      	adds	r3, r3, r3
 8002956:	653b      	str	r3, [r7, #80]	@ 0x50
 8002958:	4613      	mov	r3, r2
 800295a:	eb42 0303 	adc.w	r3, r2, r3
 800295e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002968:	f7fd fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <UART_SetConfig+0x2d4>)
 8002972:	fba3 2302 	umull	r2, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	011c      	lsls	r4, r3, #4
 800297a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800297e:	2200      	movs	r2, #0
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002984:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	1891      	adds	r1, r2, r2
 8002992:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002994:	415b      	adcs	r3, r3
 8002996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800299c:	4641      	mov	r1, r8
 800299e:	eb12 0a01 	adds.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb43 0b01 	adc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029bc:	4692      	mov	sl, r2
 80029be:	469b      	mov	fp, r3
 80029c0:	4643      	mov	r3, r8
 80029c2:	eb1a 0303 	adds.w	r3, sl, r3
 80029c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ca:	464b      	mov	r3, r9
 80029cc:	eb4b 0303 	adc.w	r3, fp, r3
 80029d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029e8:	460b      	mov	r3, r1
 80029ea:	18db      	adds	r3, r3, r3
 80029ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80029ee:	4613      	mov	r3, r2
 80029f0:	eb42 0303 	adc.w	r3, r2, r3
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029fe:	f7fd fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <UART_SetConfig+0x2d4>)
 8002a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2264      	movs	r2, #100	@ 0x64
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	1acb      	subs	r3, r1, r3
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <UART_SetConfig+0x2d4>)
 8002a20:	fba3 2302 	umull	r2, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a2c:	441c      	add	r4, r3
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a50:	4641      	mov	r1, r8
 8002a52:	1851      	adds	r1, r2, r1
 8002a54:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a56:	4649      	mov	r1, r9
 8002a58:	414b      	adcs	r3, r1
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a68:	4659      	mov	r1, fp
 8002a6a:	00cb      	lsls	r3, r1, #3
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a72:	4651      	mov	r1, sl
 8002a74:	00ca      	lsls	r2, r1, #3
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a84:	464b      	mov	r3, r9
 8002a86:	460a      	mov	r2, r1
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	18db      	adds	r3, r3, r3
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aaa:	4613      	mov	r3, r2
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002aba:	f7fd fc01 	bl	80002c0 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <UART_SetConfig+0x2d4>)
 8002ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	2164      	movs	r1, #100	@ 0x64
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	3332      	adds	r3, #50	@ 0x32
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <UART_SetConfig+0x2d4>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	f003 0207 	and.w	r2, r3, #7
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4422      	add	r2, r4
 8002aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002aec:	e106      	b.n	8002cfc <UART_SetConfig+0x4d8>
 8002aee:	bf00      	nop
 8002af0:	40011000 	.word	0x40011000
 8002af4:	40011400 	.word	0x40011400
 8002af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b0e:	4642      	mov	r2, r8
 8002b10:	464b      	mov	r3, r9
 8002b12:	1891      	adds	r1, r2, r2
 8002b14:	6239      	str	r1, [r7, #32]
 8002b16:	415b      	adcs	r3, r3
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b1e:	4641      	mov	r1, r8
 8002b20:	1854      	adds	r4, r2, r1
 8002b22:	4649      	mov	r1, r9
 8002b24:	eb43 0501 	adc.w	r5, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	00eb      	lsls	r3, r5, #3
 8002b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	18e3      	adds	r3, r4, r3
 8002b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b44:	464b      	mov	r3, r9
 8002b46:	eb45 0303 	adc.w	r3, r5, r3
 8002b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	008b      	lsls	r3, r1, #2
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b74:	4621      	mov	r1, r4
 8002b76:	008a      	lsls	r2, r1, #2
 8002b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b7c:	f7fd fba0 	bl	80002c0 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b60      	ldr	r3, [pc, #384]	@ (8002d08 <UART_SetConfig+0x4e4>)
 8002b86:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	011c      	lsls	r4, r3, #4
 8002b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	61b9      	str	r1, [r7, #24]
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	1851      	adds	r1, r2, r1
 8002bb4:	6139      	str	r1, [r7, #16]
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	414b      	adcs	r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	00cb      	lsls	r3, r1, #3
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	00ca      	lsls	r2, r1, #3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002be4:	464b      	mov	r3, r9
 8002be6:	460a      	mov	r2, r1
 8002be8:	eb42 0303 	adc.w	r3, r2, r3
 8002bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c08:	4649      	mov	r1, r9
 8002c0a:	008b      	lsls	r3, r1, #2
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c12:	4641      	mov	r1, r8
 8002c14:	008a      	lsls	r2, r1, #2
 8002c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c1a:	f7fd fb51 	bl	80002c0 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	4b38      	ldr	r3, [pc, #224]	@ (8002d08 <UART_SetConfig+0x4e4>)
 8002c26:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2264      	movs	r2, #100	@ 0x64
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	1acb      	subs	r3, r1, r3
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	3332      	adds	r3, #50	@ 0x32
 8002c38:	4a33      	ldr	r2, [pc, #204]	@ (8002d08 <UART_SetConfig+0x4e4>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c44:	441c      	add	r4, r3
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c96:	464b      	mov	r3, r9
 8002c98:	460a      	mov	r2, r1
 8002c9a:	eb42 0303 	adc.w	r3, r2, r3
 8002c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002caa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cb8:	4649      	mov	r1, r9
 8002cba:	008b      	lsls	r3, r1, #2
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	008a      	lsls	r2, r1, #2
 8002cc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cca:	f7fd faf9 	bl	80002c0 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <UART_SetConfig+0x4e4>)
 8002cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	2164      	movs	r1, #100	@ 0x64
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	@ 0x32
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <UART_SetConfig+0x4e4>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4422      	add	r2, r4
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d08:	51eb851f 	.word	0x51eb851f

08002d0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d10:	f000 fbda 	bl	80034c8 <vTaskStartScheduler>
  
  return osOK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 0208 	add.w	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f103 0208 	add.w	r2, r3, #8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d103      	bne.n	8002ddc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e00c      	b.n	8002df6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3308      	adds	r3, #8
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e002      	b.n	8002dea <vListInsert+0x2e>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d2f6      	bcs.n	8002de4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d103      	bne.n	8002e62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08e      	sub	sp, #56	@ 0x38
 8002e86:	af04      	add	r7, sp, #16
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	e7fd      	b.n	8002eaa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <xTaskCreateStatic+0x4a>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	61fb      	str	r3, [r7, #28]
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ecc:	2364      	movs	r3, #100	@ 0x64
 8002ece:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d00b      	beq.n	8002eee <xTaskCreateStatic+0x6c>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	61bb      	str	r3, [r7, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002eee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01e      	beq.n	8002f34 <xTaskCreateStatic+0xb2>
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f850 	bl	8002fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f2e:	f000 f8e3 	bl	80030f8 <prvAddNewTaskToReadyList>
 8002f32:	e001      	b.n	8002f38 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f38:	697b      	ldr	r3, [r7, #20]
	}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3728      	adds	r7, #40	@ 0x28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08c      	sub	sp, #48	@ 0x30
 8002f46:	af04      	add	r7, sp, #16
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 f87e 	bl	8004058 <pvPortMalloc>
 8002f5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f64:	2064      	movs	r0, #100	@ 0x64
 8002f66:	f001 f877 	bl	8004058 <pvPortMalloc>
 8002f6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f78:	e005      	b.n	8002f86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f001 f93a 	bl	80041f4 <vPortFree>
 8002f80:	e001      	b.n	8002f86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9303      	str	r3, [sp, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f80e 	bl	8002fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fb0:	69f8      	ldr	r0, [r7, #28]
 8002fb2:	f000 f8a1 	bl	80030f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e002      	b.n	8002fc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	21a5      	movs	r1, #165	@ 0xa5
 8002fe6:	f002 f972 	bl	80052ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f023 0307 	bic.w	r3, r3, #7
 8003002:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	617b      	str	r3, [r7, #20]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01f      	beq.n	8003072 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	e012      	b.n	800305e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	7819      	ldrb	r1, [r3, #0]
 8003040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	3334      	adds	r3, #52	@ 0x34
 8003048:	460a      	mov	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3301      	adds	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d9e9      	bls.n	8003038 <prvInitialiseNewTask+0x6c>
 8003064:	e000      	b.n	8003068 <prvInitialiseNewTask+0x9c>
			{
				break;
 8003066:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003070:	e003      	b.n	800307a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	2b06      	cmp	r3, #6
 800307e:	d901      	bls.n	8003084 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003080:	2306      	movs	r3, #6
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003088:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe5d 	bl	8002d5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	3318      	adds	r3, #24
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fe58 	bl	8002d5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	f1c3 0207 	rsb	r2, r3, #7
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	2200      	movs	r2, #0
 80030c4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	2200      	movs	r2, #0
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	69b8      	ldr	r0, [r7, #24]
 80030da:	f000 fdab 	bl	8003c34 <pxPortInitialiseStack>
 80030de:	4602      	mov	r2, r0
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003100:	f000 feca 	bl	8003e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003104:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <prvAddNewTaskToReadyList+0xc0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a2b      	ldr	r2, [pc, #172]	@ (80031b8 <prvAddNewTaskToReadyList+0xc0>)
 800310c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800310e:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003116:	4a29      	ldr	r2, [pc, #164]	@ (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800311c:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <prvAddNewTaskToReadyList+0xc0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003124:	f000 fc62 	bl	80039ec <prvInitialiseTaskLists>
 8003128:	e00d      	b.n	8003146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800312a:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <prvAddNewTaskToReadyList+0xc8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003132:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	429a      	cmp	r2, r3
 800313e:	d802      	bhi.n	8003146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003140:	4a1e      	ldr	r2, [pc, #120]	@ (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <prvAddNewTaskToReadyList+0xcc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <prvAddNewTaskToReadyList+0xcc>)
 800314e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003150:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <prvAddNewTaskToReadyList+0xcc>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	2201      	movs	r2, #1
 800315e:	409a      	lsls	r2, r3
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <prvAddNewTaskToReadyList+0xd0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4313      	orrs	r3, r2
 8003166:	4a18      	ldr	r2, [pc, #96]	@ (80031c8 <prvAddNewTaskToReadyList+0xd0>)
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <prvAddNewTaskToReadyList+0xd4>)
 8003178:	441a      	add	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7ff fdf7 	bl	8002d74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003186:	f000 feb9 	bl	8003efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <prvAddNewTaskToReadyList+0xc8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <prvAddNewTaskToReadyList+0xd8>)
 80031a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000504 	.word	0x20000504
 80031bc:	20000404 	.word	0x20000404
 80031c0:	20000510 	.word	0x20000510
 80031c4:	20000520 	.word	0x20000520
 80031c8:	2000050c 	.word	0x2000050c
 80031cc:	20000408 	.word	0x20000408
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <vTaskDelayUntil+0x2c>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	617b      	str	r3, [r7, #20]
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <vTaskDelayUntil+0x4a>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	613b      	str	r3, [r7, #16]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800321e:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <vTaskDelayUntil+0xf4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <vTaskDelayUntil+0x6a>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60fb      	str	r3, [r7, #12]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800323e:	f000 f9a7 	bl	8003590 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <vTaskDelayUntil+0xf8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a3a      	ldr	r2, [r7, #32]
 8003258:	429a      	cmp	r2, r3
 800325a:	d20b      	bcs.n	8003274 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	429a      	cmp	r2, r3
 8003264:	d211      	bcs.n	800328a <vTaskDelayUntil+0xb6>
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90d      	bls.n	800328a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
 8003272:	e00a      	b.n	800328a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	429a      	cmp	r2, r3
 800327c:	d303      	bcc.n	8003286 <vTaskDelayUntil+0xb2>
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	429a      	cmp	r2, r3
 8003284:	d901      	bls.n	800328a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fc62 	bl	8003b68 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80032a4:	f000 f982 	bl	80035ac <xTaskResumeAll>
 80032a8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80032b0:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <vTaskDelayUntil+0xfc>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032c0:	bf00      	nop
 80032c2:	3728      	adds	r7, #40	@ 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000052c 	.word	0x2000052c
 80032cc:	20000508 	.word	0x20000508
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d018      	beq.n	8003318 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032e6:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <vTaskDelay+0x64>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <vTaskDelay+0x32>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	60bb      	str	r3, [r7, #8]
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003306:	f000 f943 	bl	8003590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800330a:	2100      	movs	r1, #0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fc2b 	bl	8003b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003312:	f000 f94b 	bl	80035ac <xTaskResumeAll>
 8003316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800331e:	4b07      	ldr	r3, [pc, #28]	@ (800333c <vTaskDelay+0x68>)
 8003320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000052c 	.word	0x2000052c
 800333c:	e000ed04 	.word	0xe000ed04

08003340 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003348:	f000 fda6 	bl	8003e98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <uxTaskPriorityGet+0x18>
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <uxTaskPriorityGet+0x30>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e000      	b.n	800335a <uxTaskPriorityGet+0x1a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003362:	f000 fdcb 	bl	8003efc <vPortExitCritical>

		return uxReturn;
 8003366:	68bb      	ldr	r3, [r7, #8]
	}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000404 	.word	0x20000404

08003374 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d90b      	bls.n	80033a0 <vTaskPrioritySet+0x2c>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60fb      	str	r3, [r7, #12]
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d901      	bls.n	80033aa <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033a6:	2306      	movs	r3, #6
 80033a8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80033aa:	f000 fd75 	bl	8003e98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <vTaskPrioritySet+0x46>
 80033b4:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <vTaskPrioritySet+0x144>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e000      	b.n	80033bc <vTaskPrioritySet+0x48>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d06f      	beq.n	80034ac <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d90d      	bls.n	80033f0 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80033d4:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <vTaskPrioritySet+0x144>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d00f      	beq.n	80033fe <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <vTaskPrioritySet+0x144>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d309      	bcc.n	80033fe <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e006      	b.n	80033fe <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <vTaskPrioritySet+0x144>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d101      	bne.n	80033fe <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db04      	blt.n	800342e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f1c3 0207 	rsb	r2, r3, #7
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	6959      	ldr	r1, [r3, #20]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <vTaskPrioritySet+0x148>)
 800343e:	4413      	add	r3, r2
 8003440:	4299      	cmp	r1, r3
 8003442:	d128      	bne.n	8003496 <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fcf0 	bl	8002e2e <uxListRemove>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003454:	2201      	movs	r2, #1
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43da      	mvns	r2, r3
 800345e:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <vTaskPrioritySet+0x14c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <vTaskPrioritySet+0x14c>)
 8003466:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <vTaskPrioritySet+0x14c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <vTaskPrioritySet+0x14c>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <vTaskPrioritySet+0x148>)
 8003488:	441a      	add	r2, r3
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3304      	adds	r3, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7ff fc6f 	bl	8002d74 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <vTaskPrioritySet+0x150>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80034ac:	f000 fd26 	bl	8003efc <vPortExitCritical>
	}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000404 	.word	0x20000404
 80034bc:	20000408 	.word	0x20000408
 80034c0:	2000050c 	.word	0x2000050c
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d6:	463a      	mov	r2, r7
 80034d8:	1d39      	adds	r1, r7, #4
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f884 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	9202      	str	r2, [sp, #8]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	460a      	mov	r2, r1
 80034f6:	4920      	ldr	r1, [pc, #128]	@ (8003578 <vTaskStartScheduler+0xb0>)
 80034f8:	4820      	ldr	r0, [pc, #128]	@ (800357c <vTaskStartScheduler+0xb4>)
 80034fa:	f7ff fcc2 	bl	8002e82 <xTaskCreateStatic>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <vTaskStartScheduler+0xb8>)
 8003502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003504:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <vTaskStartScheduler+0xb8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e001      	b.n	8003516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d118      	bne.n	800354e <vTaskStartScheduler+0x86>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	613b      	str	r3, [r7, #16]
}
 800352e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003530:	4b14      	ldr	r3, [pc, #80]	@ (8003584 <vTaskStartScheduler+0xbc>)
 8003532:	f04f 32ff 	mov.w	r2, #4294967295
 8003536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003538:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <vTaskStartScheduler+0xc0>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <vTaskStartScheduler+0xc4>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003544:	f7fd f9d8 	bl	80008f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003548:	f000 fc02 	bl	8003d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800354c:	e00f      	b.n	800356e <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d10b      	bne.n	800356e <vTaskStartScheduler+0xa6>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60fb      	str	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <vTaskStartScheduler+0xa2>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	08006128 	.word	0x08006128
 800357c:	080039b9 	.word	0x080039b9
 8003580:	20000528 	.word	0x20000528
 8003584:	20000524 	.word	0x20000524
 8003588:	20000510 	.word	0x20000510
 800358c:	20000508 	.word	0x20000508

08003590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <vTaskSuspendAll+0x18>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	4a03      	ldr	r2, [pc, #12]	@ (80035a8 <vTaskSuspendAll+0x18>)
 800359c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	2000052c 	.word	0x2000052c

080035ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035ba:	4b42      	ldr	r3, [pc, #264]	@ (80036c4 <xTaskResumeAll+0x118>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <xTaskResumeAll+0x2e>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	603b      	str	r3, [r7, #0]
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	e7fd      	b.n	80035d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035da:	f000 fc5d 	bl	8003e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035de:	4b39      	ldr	r3, [pc, #228]	@ (80036c4 <xTaskResumeAll+0x118>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	4a37      	ldr	r2, [pc, #220]	@ (80036c4 <xTaskResumeAll+0x118>)
 80035e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e8:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <xTaskResumeAll+0x118>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d161      	bne.n	80036b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f0:	4b35      	ldr	r3, [pc, #212]	@ (80036c8 <xTaskResumeAll+0x11c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05d      	beq.n	80036b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f8:	e02e      	b.n	8003658 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <xTaskResumeAll+0x120>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3318      	adds	r3, #24
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fc11 	bl	8002e2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fc0c 	bl	8002e2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	2201      	movs	r2, #1
 800361c:	409a      	lsls	r2, r3
 800361e:	4b2c      	ldr	r3, [pc, #176]	@ (80036d0 <xTaskResumeAll+0x124>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <xTaskResumeAll+0x124>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <xTaskResumeAll+0x128>)
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7ff fb98 	bl	8002d74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003648:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <xTaskResumeAll+0x12c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003652:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <xTaskResumeAll+0x130>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003658:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <xTaskResumeAll+0x120>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1cc      	bne.n	80035fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003666:	f000 fa5f 	bl	8003b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800366a:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <xTaskResumeAll+0x134>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d010      	beq.n	8003698 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003676:	f000 f86d 	bl	8003754 <xTaskIncrementTick>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003680:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <xTaskResumeAll+0x130>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3b01      	subs	r3, #1
 800368a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f1      	bne.n	8003676 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003692:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <xTaskResumeAll+0x134>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <xTaskResumeAll+0x130>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036a4:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <xTaskResumeAll+0x138>)
 80036a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036b4:	f000 fc22 	bl	8003efc <vPortExitCritical>

	return xAlreadyYielded;
 80036b8:	68bb      	ldr	r3, [r7, #8]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000052c 	.word	0x2000052c
 80036c8:	20000504 	.word	0x20000504
 80036cc:	200004c4 	.word	0x200004c4
 80036d0:	2000050c 	.word	0x2000050c
 80036d4:	20000408 	.word	0x20000408
 80036d8:	20000404 	.word	0x20000404
 80036dc:	20000518 	.word	0x20000518
 80036e0:	20000514 	.word	0x20000514
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036ee:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <xTaskGetTickCount+0x1c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036f4:	687b      	ldr	r3, [r7, #4]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000508 	.word	0x20000508

08003708 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <pcTaskGetName+0x14>
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <pcTaskGetName+0x48>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e000      	b.n	800371e <pcTaskGetName+0x16>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <pcTaskGetName+0x36>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60bb      	str	r3, [r7, #8]
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3334      	adds	r3, #52	@ 0x34
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000404 	.word	0x20000404

08003754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375e:	4b4f      	ldr	r3, [pc, #316]	@ (800389c <xTaskIncrementTick+0x148>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 808f 	bne.w	8003886 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003768:	4b4d      	ldr	r3, [pc, #308]	@ (80038a0 <xTaskIncrementTick+0x14c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003770:	4a4b      	ldr	r2, [pc, #300]	@ (80038a0 <xTaskIncrementTick+0x14c>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d121      	bne.n	80037c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800377c:	4b49      	ldr	r3, [pc, #292]	@ (80038a4 <xTaskIncrementTick+0x150>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	603b      	str	r3, [r7, #0]
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	e7fd      	b.n	800379a <xTaskIncrementTick+0x46>
 800379e:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <xTaskIncrementTick+0x150>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	4b40      	ldr	r3, [pc, #256]	@ (80038a8 <xTaskIncrementTick+0x154>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3e      	ldr	r2, [pc, #248]	@ (80038a4 <xTaskIncrementTick+0x150>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4a3e      	ldr	r2, [pc, #248]	@ (80038a8 <xTaskIncrementTick+0x154>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <xTaskIncrementTick+0x158>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	4a3c      	ldr	r2, [pc, #240]	@ (80038ac <xTaskIncrementTick+0x158>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	f000 f9b4 	bl	8003b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037c0:	4b3b      	ldr	r3, [pc, #236]	@ (80038b0 <xTaskIncrementTick+0x15c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d348      	bcc.n	800385c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ca:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <xTaskIncrementTick+0x150>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d4:	4b36      	ldr	r3, [pc, #216]	@ (80038b0 <xTaskIncrementTick+0x15c>)
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	601a      	str	r2, [r3, #0]
					break;
 80037dc:	e03e      	b.n	800385c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <xTaskIncrementTick+0x150>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d203      	bcs.n	80037fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037f6:	4a2e      	ldr	r2, [pc, #184]	@ (80038b0 <xTaskIncrementTick+0x15c>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037fc:	e02e      	b.n	800385c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fb13 	bl	8002e2e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3318      	adds	r3, #24
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fb0a 	bl	8002e2e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <xTaskIncrementTick+0x160>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	4a22      	ldr	r2, [pc, #136]	@ (80038b4 <xTaskIncrementTick+0x160>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4a1f      	ldr	r2, [pc, #124]	@ (80038b8 <xTaskIncrementTick+0x164>)
 800383a:	441a      	add	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7ff fa96 	bl	8002d74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <xTaskIncrementTick+0x168>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	429a      	cmp	r2, r3
 8003854:	d3b9      	bcc.n	80037ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003856:	2301      	movs	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800385a:	e7b6      	b.n	80037ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800385c:	4b17      	ldr	r3, [pc, #92]	@ (80038bc <xTaskIncrementTick+0x168>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	4915      	ldr	r1, [pc, #84]	@ (80038b8 <xTaskIncrementTick+0x164>)
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d901      	bls.n	8003878 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003878:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <xTaskIncrementTick+0x16c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e004      	b.n	8003890 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003886:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <xTaskIncrementTick+0x170>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3301      	adds	r3, #1
 800388c:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <xTaskIncrementTick+0x170>)
 800388e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003890:	697b      	ldr	r3, [r7, #20]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000052c 	.word	0x2000052c
 80038a0:	20000508 	.word	0x20000508
 80038a4:	200004bc 	.word	0x200004bc
 80038a8:	200004c0 	.word	0x200004c0
 80038ac:	2000051c 	.word	0x2000051c
 80038b0:	20000524 	.word	0x20000524
 80038b4:	2000050c 	.word	0x2000050c
 80038b8:	20000408 	.word	0x20000408
 80038bc:	20000404 	.word	0x20000404
 80038c0:	20000518 	.word	0x20000518
 80038c4:	20000514 	.word	0x20000514

080038c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <vTaskSwitchContext+0xd4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038d6:	4b32      	ldr	r3, [pc, #200]	@ (80039a0 <vTaskSwitchContext+0xd8>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038dc:	e059      	b.n	8003992 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80038de:	4b30      	ldr	r3, [pc, #192]	@ (80039a0 <vTaskSwitchContext+0xd8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80038e4:	f7fd f814 	bl	8000910 <getRunTimeCounterValue>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a2e      	ldr	r2, [pc, #184]	@ (80039a4 <vTaskSwitchContext+0xdc>)
 80038ec:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80038ee:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <vTaskSwitchContext+0xdc>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <vTaskSwitchContext+0xe0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d909      	bls.n	800390e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80038fa:	4b2c      	ldr	r3, [pc, #176]	@ (80039ac <vTaskSwitchContext+0xe4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003900:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <vTaskSwitchContext+0xdc>)
 8003902:	6810      	ldr	r0, [r2, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <vTaskSwitchContext+0xe0>)
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	1a82      	subs	r2, r0, r2
 800390a:	440a      	add	r2, r1
 800390c:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800390e:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <vTaskSwitchContext+0xdc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a25      	ldr	r2, [pc, #148]	@ (80039a8 <vTaskSwitchContext+0xe0>)
 8003914:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <vTaskSwitchContext+0xe8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	f1c3 031f 	rsb	r3, r3, #31
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	4921      	ldr	r1, [pc, #132]	@ (80039b4 <vTaskSwitchContext+0xec>)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <vTaskSwitchContext+0x90>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	607b      	str	r3, [r7, #4]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <vTaskSwitchContext+0x8c>
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4a14      	ldr	r2, [pc, #80]	@ (80039b4 <vTaskSwitchContext+0xec>)
 8003964:	4413      	add	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	3308      	adds	r3, #8
 800397a:	429a      	cmp	r2, r3
 800397c:	d104      	bne.n	8003988 <vTaskSwitchContext+0xc0>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <vTaskSwitchContext+0xe4>)
 8003990:	6013      	str	r3, [r2, #0]
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000052c 	.word	0x2000052c
 80039a0:	20000518 	.word	0x20000518
 80039a4:	20000534 	.word	0x20000534
 80039a8:	20000530 	.word	0x20000530
 80039ac:	20000404 	.word	0x20000404
 80039b0:	2000050c 	.word	0x2000050c
 80039b4:	20000408 	.word	0x20000408

080039b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039c0:	f000 f854 	bl	8003a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039c4:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <prvIdleTask+0x2c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d907      	bls.n	80039dc <prvIdleTask+0x24>
			{
				taskYIELD();
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <prvIdleTask+0x30>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80039dc:	f000 fe08 	bl	80045f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80039e0:	e7ee      	b.n	80039c0 <prvIdleTask+0x8>
 80039e2:	bf00      	nop
 80039e4:	20000408 	.word	0x20000408
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	e00c      	b.n	8003a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <prvInitialiseTaskLists+0x60>)
 8003a04:	4413      	add	r3, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f987 	bl	8002d1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d9ef      	bls.n	80039f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a18:	480d      	ldr	r0, [pc, #52]	@ (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a1a:	f7ff f97e 	bl	8002d1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a1e:	480d      	ldr	r0, [pc, #52]	@ (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a20:	f7ff f97b 	bl	8002d1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a24:	480c      	ldr	r0, [pc, #48]	@ (8003a58 <prvInitialiseTaskLists+0x6c>)
 8003a26:	f7ff f978 	bl	8002d1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a2a:	480c      	ldr	r0, [pc, #48]	@ (8003a5c <prvInitialiseTaskLists+0x70>)
 8003a2c:	f7ff f975 	bl	8002d1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a30:	480b      	ldr	r0, [pc, #44]	@ (8003a60 <prvInitialiseTaskLists+0x74>)
 8003a32:	f7ff f972 	bl	8002d1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <prvInitialiseTaskLists+0x78>)
 8003a38:	4a05      	ldr	r2, [pc, #20]	@ (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <prvInitialiseTaskLists+0x7c>)
 8003a3e:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000408 	.word	0x20000408
 8003a50:	20000494 	.word	0x20000494
 8003a54:	200004a8 	.word	0x200004a8
 8003a58:	200004c4 	.word	0x200004c4
 8003a5c:	200004d8 	.word	0x200004d8
 8003a60:	200004f0 	.word	0x200004f0
 8003a64:	200004bc 	.word	0x200004bc
 8003a68:	200004c0 	.word	0x200004c0

08003a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a72:	e019      	b.n	8003aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a74:	f000 fa10 	bl	8003e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a78:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <prvCheckTasksWaitingTermination+0x50>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f9d2 	bl	8002e2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a0b      	ldr	r2, [pc, #44]	@ (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a9e:	f000 fa2d 	bl	8003efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f810 	bl	8003ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e1      	bne.n	8003a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200004d8 	.word	0x200004d8
 8003ac0:	20000504 	.word	0x20000504
 8003ac4:	200004ec 	.word	0x200004ec

08003ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb88 	bl	80041f4 <vPortFree>
				vPortFree( pxTCB );
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fb85 	bl	80041f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003aea:	e019      	b.n	8003b20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d103      	bne.n	8003afe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fb7c 	bl	80041f4 <vPortFree>
	}
 8003afc:	e010      	b.n	8003b20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d00b      	beq.n	8003b20 <prvDeleteTCB+0x58>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60fb      	str	r3, [r7, #12]
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <prvDeleteTCB+0x54>
	}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <prvResetNextTaskUnblockTime+0x38>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <prvResetNextTaskUnblockTime+0x3c>)
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b40:	e008      	b.n	8003b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <prvResetNextTaskUnblockTime+0x38>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <prvResetNextTaskUnblockTime+0x3c>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	200004bc 	.word	0x200004bc
 8003b64:	20000524 	.word	0x20000524

08003b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b72:	4b29      	ldr	r3, [pc, #164]	@ (8003c18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b78:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f955 	bl	8002e2e <uxListRemove>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b8a:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	2201      	movs	r2, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	4a20      	ldr	r2, [pc, #128]	@ (8003c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ba0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d10a      	bne.n	8003bc0 <prvAddCurrentTaskToDelayedList+0x58>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	481a      	ldr	r0, [pc, #104]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bba:	f7ff f8db 	bl	8002d74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bbe:	e026      	b.n	8003c0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d209      	bcs.n	8003bec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f7ff f8e9 	bl	8002dbc <vListInsert>
}
 8003bea:	e010      	b.n	8003c0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f7ff f8df 	bl	8002dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d202      	bcs.n	8003c0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c08:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6013      	str	r3, [r2, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000508 	.word	0x20000508
 8003c1c:	20000404 	.word	0x20000404
 8003c20:	2000050c 	.word	0x2000050c
 8003c24:	200004f0 	.word	0x200004f0
 8003c28:	200004c0 	.word	0x200004c0
 8003c2c:	200004bc 	.word	0x200004bc
 8003c30:	20000524 	.word	0x20000524

08003c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b04      	subs	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3b04      	subs	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c64:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <pxPortInitialiseStack+0x64>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b14      	subs	r3, #20
 8003c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b04      	subs	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f06f 0202 	mvn.w	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b20      	subs	r3, #32
 8003c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	08003c9d 	.word	0x08003c9d

08003c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ca6:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <prvTaskExitError+0x58>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d00b      	beq.n	8003cc8 <prvTaskExitError+0x2c>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <prvTaskExitError+0x28>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60bb      	str	r3, [r7, #8]
}
 8003cda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cdc:	bf00      	nop
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0fc      	beq.n	8003cde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c
	...

08003d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	20000404 	.word	0x20000404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d28:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <prvPortStartFirstTask+0x24>)
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f380 8808 	msr	MSP, r0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8814 	msr	CONTROL, r0
 8003d3a:	b662      	cpsie	i
 8003d3c:	b661      	cpsie	f
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	df00      	svc	0
 8003d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d4a:	bf00      	nop
 8003d4c:	e000ed08 	.word	0xe000ed08

08003d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <xPortStartScheduler+0x124>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a47      	ldr	r2, [pc, #284]	@ (8003e78 <xPortStartScheduler+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10b      	bne.n	8003d78 <xPortStartScheduler+0x28>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d78:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <xPortStartScheduler+0x124>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e7c <xPortStartScheduler+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10b      	bne.n	8003d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	613b      	str	r3, [r7, #16]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d9a:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <xPortStartScheduler+0x130>)
 8003d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	22ff      	movs	r2, #255	@ 0xff
 8003daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <xPortStartScheduler+0x134>)
 8003dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dc2:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc8:	e009      	b.n	8003dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003dca:	4b2f      	ldr	r3, [pc, #188]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b80      	cmp	r3, #128	@ 0x80
 8003de8:	d0ef      	beq.n	8003dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dea:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00b      	beq.n	8003e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e2c:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a16      	ldr	r2, [pc, #88]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e38:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e44:	f000 f8da 	bl	8003ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <xPortStartScheduler+0x140>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e4e:	f000 f8f9 	bl	8004044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <xPortStartScheduler+0x144>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <xPortStartScheduler+0x144>)
 8003e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e5e:	f7ff ff63 	bl	8003d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e62:	f7ff fd31 	bl	80038c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003e66:	f7ff ff19 	bl	8003c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	410fc271 	.word	0x410fc271
 8003e7c:	410fc270 	.word	0x410fc270
 8003e80:	e000e400 	.word	0xe000e400
 8003e84:	20000538 	.word	0x20000538
 8003e88:	2000053c 	.word	0x2000053c
 8003e8c:	e000ed20 	.word	0xe000ed20
 8003e90:	2000000c 	.word	0x2000000c
 8003e94:	e000ef34 	.word	0xe000ef34

08003e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d110      	bne.n	8003ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <vPortEnterCritical+0x60>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <vPortEnterCritical+0x4a>
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f02:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <vPortExitCritical+0x26>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	607b      	str	r3, [r7, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	e7fd      	b.n	8003f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	4a08      	ldr	r2, [pc, #32]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f2c:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <vPortExitCritical+0x44>
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	2000000c 	.word	0x2000000c

08003f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7ff fca2 	bl	80038c8 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	20000404 	.word	0x20000404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
}
 8003fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fd2:	f7ff fbbf 	bl	8003754 <xTaskIncrementTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <SysTick_Handler+0x40>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f383 8811 	msr	BASEPRI, r3
}
 8003fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <vPortSetupTimerInterrupt+0x38>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <vPortSetupTimerInterrupt+0x3c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <vPortSetupTimerInterrupt+0x40>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <vPortSetupTimerInterrupt+0x44>)
 800401a:	3b01      	subs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800401e:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e010 	.word	0xe000e010
 8004034:	e000e018 	.word	0xe000e018
 8004038:	20000000 	.word	0x20000000
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	e000e014 	.word	0xe000e014

08004044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004054 <vPortEnableVFP+0x10>
 8004048:	6801      	ldr	r1, [r0, #0]
 800404a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800404e:	6001      	str	r1, [r0, #0]
 8004050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004052:	bf00      	nop
 8004054:	e000ed88 	.word	0xe000ed88

08004058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004064:	f7ff fa94 	bl	8003590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004068:	4b5c      	ldr	r3, [pc, #368]	@ (80041dc <pvPortMalloc+0x184>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004070:	f000 f924 	bl	80042bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004074:	4b5a      	ldr	r3, [pc, #360]	@ (80041e0 <pvPortMalloc+0x188>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8095 	bne.w	80041ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01e      	beq.n	80040c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004088:	2208      	movs	r2, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b00      	cmp	r3, #0
 8004098:	d015      	beq.n	80040c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	3308      	adds	r3, #8
 80040a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <pvPortMalloc+0x6e>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	617b      	str	r3, [r7, #20]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d06f      	beq.n	80041ac <pvPortMalloc+0x154>
 80040cc:	4b45      	ldr	r3, [pc, #276]	@ (80041e4 <pvPortMalloc+0x18c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d86a      	bhi.n	80041ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040d6:	4b44      	ldr	r3, [pc, #272]	@ (80041e8 <pvPortMalloc+0x190>)
 80040d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040da:	4b43      	ldr	r3, [pc, #268]	@ (80041e8 <pvPortMalloc+0x190>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e0:	e004      	b.n	80040ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d903      	bls.n	80040fe <pvPortMalloc+0xa6>
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f1      	bne.n	80040e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040fe:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <pvPortMalloc+0x184>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004104:	429a      	cmp	r2, r3
 8004106:	d051      	beq.n	80041ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2208      	movs	r2, #8
 800410e:	4413      	add	r3, r2
 8004110:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1ad2      	subs	r2, r2, r3
 8004122:	2308      	movs	r3, #8
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	429a      	cmp	r2, r3
 8004128:	d920      	bls.n	800416c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <pvPortMalloc+0xfc>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	1ad2      	subs	r2, r2, r3
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004166:	69b8      	ldr	r0, [r7, #24]
 8004168:	f000 f90a 	bl	8004380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800416c:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <pvPortMalloc+0x18c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	4a1b      	ldr	r2, [pc, #108]	@ (80041e4 <pvPortMalloc+0x18c>)
 8004178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <pvPortMalloc+0x18c>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <pvPortMalloc+0x194>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d203      	bcs.n	800418e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <pvPortMalloc+0x18c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a18      	ldr	r2, [pc, #96]	@ (80041ec <pvPortMalloc+0x194>)
 800418c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <pvPortMalloc+0x188>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	431a      	orrs	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80041a2:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <pvPortMalloc+0x198>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <pvPortMalloc+0x198>)
 80041aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041ac:	f7ff f9fe 	bl	80035ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <pvPortMalloc+0x17a>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60fb      	str	r3, [r7, #12]
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <pvPortMalloc+0x176>
	return pvReturn;
 80041d2:	69fb      	ldr	r3, [r7, #28]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	@ 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20004148 	.word	0x20004148
 80041e0:	2000415c 	.word	0x2000415c
 80041e4:	2000414c 	.word	0x2000414c
 80041e8:	20004140 	.word	0x20004140
 80041ec:	20004150 	.word	0x20004150
 80041f0:	20004154 	.word	0x20004154

080041f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04f      	beq.n	80042a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004206:	2308      	movs	r3, #8
 8004208:	425b      	negs	r3, r3
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <vPortFree+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <vPortFree+0x46>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <vPortFree+0x66>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <vPortFree+0xbc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01e      	beq.n	80042a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11a      	bne.n	80042a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <vPortFree+0xbc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	43db      	mvns	r3, r3
 800427a:	401a      	ands	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004280:	f7ff f986 	bl	8003590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <vPortFree+0xc0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4413      	add	r3, r2
 800428e:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <vPortFree+0xc0>)
 8004290:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	f000 f874 	bl	8004380 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004298:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <vPortFree+0xc4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	4a06      	ldr	r2, [pc, #24]	@ (80042b8 <vPortFree+0xc4>)
 80042a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80042a2:	f7ff f983 	bl	80035ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000415c 	.word	0x2000415c
 80042b4:	2000414c 	.word	0x2000414c
 80042b8:	20004158 	.word	0x20004158

080042bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80042c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042c8:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <prvHeapInit+0xac>)
 80042ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3307      	adds	r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <prvHeapInit+0xac>)
 80042ec:	4413      	add	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <prvHeapInit+0xb0>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042fa:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <prvHeapInit+0xb0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4413      	add	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004308:	2208      	movs	r2, #8
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0307 	bic.w	r3, r3, #7
 8004316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <prvHeapInit+0xb4>)
 800431c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800431e:	4b14      	ldr	r3, [pc, #80]	@ (8004370 <prvHeapInit+0xb4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <prvHeapInit+0xb4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <prvHeapInit+0xb4>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <prvHeapInit+0xb8>)
 800434a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <prvHeapInit+0xbc>)
 8004352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004354:	4b09      	ldr	r3, [pc, #36]	@ (800437c <prvHeapInit+0xc0>)
 8004356:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000540 	.word	0x20000540
 800436c:	20004140 	.word	0x20004140
 8004370:	20004148 	.word	0x20004148
 8004374:	20004150 	.word	0x20004150
 8004378:	2000414c 	.word	0x2000414c
 800437c:	2000415c 	.word	0x2000415c

08004380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004388:	4b28      	ldr	r3, [pc, #160]	@ (800442c <prvInsertBlockIntoFreeList+0xac>)
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e002      	b.n	8004394 <prvInsertBlockIntoFreeList+0x14>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	d8f7      	bhi.n	800438e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d108      	bne.n	80043c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	441a      	add	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	441a      	add	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d118      	bne.n	8004408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <prvInsertBlockIntoFreeList+0xb0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d00d      	beq.n	80043fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e008      	b.n	8004410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <prvInsertBlockIntoFreeList+0xb0>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e003      	b.n	8004410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d002      	beq.n	800441e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20004140 	.word	0x20004140
 8004430:	20004148 	.word	0x20004148

08004434 <app_init>:
TaskHandle_t h_task_gate_b;
TaskHandle_t h_task_test;

/********************** external functions definition ************************/
void app_init(void)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b087      	sub	sp, #28
 8004438:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800443a:	f7ff fd2d 	bl	8003e98 <vPortEnterCritical>
 800443e:	4b5a      	ldr	r3, [pc, #360]	@ (80045a8 <app_init+0x174>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5a      	ldr	r2, [pc, #360]	@ (80045ac <app_init+0x178>)
 8004444:	213f      	movs	r1, #63	@ 0x3f
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fec8 	bl	80051dc <sniprintf>
 800444c:	4603      	mov	r3, r0
 800444e:	4a58      	ldr	r2, [pc, #352]	@ (80045b0 <app_init+0x17c>)
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <app_init+0x174>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f8d2 	bl	8004600 <logger_log_print_>
 800445c:	f7ff fd4e 	bl	8003efc <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8004460:	f7ff fd1a 	bl	8003e98 <vPortEnterCritical>
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <app_init+0x174>)
 8004466:	681c      	ldr	r4, [r3, #0]
 8004468:	f7ff f93e 	bl	80036e8 <xTaskGetTickCount>
 800446c:	4603      	mov	r3, r0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4b50      	ldr	r3, [pc, #320]	@ (80045b4 <app_init+0x180>)
 8004472:	4a51      	ldr	r2, [pc, #324]	@ (80045b8 <app_init+0x184>)
 8004474:	213f      	movs	r1, #63	@ 0x3f
 8004476:	4620      	mov	r0, r4
 8004478:	f000 feb0 	bl	80051dc <sniprintf>
 800447c:	4603      	mov	r3, r0
 800447e:	4a4c      	ldr	r2, [pc, #304]	@ (80045b0 <app_init+0x17c>)
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <app_init+0x174>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f8ba 	bl	8004600 <logger_log_print_>
 800448c:	f7ff fd36 	bl	8003efc <vPortExitCritical>

	LOGGER_LOG(p_sys);
 8004490:	f7ff fd02 	bl	8003e98 <vPortEnterCritical>
 8004494:	4b44      	ldr	r3, [pc, #272]	@ (80045a8 <app_init+0x174>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a48      	ldr	r2, [pc, #288]	@ (80045bc <app_init+0x188>)
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	213f      	movs	r1, #63	@ 0x3f
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fe9c 	bl	80051dc <sniprintf>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a42      	ldr	r2, [pc, #264]	@ (80045b0 <app_init+0x17c>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <app_init+0x174>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8a6 	bl	8004600 <logger_log_print_>
 80044b4:	f7ff fd22 	bl	8003efc <vPortExitCritical>
	LOGGER_LOG(p_app);
 80044b8:	f7ff fcee 	bl	8003e98 <vPortEnterCritical>
 80044bc:	4b3a      	ldr	r3, [pc, #232]	@ (80045a8 <app_init+0x174>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3f      	ldr	r2, [pc, #252]	@ (80045c0 <app_init+0x18c>)
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	213f      	movs	r1, #63	@ 0x3f
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fe88 	bl	80051dc <sniprintf>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4a38      	ldr	r2, [pc, #224]	@ (80045b0 <app_init+0x17c>)
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <app_init+0x174>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f892 	bl	8004600 <logger_log_print_>
 80044dc:	f7ff fd0e 	bl	8003efc <vPortExitCritical>

	/* Add threads, ... */
    BaseType_t ret;

    /* Task A thread at priority 2 */
    ret = xTaskCreate(task_gate_a,						/* Pointer to the function thats implement the task. */
 80044e0:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <app_init+0x190>)
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	2302      	movs	r3, #2
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ee:	4936      	ldr	r1, [pc, #216]	@ (80045c8 <app_init+0x194>)
 80044f0:	4836      	ldr	r0, [pc, #216]	@ (80045cc <app_init+0x198>)
 80044f2:	f7fe fd26 	bl	8002f42 <xTaskCreate>
 80044f6:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 2ul),			/* This task will run at priority 1. */
					  &h_task_gate_a);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d00b      	beq.n	8004516 <app_init+0xe2>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60bb      	str	r3, [r7, #8]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <app_init+0xde>

    /* Task B thread at priority 2 */
    ret = xTaskCreate(task_gate_b,						/* Pointer to the function thats implement the task. */
 8004516:	4b2e      	ldr	r3, [pc, #184]	@ (80045d0 <app_init+0x19c>)
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	2302      	movs	r3, #2
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2300      	movs	r3, #0
 8004520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004524:	492b      	ldr	r1, [pc, #172]	@ (80045d4 <app_init+0x1a0>)
 8004526:	482c      	ldr	r0, [pc, #176]	@ (80045d8 <app_init+0x1a4>)
 8004528:	f7fe fd0b 	bl	8002f42 <xTaskCreate>
 800452c:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 2ul),			/* This task will run at priority 1. */
					  &h_task_gate_b);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d00b      	beq.n	800454c <app_init+0x118>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	607b      	str	r3, [r7, #4]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <app_init+0x114>

    /* Task Test thread at priority 1, periodically excites other tasks */
    ret = xTaskCreate(task_test,						/* Pointer to the function thats implement the task. */
 800454c:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <app_init+0x1a8>)
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2301      	movs	r3, #1
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455a:	4921      	ldr	r1, [pc, #132]	@ (80045e0 <app_init+0x1ac>)
 800455c:	4821      	ldr	r0, [pc, #132]	@ (80045e4 <app_init+0x1b0>)
 800455e:	f7fe fcf0 	bl	8002f42 <xTaskCreate>
 8004562:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1ul),			/* This task will run at priority 1. */
					  &h_task_test);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d00b      	beq.n	8004582 <app_init+0x14e>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	603b      	str	r3, [r7, #0]
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <app_init+0x14a>

    cycle_counter_init();
 8004582:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <app_init+0x1b4>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <app_init+0x1b4>)
 8004588:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458c:	60d3      	str	r3, [r2, #12]
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <app_init+0x1b8>)
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <app_init+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <app_init+0x1b8>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd90      	pop	{r4, r7, pc}
 80045a8:	08006434 	.word	0x08006434
 80045ac:	080061c4 	.word	0x080061c4
 80045b0:	200041ac 	.word	0x200041ac
 80045b4:	080061c8 	.word	0x080061c8
 80045b8:	080061d4 	.word	0x080061d4
 80045bc:	20000010 	.word	0x20000010
 80045c0:	20000014 	.word	0x20000014
 80045c4:	20004160 	.word	0x20004160
 80045c8:	080061f8 	.word	0x080061f8
 80045cc:	08004629 	.word	0x08004629
 80045d0:	20004164 	.word	0x20004164
 80045d4:	08006204 	.word	0x08006204
 80045d8:	08004701 	.word	0x08004701
 80045dc:	20004168 	.word	0x20004168
 80045e0:	08006210 	.word	0x08006210
 80045e4:	080047d9 	.word	0x080047d9
 80045e8:	e000edf0 	.word	0xe000edf0
 80045ec:	e0001000 	.word	0xe0001000

080045f0 <vApplicationIdleHook>:
/********************** external data declaration *****************************/

/********************** external functions definition ************************/
/* Hook Functions */
void vApplicationIdleHook(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	   https://www.freertos.org/a00016.html
	   The idle hook is called repeatedly as long as the idle task is running. It
	   is paramount that the idle hook function does not call any API functions
	   that could cause it to block.*/
	//LOGGER_LOG("  +\r\n");
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	printf(msg);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fdd5 	bl	80051b8 <iprintf>
	fflush(stdout);
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <logger_log_print_+0x24>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fcf9 	bl	800500c <fflush>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000050 	.word	0x20000050

08004628 <task_gate_a>:
uint32_t g_task_gate_a_cnt;

/********************** external functions definition ************************/
/* Task Gate A thread */
void task_gate_a(void *parameters)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af02      	add	r7, sp, #8
 800462e:	6078      	str	r0, [r7, #4]
	g_task_gate_a_cnt = G_TASK_GATE_A_CNT_INI;
 8004630:	4b2a      	ldr	r3, [pc, #168]	@ (80046dc <task_gate_a+0xb4>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	char *p_task_name = (char *)pcTaskGetName(NULL);
 8004636:	2000      	movs	r0, #0
 8004638:	f7ff f866 	bl	8003708 <pcTaskGetName>
 800463c:	60f8      	str	r0, [r7, #12]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_gate_a);
 800463e:	f7ff fc2b 	bl	8003e98 <vPortEnterCritical>
 8004642:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <task_gate_a+0xb8>)
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <task_gate_a+0xbc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a26      	ldr	r2, [pc, #152]	@ (80046e8 <task_gate_a+0xc0>)
 8004650:	213f      	movs	r1, #63	@ 0x3f
 8004652:	f000 fdc3 	bl	80051dc <sniprintf>
 8004656:	4603      	mov	r3, r0
 8004658:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <task_gate_a+0xc4>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <task_gate_a+0xb8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ffcd 	bl	8004600 <logger_log_print_>
 8004666:	f7ff fc49 	bl	8003efc <vPortExitCritical>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;)
	{
		/* Update Task Gate A Counter */
		g_task_gate_a_cnt++;
 800466a:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <task_gate_a+0xb4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <task_gate_a+0xb4>)
 8004672:	6013      	str	r3, [r2, #0]

		/* Print out: Wait 2500mS */
		LOGGER_LOG("  %s - %s %d\r\n", p_task_gate_a_wait_2500mS, GET_NAME(g_task_gate_a_cnt), (int)g_task_gate_a_cnt);
 8004674:	f7ff fc10 	bl	8003e98 <vPortEnterCritical>
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <task_gate_a+0xb8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <task_gate_a+0xc8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <task_gate_a+0xb4>)
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	9201      	str	r2, [sp, #4]
 8004686:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <task_gate_a+0xcc>)
 8004688:	9200      	str	r2, [sp, #0]
 800468a:	4a1b      	ldr	r2, [pc, #108]	@ (80046f8 <task_gate_a+0xd0>)
 800468c:	213f      	movs	r1, #63	@ 0x3f
 800468e:	f000 fda5 	bl	80051dc <sniprintf>
 8004692:	4603      	mov	r3, r0
 8004694:	4a15      	ldr	r2, [pc, #84]	@ (80046ec <task_gate_a+0xc4>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <task_gate_a+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ffaf 	bl	8004600 <logger_log_print_>
 80046a2:	f7ff fc2b 	bl	8003efc <vPortExitCritical>
		LOGGER_LOG("  %s\r\n", p_task_gate_a_wait_2500mS);
 80046a6:	f7ff fbf7 	bl	8003e98 <vPortEnterCritical>
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <task_gate_a+0xb8>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <task_gate_a+0xc8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <task_gate_a+0xd4>)
 80046b4:	213f      	movs	r1, #63	@ 0x3f
 80046b6:	f000 fd91 	bl	80051dc <sniprintf>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a0b      	ldr	r2, [pc, #44]	@ (80046ec <task_gate_a+0xc4>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <task_gate_a+0xb8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff9b 	bl	8004600 <logger_log_print_>
 80046ca:	f7ff fc17 	bl	8003efc <vPortExitCritical>

		/* We want this task to execute every 2500 milliseconds. */
		vTaskDelay(TASK_GATE_A_TICK_DEL_MAX);
 80046ce:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80046d2:	f7fe fdff 	bl	80032d4 <vTaskDelay>
		g_task_gate_a_cnt++;
 80046d6:	bf00      	nop
 80046d8:	e7c7      	b.n	800466a <task_gate_a+0x42>
 80046da:	bf00      	nop
 80046dc:	200041b0 	.word	0x200041b0
 80046e0:	08006434 	.word	0x08006434
 80046e4:	20000018 	.word	0x20000018
 80046e8:	08006258 	.word	0x08006258
 80046ec:	200041ac 	.word	0x200041ac
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	08006280 	.word	0x08006280
 80046f8:	08006270 	.word	0x08006270
 80046fc:	08006294 	.word	0x08006294

08004700 <task_gate_b>:
uint32_t g_task_gate_b_cnt;

/********************** external functions definition ************************/
/* Task Gate B thread */
void task_gate_b(void *parameters)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
	g_task_gate_b_cnt = G_TASK_GATE_B_CNT_INI;
 8004708:	4b2a      	ldr	r3, [pc, #168]	@ (80047b4 <task_gate_b+0xb4>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	char *p_task_name = (char *)pcTaskGetName(NULL);
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe fffa 	bl	8003708 <pcTaskGetName>
 8004714:	60f8      	str	r0, [r7, #12]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_gate_b);
 8004716:	f7ff fbbf 	bl	8003e98 <vPortEnterCritical>
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <task_gate_b+0xb8>)
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <task_gate_b+0xbc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <task_gate_b+0xc0>)
 8004728:	213f      	movs	r1, #63	@ 0x3f
 800472a:	f000 fd57 	bl	80051dc <sniprintf>
 800472e:	4603      	mov	r3, r0
 8004730:	4a24      	ldr	r2, [pc, #144]	@ (80047c4 <task_gate_b+0xc4>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <task_gate_b+0xb8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff61 	bl	8004600 <logger_log_print_>
 800473e:	f7ff fbdd 	bl	8003efc <vPortExitCritical>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;)
	{
		/* Update Task Gate B Counter */
		g_task_gate_b_cnt++;
 8004742:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <task_gate_b+0xb4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	4a1a      	ldr	r2, [pc, #104]	@ (80047b4 <task_gate_b+0xb4>)
 800474a:	6013      	str	r3, [r2, #0]

		/* Print out: Wait 2500mS */
		LOGGER_LOG("  %s - %s %d\r\n", p_task_gate_b_wait_2500mS, GET_NAME(g_task_gate_b_cnt), (int)g_task_gate_b_cnt);
 800474c:	f7ff fba4 	bl	8003e98 <vPortEnterCritical>
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <task_gate_b+0xb8>)
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	4b1c      	ldr	r3, [pc, #112]	@ (80047c8 <task_gate_b+0xc8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <task_gate_b+0xb4>)
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	9201      	str	r2, [sp, #4]
 800475e:	4a1b      	ldr	r2, [pc, #108]	@ (80047cc <task_gate_b+0xcc>)
 8004760:	9200      	str	r2, [sp, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <task_gate_b+0xd0>)
 8004764:	213f      	movs	r1, #63	@ 0x3f
 8004766:	f000 fd39 	bl	80051dc <sniprintf>
 800476a:	4603      	mov	r3, r0
 800476c:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <task_gate_b+0xc4>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b11      	ldr	r3, [pc, #68]	@ (80047b8 <task_gate_b+0xb8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff43 	bl	8004600 <logger_log_print_>
 800477a:	f7ff fbbf 	bl	8003efc <vPortExitCritical>
		LOGGER_LOG("  %s\r\n", p_task_gate_b_wait_2500mS);
 800477e:	f7ff fb8b 	bl	8003e98 <vPortEnterCritical>
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <task_gate_b+0xb8>)
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <task_gate_b+0xc8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a12      	ldr	r2, [pc, #72]	@ (80047d4 <task_gate_b+0xd4>)
 800478c:	213f      	movs	r1, #63	@ 0x3f
 800478e:	f000 fd25 	bl	80051dc <sniprintf>
 8004792:	4603      	mov	r3, r0
 8004794:	4a0b      	ldr	r2, [pc, #44]	@ (80047c4 <task_gate_b+0xc4>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <task_gate_b+0xb8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff2f 	bl	8004600 <logger_log_print_>
 80047a2:	f7ff fbab 	bl	8003efc <vPortExitCritical>

		/* We want this task to execute every 2500 milliseconds. */
		vTaskDelay(TASK_GATE_B_TICK_DEL_MAX);
 80047a6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80047aa:	f7fe fd93 	bl	80032d4 <vTaskDelay>
		g_task_gate_b_cnt++;
 80047ae:	bf00      	nop
 80047b0:	e7c7      	b.n	8004742 <task_gate_b+0x42>
 80047b2:	bf00      	nop
 80047b4:	200041b4 	.word	0x200041b4
 80047b8:	08006434 	.word	0x08006434
 80047bc:	20000020 	.word	0x20000020
 80047c0:	080062d8 	.word	0x080062d8
 80047c4:	200041ac 	.word	0x200041ac
 80047c8:	20000024 	.word	0x20000024
 80047cc:	08006300 	.word	0x08006300
 80047d0:	080062f0 	.word	0x080062f0
 80047d4:	08006314 	.word	0x08006314

080047d8 <task_test>:
uint32_t g_task_test_cnt;

/********************** external functions definition ************************/
/* Task Test thread */
void task_test(void *parameters)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	g_task_test_cnt = G_TASK_TEST_CNT_INI;
 80047e0:	4b58      	ldr	r3, [pc, #352]	@ (8004944 <task_test+0x16c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	TickType_t last_wake_time;

	/* The xLastWakeTime variable needs to be initialized with the current tick
	   count. ws*/
	last_wake_time = xTaskGetTickCount();
 80047e6:	f7fe ff7f 	bl	80036e8 <xTaskGetTickCount>
 80047ea:	4603      	mov	r3, r0
 80047ec:	60bb      	str	r3, [r7, #8]

	char *p_task_name = (char *)pcTaskGetName(NULL);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7fe ff8a 	bl	8003708 <pcTaskGetName>
 80047f4:	6138      	str	r0, [r7, #16]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_test);
 80047f6:	f7ff fb4f 	bl	8003e98 <vPortEnterCritical>
 80047fa:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <task_test+0x170>)
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	4b53      	ldr	r3, [pc, #332]	@ (800494c <task_test+0x174>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4a52      	ldr	r2, [pc, #328]	@ (8004950 <task_test+0x178>)
 8004808:	213f      	movs	r1, #63	@ 0x3f
 800480a:	f000 fce7 	bl	80051dc <sniprintf>
 800480e:	4603      	mov	r3, r0
 8004810:	4a50      	ldr	r2, [pc, #320]	@ (8004954 <task_test+0x17c>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b4c      	ldr	r3, [pc, #304]	@ (8004948 <task_test+0x170>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fef1 	bl	8004600 <logger_log_print_>
 800481e:	f7ff fb6d 	bl	8003efc <vPortExitCritical>
	 * priority.
	 *
	 * Query the priority at which this task is running - passing in NULL means
	 * "return our own priority". */
	UBaseType_t task_test_priority;
	task_test_priority = uxTaskPriorityGet(NULL) + 2ul;
 8004822:	2000      	movs	r0, #0
 8004824:	f7fe fd8c 	bl	8003340 <uxTaskPriorityGet>
 8004828:	4603      	mov	r3, r0
 800482a:	3302      	adds	r3, #2
 800482c:	60fb      	str	r3, [r7, #12]

	/* Setting the TestingTask priority above the other tasks priority will
	 * cause TestingTask to immediately start running (as then TestingTask
	 * will have the higher priority of the three created tasks). */
	vTaskPrioritySet(NULL, task_test_priority);
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	2000      	movs	r0, #0
 8004832:	f7fe fd9f 	bl	8003374 <vTaskPrioritySet>

	/* Print out: Task priority */
	LOGGER_LOG("  %s %s %d\r\n", p_task_test_priority, GET_NAME(task_test_priority), (int)task_test_priority);
 8004836:	f7ff fb2f 	bl	8003e98 <vPortEnterCritical>
 800483a:	4b43      	ldr	r3, [pc, #268]	@ (8004948 <task_test+0x170>)
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	4b46      	ldr	r3, [pc, #280]	@ (8004958 <task_test+0x180>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	4b45      	ldr	r3, [pc, #276]	@ (800495c <task_test+0x184>)
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	4a44      	ldr	r2, [pc, #272]	@ (8004960 <task_test+0x188>)
 800484e:	213f      	movs	r1, #63	@ 0x3f
 8004850:	f000 fcc4 	bl	80051dc <sniprintf>
 8004854:	4603      	mov	r3, r0
 8004856:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <task_test+0x17c>)
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <task_test+0x170>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fece 	bl	8004600 <logger_log_print_>
 8004864:	f7ff fb4a 	bl	8003efc <vPortExitCritical>
	for (;;)
	{

		#if (TEST_X == TEST_0)

		uint32_t index = E_TASK_TEST_X;
 8004868:	2301      	movs	r3, #1
 800486a:	617b      	str	r3, [r7, #20]

		/* Scanning the array of events to excite tasks */
		for (index = 0; index < (sizeof(e_task_test_array)/sizeof(e_task_test_t)); index++)
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e064      	b.n	800493c <task_test+0x164>
		{
			/* Update Task Task Counter */
			g_task_test_cnt++;
 8004872:	4b34      	ldr	r3, [pc, #208]	@ (8004944 <task_test+0x16c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a32      	ldr	r2, [pc, #200]	@ (8004944 <task_test+0x16c>)
 800487a:	6013      	str	r3, [r2, #0]

			/* Print out: Event Task Test Array Index */
			LOGGER_LOG("  %s %s %d\r\n", p_task_test_e_task_test_array, GET_NAME(index), (int)index);
 800487c:	f7ff fb0c 	bl	8003e98 <vPortEnterCritical>
 8004880:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <task_test+0x170>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <task_test+0x18c>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <task_test+0x190>)
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	4a33      	ldr	r2, [pc, #204]	@ (8004960 <task_test+0x188>)
 8004894:	213f      	movs	r1, #63	@ 0x3f
 8004896:	f000 fca1 	bl	80051dc <sniprintf>
 800489a:	4603      	mov	r3, r0
 800489c:	4a2d      	ldr	r2, [pc, #180]	@ (8004954 <task_test+0x17c>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <task_test+0x170>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff feab 	bl	8004600 <logger_log_print_>
 80048aa:	f7ff fb27 	bl	8003efc <vPortExitCritical>

			switch (e_task_test_array[index]) {
 80048ae:	4a2f      	ldr	r2, [pc, #188]	@ (800496c <task_test+0x194>)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d80b      	bhi.n	80048d4 <task_test+0xfc>
 80048bc:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <task_test+0xec>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048ff 	.word	0x080048ff
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ff 	.word	0x080048ff
 80048d0:	080048ff 	.word	0x080048ff

		    	case Error:
		    	default:

		    		/* Print out: Signal Error */
		    		LOGGER_LOG("  %s\r\n", p_task_test_signal_error);
 80048d4:	f7ff fae0 	bl	8003e98 <vPortEnterCritical>
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <task_test+0x170>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <task_test+0x198>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a24      	ldr	r2, [pc, #144]	@ (8004974 <task_test+0x19c>)
 80048e2:	213f      	movs	r1, #63	@ 0x3f
 80048e4:	f000 fc7a 	bl	80051dc <sniprintf>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004954 <task_test+0x17c>)
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <task_test+0x170>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fe84 	bl	8004600 <logger_log_print_>
 80048f8:	f7ff fb00 	bl	8003efc <vPortExitCritical>
		    		break;
 80048fc:	e000      	b.n	8004900 <task_test+0x128>
		    		break;
 80048fe:	bf00      	nop
		    }

			/* Print out: Wait 5000mS */
//			LOGGER_LOG("  %s - %s %d\r\n", p_task_test_wait_5000mS, GET_NAME(g_task_test_cnt), (int)g_task_test_cnt);
			LOGGER_LOG("  %s\r\n", p_task_test_wait_5000mS);
 8004900:	f7ff faca 	bl	8003e98 <vPortEnterCritical>
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <task_test+0x170>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <task_test+0x1a0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <task_test+0x19c>)
 800490e:	213f      	movs	r1, #63	@ 0x3f
 8004910:	f000 fc64 	bl	80051dc <sniprintf>
 8004914:	4603      	mov	r3, r0
 8004916:	4a0f      	ldr	r2, [pc, #60]	@ (8004954 <task_test+0x17c>)
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <task_test+0x170>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe6e 	bl	8004600 <logger_log_print_>
 8004924:	f7ff faea 	bl	8003efc <vPortExitCritical>

			/* We want this task to execute exactly every 5000 milliseconds. */
			vTaskDelayUntil(&last_wake_time, TASK_TEST_TICK_DEL_MAX);
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fc4f 	bl	80031d4 <vTaskDelayUntil>
		for (index = 0; index < (sizeof(e_task_test_array)/sizeof(e_task_test_t)); index++)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d997      	bls.n	8004872 <task_test+0x9a>
	{
 8004942:	e791      	b.n	8004868 <task_test+0x90>
 8004944:	200041b8 	.word	0x200041b8
 8004948:	08006434 	.word	0x08006434
 800494c:	20000028 	.word	0x20000028
 8004950:	080063d0 	.word	0x080063d0
 8004954:	200041ac 	.word	0x200041ac
 8004958:	2000002c 	.word	0x2000002c
 800495c:	080063f8 	.word	0x080063f8
 8004960:	080063e8 	.word	0x080063e8
 8004964:	20000030 	.word	0x20000030
 8004968:	0800640c 	.word	0x0800640c
 800496c:	08006438 	.word	0x08006438
 8004970:	20000034 	.word	0x20000034
 8004974:	08006414 	.word	0x08006414
 8004978:	20000038 	.word	0x20000038

0800497c <findslot>:
 800497c:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <findslot+0x2c>)
 800497e:	b510      	push	{r4, lr}
 8004980:	4604      	mov	r4, r0
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	b118      	cbz	r0, 800498e <findslot+0x12>
 8004986:	6a03      	ldr	r3, [r0, #32]
 8004988:	b90b      	cbnz	r3, 800498e <findslot+0x12>
 800498a:	f000 fbdf 	bl	800514c <__sinit>
 800498e:	2c13      	cmp	r4, #19
 8004990:	d807      	bhi.n	80049a2 <findslot+0x26>
 8004992:	4806      	ldr	r0, [pc, #24]	@ (80049ac <findslot+0x30>)
 8004994:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004998:	3201      	adds	r2, #1
 800499a:	d002      	beq.n	80049a2 <findslot+0x26>
 800499c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	2000      	movs	r0, #0
 80049a4:	e7fc      	b.n	80049a0 <findslot+0x24>
 80049a6:	bf00      	nop
 80049a8:	20000050 	.word	0x20000050
 80049ac:	200041c8 	.word	0x200041c8

080049b0 <error>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	f000 fcda 	bl	800536c <__errno>
 80049b8:	2613      	movs	r6, #19
 80049ba:	4605      	mov	r5, r0
 80049bc:	2700      	movs	r7, #0
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	beab      	bkpt	0x00ab
 80049c4:	4606      	mov	r6, r0
 80049c6:	602e      	str	r6, [r5, #0]
 80049c8:	4620      	mov	r0, r4
 80049ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049cc <checkerror>:
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d101      	bne.n	80049d4 <checkerror+0x8>
 80049d0:	f7ff bfee 	b.w	80049b0 <error>
 80049d4:	4770      	bx	lr

080049d6 <_swiread>:
 80049d6:	b530      	push	{r4, r5, lr}
 80049d8:	b085      	sub	sp, #20
 80049da:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80049de:	9203      	str	r2, [sp, #12]
 80049e0:	2406      	movs	r4, #6
 80049e2:	ad01      	add	r5, sp, #4
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	beab      	bkpt	0x00ab
 80049ea:	4604      	mov	r4, r0
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff ffed 	bl	80049cc <checkerror>
 80049f2:	b005      	add	sp, #20
 80049f4:	bd30      	pop	{r4, r5, pc}

080049f6 <_read>:
 80049f6:	b570      	push	{r4, r5, r6, lr}
 80049f8:	460e      	mov	r6, r1
 80049fa:	4614      	mov	r4, r2
 80049fc:	f7ff ffbe 	bl	800497c <findslot>
 8004a00:	4605      	mov	r5, r0
 8004a02:	b930      	cbnz	r0, 8004a12 <_read+0x1c>
 8004a04:	f000 fcb2 	bl	800536c <__errno>
 8004a08:	2309      	movs	r3, #9
 8004a0a:	6003      	str	r3, [r0, #0]
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
 8004a12:	6800      	ldr	r0, [r0, #0]
 8004a14:	4622      	mov	r2, r4
 8004a16:	4631      	mov	r1, r6
 8004a18:	f7ff ffdd 	bl	80049d6 <_swiread>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d0f5      	beq.n	8004a0c <_read+0x16>
 8004a20:	686b      	ldr	r3, [r5, #4]
 8004a22:	1a20      	subs	r0, r4, r0
 8004a24:	4403      	add	r3, r0
 8004a26:	606b      	str	r3, [r5, #4]
 8004a28:	e7f2      	b.n	8004a10 <_read+0x1a>

08004a2a <_swilseek>:
 8004a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	4616      	mov	r6, r2
 8004a30:	f7ff ffa4 	bl	800497c <findslot>
 8004a34:	4605      	mov	r5, r0
 8004a36:	b940      	cbnz	r0, 8004a4a <_swilseek+0x20>
 8004a38:	f000 fc98 	bl	800536c <__errno>
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	6003      	str	r3, [r0, #0]
 8004a40:	f04f 34ff 	mov.w	r4, #4294967295
 8004a44:	4620      	mov	r0, r4
 8004a46:	b003      	add	sp, #12
 8004a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4a:	2e02      	cmp	r6, #2
 8004a4c:	d903      	bls.n	8004a56 <_swilseek+0x2c>
 8004a4e:	f000 fc8d 	bl	800536c <__errno>
 8004a52:	2316      	movs	r3, #22
 8004a54:	e7f3      	b.n	8004a3e <_swilseek+0x14>
 8004a56:	2e01      	cmp	r6, #1
 8004a58:	d112      	bne.n	8004a80 <_swilseek+0x56>
 8004a5a:	6843      	ldr	r3, [r0, #4]
 8004a5c:	18e4      	adds	r4, r4, r3
 8004a5e:	d4f6      	bmi.n	8004a4e <_swilseek+0x24>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	260a      	movs	r6, #10
 8004a64:	e9cd 3400 	strd	r3, r4, [sp]
 8004a68:	466f      	mov	r7, sp
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	beab      	bkpt	0x00ab
 8004a70:	4606      	mov	r6, r0
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ffaa 	bl	80049cc <checkerror>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dbe1      	blt.n	8004a40 <_swilseek+0x16>
 8004a7c:	606c      	str	r4, [r5, #4]
 8004a7e:	e7e1      	b.n	8004a44 <_swilseek+0x1a>
 8004a80:	2e02      	cmp	r6, #2
 8004a82:	6803      	ldr	r3, [r0, #0]
 8004a84:	d1ec      	bne.n	8004a60 <_swilseek+0x36>
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	260c      	movs	r6, #12
 8004a8a:	466f      	mov	r7, sp
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	beab      	bkpt	0x00ab
 8004a92:	4606      	mov	r6, r0
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff ff99 	bl	80049cc <checkerror>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	d0d0      	beq.n	8004a40 <_swilseek+0x16>
 8004a9e:	4404      	add	r4, r0
 8004aa0:	e7de      	b.n	8004a60 <_swilseek+0x36>

08004aa2 <_lseek>:
 8004aa2:	f7ff bfc2 	b.w	8004a2a <_swilseek>

08004aa6 <_swiwrite>:
 8004aa6:	b530      	push	{r4, r5, lr}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004aae:	9203      	str	r2, [sp, #12]
 8004ab0:	2405      	movs	r4, #5
 8004ab2:	ad01      	add	r5, sp, #4
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	beab      	bkpt	0x00ab
 8004aba:	4604      	mov	r4, r0
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7ff ff85 	bl	80049cc <checkerror>
 8004ac2:	b005      	add	sp, #20
 8004ac4:	bd30      	pop	{r4, r5, pc}

08004ac6 <_write>:
 8004ac6:	b570      	push	{r4, r5, r6, lr}
 8004ac8:	460e      	mov	r6, r1
 8004aca:	4615      	mov	r5, r2
 8004acc:	f7ff ff56 	bl	800497c <findslot>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	b930      	cbnz	r0, 8004ae2 <_write+0x1c>
 8004ad4:	f000 fc4a 	bl	800536c <__errno>
 8004ad8:	2309      	movs	r3, #9
 8004ada:	6003      	str	r3, [r0, #0]
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	bd70      	pop	{r4, r5, r6, pc}
 8004ae2:	6800      	ldr	r0, [r0, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	f7ff ffdd 	bl	8004aa6 <_swiwrite>
 8004aec:	1e03      	subs	r3, r0, #0
 8004aee:	dbf5      	blt.n	8004adc <_write+0x16>
 8004af0:	6862      	ldr	r2, [r4, #4]
 8004af2:	1ae8      	subs	r0, r5, r3
 8004af4:	4402      	add	r2, r0
 8004af6:	42ab      	cmp	r3, r5
 8004af8:	6062      	str	r2, [r4, #4]
 8004afa:	d1f1      	bne.n	8004ae0 <_write+0x1a>
 8004afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b00:	2000      	movs	r0, #0
 8004b02:	f7ff bf55 	b.w	80049b0 <error>

08004b06 <_swiclose>:
 8004b06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b08:	2402      	movs	r4, #2
 8004b0a:	9001      	str	r0, [sp, #4]
 8004b0c:	ad01      	add	r5, sp, #4
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	beab      	bkpt	0x00ab
 8004b14:	4604      	mov	r4, r0
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7ff ff58 	bl	80049cc <checkerror>
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bd30      	pop	{r4, r5, pc}

08004b20 <_close>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	f7ff ff2a 	bl	800497c <findslot>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	b930      	cbnz	r0, 8004b3a <_close+0x1a>
 8004b2c:	f000 fc1e 	bl	800536c <__errno>
 8004b30:	2309      	movs	r3, #9
 8004b32:	6003      	str	r3, [r0, #0]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	3d01      	subs	r5, #1
 8004b3c:	2d01      	cmp	r5, #1
 8004b3e:	d809      	bhi.n	8004b54 <_close+0x34>
 8004b40:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <_close+0x48>)
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d104      	bne.n	8004b54 <_close+0x34>
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	6003      	str	r3, [r0, #0]
 8004b50:	2000      	movs	r0, #0
 8004b52:	e7f1      	b.n	8004b38 <_close+0x18>
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	f7ff ffd6 	bl	8004b06 <_swiclose>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1ec      	bne.n	8004b38 <_close+0x18>
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	e7e8      	b.n	8004b38 <_close+0x18>
 8004b66:	bf00      	nop
 8004b68:	200041c8 	.word	0x200041c8

08004b6c <_swistat>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460c      	mov	r4, r1
 8004b70:	f7ff ff04 	bl	800497c <findslot>
 8004b74:	4605      	mov	r5, r0
 8004b76:	b930      	cbnz	r0, 8004b86 <_swistat+0x1a>
 8004b78:	f000 fbf8 	bl	800536c <__errno>
 8004b7c:	2309      	movs	r3, #9
 8004b7e:	6003      	str	r3, [r0, #0]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	bd70      	pop	{r4, r5, r6, pc}
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b8c:	6063      	str	r3, [r4, #4]
 8004b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b92:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004b94:	260c      	movs	r6, #12
 8004b96:	4630      	mov	r0, r6
 8004b98:	4629      	mov	r1, r5
 8004b9a:	beab      	bkpt	0x00ab
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7ff ff14 	bl	80049cc <checkerror>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d0eb      	beq.n	8004b80 <_swistat+0x14>
 8004ba8:	6120      	str	r0, [r4, #16]
 8004baa:	2000      	movs	r0, #0
 8004bac:	e7ea      	b.n	8004b84 <_swistat+0x18>

08004bae <_fstat>:
 8004bae:	460b      	mov	r3, r1
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	2258      	movs	r2, #88	@ 0x58
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fb88 	bl	80052ce <memset>
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc6:	f7ff bfd1 	b.w	8004b6c <_swistat>

08004bca <_stat>:
 8004bca:	b538      	push	{r3, r4, r5, lr}
 8004bcc:	460d      	mov	r5, r1
 8004bce:	4604      	mov	r4, r0
 8004bd0:	2258      	movs	r2, #88	@ 0x58
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 fb7a 	bl	80052ce <memset>
 8004bda:	4620      	mov	r0, r4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	f000 f811 	bl	8004c04 <_swiopen>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	4604      	mov	r4, r0
 8004be6:	d00b      	beq.n	8004c00 <_stat+0x36>
 8004be8:	686b      	ldr	r3, [r5, #4]
 8004bea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004bee:	606b      	str	r3, [r5, #4]
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7ff ffbb 	bl	8004b6c <_swistat>
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff ff91 	bl	8004b20 <_close>
 8004bfe:	462c      	mov	r4, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	bd38      	pop	{r3, r4, r5, pc}

08004c04 <_swiopen>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8004cb4 <_swiopen+0xb0>
 8004c0c:	b096      	sub	sp, #88	@ 0x58
 8004c0e:	4607      	mov	r7, r0
 8004c10:	460e      	mov	r6, r1
 8004c12:	2400      	movs	r4, #0
 8004c14:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004c1e:	d032      	beq.n	8004c86 <_swiopen+0x82>
 8004c20:	3401      	adds	r4, #1
 8004c22:	2c14      	cmp	r4, #20
 8004c24:	d1f6      	bne.n	8004c14 <_swiopen+0x10>
 8004c26:	f000 fba1 	bl	800536c <__errno>
 8004c2a:	2318      	movs	r3, #24
 8004c2c:	e03a      	b.n	8004ca4 <_swiopen+0xa0>
 8004c2e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004c32:	f240 6301 	movw	r3, #1537	@ 0x601
 8004c36:	07b2      	lsls	r2, r6, #30
 8004c38:	bf48      	it	mi
 8004c3a:	f045 0502 	orrmi.w	r5, r5, #2
 8004c3e:	421e      	tst	r6, r3
 8004c40:	bf18      	it	ne
 8004c42:	f045 0504 	orrne.w	r5, r5, #4
 8004c46:	0733      	lsls	r3, r6, #28
 8004c48:	bf48      	it	mi
 8004c4a:	f025 0504 	bicmi.w	r5, r5, #4
 8004c4e:	4638      	mov	r0, r7
 8004c50:	bf48      	it	mi
 8004c52:	f045 0508 	orrmi.w	r5, r5, #8
 8004c56:	9700      	str	r7, [sp, #0]
 8004c58:	f7fb fada 	bl	8000210 <strlen>
 8004c5c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004c60:	2501      	movs	r5, #1
 8004c62:	4628      	mov	r0, r5
 8004c64:	4651      	mov	r1, sl
 8004c66:	beab      	bkpt	0x00ab
 8004c68:	4605      	mov	r5, r0
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	db06      	blt.n	8004c7c <_swiopen+0x78>
 8004c6e:	44c8      	add	r8, r9
 8004c70:	2300      	movs	r3, #0
 8004c72:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8004c76:	f8c8 3004 	str.w	r3, [r8, #4]
 8004c7a:	e016      	b.n	8004caa <_swiopen+0xa6>
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f7ff fe97 	bl	80049b0 <error>
 8004c82:	4604      	mov	r4, r0
 8004c84:	e011      	b.n	8004caa <_swiopen+0xa6>
 8004c86:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004c8a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c8e:	46ea      	mov	sl, sp
 8004c90:	d1cd      	bne.n	8004c2e <_swiopen+0x2a>
 8004c92:	4651      	mov	r1, sl
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ff98 	bl	8004bca <_stat>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d0c7      	beq.n	8004c2e <_swiopen+0x2a>
 8004c9e:	f000 fb65 	bl	800536c <__errno>
 8004ca2:	2311      	movs	r3, #17
 8004ca4:	6003      	str	r3, [r0, #0]
 8004ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8004caa:	4620      	mov	r0, r4
 8004cac:	b016      	add	sp, #88	@ 0x58
 8004cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200041c8 	.word	0x200041c8

08004cb8 <_get_semihosting_exts>:
 8004cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	4829      	ldr	r0, [pc, #164]	@ (8004d68 <_get_semihosting_exts+0xb0>)
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f7ff ff9d 	bl	8004c04 <_swiopen>
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4604      	mov	r4, r0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 fafc 	bl	80052ce <memset>
 8004cd6:	1c63      	adds	r3, r4, #1
 8004cd8:	d014      	beq.n	8004d04 <_get_semihosting_exts+0x4c>
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff fe4e 	bl	800497c <findslot>
 8004ce0:	f04f 080c 	mov.w	r8, #12
 8004ce4:	4681      	mov	r9, r0
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	beab      	bkpt	0x00ab
 8004cec:	4680      	mov	r8, r0
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fe6c 	bl	80049cc <checkerror>
 8004cf4:	2803      	cmp	r0, #3
 8004cf6:	dd02      	ble.n	8004cfe <_get_semihosting_exts+0x46>
 8004cf8:	1ec3      	subs	r3, r0, #3
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	dc07      	bgt.n	8004d0e <_get_semihosting_exts+0x56>
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f7ff ff0e 	bl	8004b20 <_close>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b003      	add	sp, #12
 8004d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	2204      	movs	r2, #4
 8004d10:	eb0d 0102 	add.w	r1, sp, r2
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff fe6e 	bl	80049f6 <_read>
 8004d1a:	2803      	cmp	r0, #3
 8004d1c:	ddef      	ble.n	8004cfe <_get_semihosting_exts+0x46>
 8004d1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d22:	2b53      	cmp	r3, #83	@ 0x53
 8004d24:	d1eb      	bne.n	8004cfe <_get_semihosting_exts+0x46>
 8004d26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004d2a:	2b48      	cmp	r3, #72	@ 0x48
 8004d2c:	d1e7      	bne.n	8004cfe <_get_semihosting_exts+0x46>
 8004d2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004d32:	2b46      	cmp	r3, #70	@ 0x46
 8004d34:	d1e3      	bne.n	8004cfe <_get_semihosting_exts+0x46>
 8004d36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d3a:	2b42      	cmp	r3, #66	@ 0x42
 8004d3c:	d1df      	bne.n	8004cfe <_get_semihosting_exts+0x46>
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4639      	mov	r1, r7
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff fe71 	bl	8004a2a <_swilseek>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dbd8      	blt.n	8004cfe <_get_semihosting_exts+0x46>
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff fe50 	bl	80049f6 <_read>
 8004d56:	4605      	mov	r5, r0
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff fee1 	bl	8004b20 <_close>
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7ff fe34 	bl	80049cc <checkerror>
 8004d64:	e7d0      	b.n	8004d08 <_get_semihosting_exts+0x50>
 8004d66:	bf00      	nop
 8004d68:	0800643c 	.word	0x0800643c

08004d6c <initialise_semihosting_exts>:
 8004d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d6e:	4d0a      	ldr	r5, [pc, #40]	@ (8004d98 <initialise_semihosting_exts+0x2c>)
 8004d70:	4c0a      	ldr	r4, [pc, #40]	@ (8004d9c <initialise_semihosting_exts+0x30>)
 8004d72:	2100      	movs	r1, #0
 8004d74:	2201      	movs	r2, #1
 8004d76:	a801      	add	r0, sp, #4
 8004d78:	6029      	str	r1, [r5, #0]
 8004d7a:	6022      	str	r2, [r4, #0]
 8004d7c:	f7ff ff9c 	bl	8004cb8 <_get_semihosting_exts>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dd07      	ble.n	8004d94 <initialise_semihosting_exts+0x28>
 8004d84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d88:	f003 0201 	and.w	r2, r3, #1
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	b003      	add	sp, #12
 8004d96:	bd30      	pop	{r4, r5, pc}
 8004d98:	20000040 	.word	0x20000040
 8004d9c:	2000003c 	.word	0x2000003c

08004da0 <_has_ext_stdout_stderr>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4c04      	ldr	r4, [pc, #16]	@ (8004db4 <_has_ext_stdout_stderr+0x14>)
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da01      	bge.n	8004dae <_has_ext_stdout_stderr+0xe>
 8004daa:	f7ff ffdf 	bl	8004d6c <initialise_semihosting_exts>
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	2000003c 	.word	0x2000003c

08004db8 <initialise_monitor_handles>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004e70 <initialise_monitor_handles+0xb8>
 8004dc2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	2400      	movs	r4, #0
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	af01      	add	r7, sp, #4
 8004dce:	9402      	str	r4, [sp, #8]
 8004dd0:	2501      	movs	r5, #1
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	beab      	bkpt	0x00ab
 8004dd8:	4605      	mov	r5, r0
 8004dda:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004e74 <initialise_monitor_handles+0xbc>
 8004dde:	4623      	mov	r3, r4
 8004de0:	4c20      	ldr	r4, [pc, #128]	@ (8004e64 <initialise_monitor_handles+0xac>)
 8004de2:	f8c8 5000 	str.w	r5, [r8]
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004dee:	3301      	adds	r3, #1
 8004df0:	2b14      	cmp	r3, #20
 8004df2:	d1fa      	bne.n	8004dea <initialise_monitor_handles+0x32>
 8004df4:	f7ff ffd4 	bl	8004da0 <_has_ext_stdout_stderr>
 8004df8:	4d1b      	ldr	r5, [pc, #108]	@ (8004e68 <initialise_monitor_handles+0xb0>)
 8004dfa:	b1d0      	cbz	r0, 8004e32 <initialise_monitor_handles+0x7a>
 8004dfc:	f04f 0a03 	mov.w	sl, #3
 8004e00:	2304      	movs	r3, #4
 8004e02:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e06:	2601      	movs	r6, #1
 8004e08:	f8cd a00c 	str.w	sl, [sp, #12]
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4639      	mov	r1, r7
 8004e12:	beab      	bkpt	0x00ab
 8004e14:	4683      	mov	fp, r0
 8004e16:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <initialise_monitor_handles+0xb4>)
 8004e18:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e1c:	f8c3 b000 	str.w	fp, [r3]
 8004e20:	2308      	movs	r3, #8
 8004e22:	f8cd a00c 	str.w	sl, [sp, #12]
 8004e26:	9302      	str	r3, [sp, #8]
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	beab      	bkpt	0x00ab
 8004e2e:	4606      	mov	r6, r0
 8004e30:	602e      	str	r6, [r5, #0]
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	bf02      	ittt	eq
 8004e38:	4b0c      	ldreq	r3, [pc, #48]	@ (8004e6c <initialise_monitor_handles+0xb4>)
 8004e3a:	681b      	ldreq	r3, [r3, #0]
 8004e3c:	602b      	streq	r3, [r5, #0]
 8004e3e:	2600      	movs	r6, #0
 8004e40:	f8d8 3000 	ldr.w	r3, [r8]
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	6066      	str	r6, [r4, #4]
 8004e48:	f7ff ffaa 	bl	8004da0 <_has_ext_stdout_stderr>
 8004e4c:	b130      	cbz	r0, 8004e5c <initialise_monitor_handles+0xa4>
 8004e4e:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <initialise_monitor_handles+0xb4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004e5c:	b005      	add	sp, #20
 8004e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e62:	bf00      	nop
 8004e64:	200041c8 	.word	0x200041c8
 8004e68:	200041bc 	.word	0x200041bc
 8004e6c:	200041c0 	.word	0x200041c0
 8004e70:	08006452 	.word	0x08006452
 8004e74:	200041c4 	.word	0x200041c4

08004e78 <_isatty>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	f7ff fd7f 	bl	800497c <findslot>
 8004e7e:	2409      	movs	r4, #9
 8004e80:	4605      	mov	r5, r0
 8004e82:	b920      	cbnz	r0, 8004e8e <_isatty+0x16>
 8004e84:	f000 fa72 	bl	800536c <__errno>
 8004e88:	6004      	str	r4, [r0, #0]
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	beab      	bkpt	0x00ab
 8004e94:	4604      	mov	r4, r0
 8004e96:	2c01      	cmp	r4, #1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	d0f7      	beq.n	8004e8c <_isatty+0x14>
 8004e9c:	f000 fa66 	bl	800536c <__errno>
 8004ea0:	2513      	movs	r5, #19
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	beab      	bkpt	0x00ab
 8004eac:	4605      	mov	r5, r0
 8004eae:	6025      	str	r5, [r4, #0]
 8004eb0:	e7eb      	b.n	8004e8a <_isatty+0x12>
	...

08004eb4 <__sflush_r>:
 8004eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	0716      	lsls	r6, r2, #28
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	d454      	bmi.n	8004f6e <__sflush_r+0xba>
 8004ec4:	684b      	ldr	r3, [r1, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dc02      	bgt.n	8004ed0 <__sflush_r+0x1c>
 8004eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd48      	ble.n	8004f62 <__sflush_r+0xae>
 8004ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d045      	beq.n	8004f62 <__sflush_r+0xae>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004edc:	682f      	ldr	r7, [r5, #0]
 8004ede:	6a21      	ldr	r1, [r4, #32]
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	d030      	beq.n	8004f46 <__sflush_r+0x92>
 8004ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	0759      	lsls	r1, r3, #29
 8004eea:	d505      	bpl.n	8004ef8 <__sflush_r+0x44>
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ef2:	b10b      	cbz	r3, 8004ef8 <__sflush_r+0x44>
 8004ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004efc:	6a21      	ldr	r1, [r4, #32]
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	d106      	bne.n	8004f16 <__sflush_r+0x62>
 8004f08:	6829      	ldr	r1, [r5, #0]
 8004f0a:	291d      	cmp	r1, #29
 8004f0c:	d82b      	bhi.n	8004f66 <__sflush_r+0xb2>
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <__sflush_r+0x104>)
 8004f10:	40ca      	lsrs	r2, r1
 8004f12:	07d6      	lsls	r6, r2, #31
 8004f14:	d527      	bpl.n	8004f66 <__sflush_r+0xb2>
 8004f16:	2200      	movs	r2, #0
 8004f18:	6062      	str	r2, [r4, #4]
 8004f1a:	04d9      	lsls	r1, r3, #19
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	d504      	bpl.n	8004f2c <__sflush_r+0x78>
 8004f22:	1c42      	adds	r2, r0, #1
 8004f24:	d101      	bne.n	8004f2a <__sflush_r+0x76>
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	b903      	cbnz	r3, 8004f2c <__sflush_r+0x78>
 8004f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f2e:	602f      	str	r7, [r5, #0]
 8004f30:	b1b9      	cbz	r1, 8004f62 <__sflush_r+0xae>
 8004f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d002      	beq.n	8004f40 <__sflush_r+0x8c>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 fa52 	bl	80053e4 <_free_r>
 8004f40:	2300      	movs	r3, #0
 8004f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f44:	e00d      	b.n	8004f62 <__sflush_r+0xae>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b0      	blx	r6
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	1c50      	adds	r0, r2, #1
 8004f50:	d1c9      	bne.n	8004ee6 <__sflush_r+0x32>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0c6      	beq.n	8004ee6 <__sflush_r+0x32>
 8004f58:	2b1d      	cmp	r3, #29
 8004f5a:	d001      	beq.n	8004f60 <__sflush_r+0xac>
 8004f5c:	2b16      	cmp	r3, #22
 8004f5e:	d11e      	bne.n	8004f9e <__sflush_r+0xea>
 8004f60:	602f      	str	r7, [r5, #0]
 8004f62:	2000      	movs	r0, #0
 8004f64:	e022      	b.n	8004fac <__sflush_r+0xf8>
 8004f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	e01b      	b.n	8004fa6 <__sflush_r+0xf2>
 8004f6e:	690f      	ldr	r7, [r1, #16]
 8004f70:	2f00      	cmp	r7, #0
 8004f72:	d0f6      	beq.n	8004f62 <__sflush_r+0xae>
 8004f74:	0793      	lsls	r3, r2, #30
 8004f76:	680e      	ldr	r6, [r1, #0]
 8004f78:	bf08      	it	eq
 8004f7a:	694b      	ldreq	r3, [r1, #20]
 8004f7c:	600f      	str	r7, [r1, #0]
 8004f7e:	bf18      	it	ne
 8004f80:	2300      	movne	r3, #0
 8004f82:	eba6 0807 	sub.w	r8, r6, r7
 8004f86:	608b      	str	r3, [r1, #8]
 8004f88:	f1b8 0f00 	cmp.w	r8, #0
 8004f8c:	dde9      	ble.n	8004f62 <__sflush_r+0xae>
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f92:	4643      	mov	r3, r8
 8004f94:	463a      	mov	r2, r7
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b0      	blx	r6
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	dc08      	bgt.n	8004fb0 <__sflush_r+0xfc>
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	4407      	add	r7, r0
 8004fb2:	eba8 0800 	sub.w	r8, r8, r0
 8004fb6:	e7e7      	b.n	8004f88 <__sflush_r+0xd4>
 8004fb8:	20400001 	.word	0x20400001

08004fbc <_fflush_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	690b      	ldr	r3, [r1, #16]
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	b913      	cbnz	r3, 8004fcc <_fflush_r+0x10>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	4628      	mov	r0, r5
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	b118      	cbz	r0, 8004fd6 <_fflush_r+0x1a>
 8004fce:	6a03      	ldr	r3, [r0, #32]
 8004fd0:	b90b      	cbnz	r3, 8004fd6 <_fflush_r+0x1a>
 8004fd2:	f000 f8bb 	bl	800514c <__sinit>
 8004fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f3      	beq.n	8004fc6 <_fflush_r+0xa>
 8004fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fe0:	07d0      	lsls	r0, r2, #31
 8004fe2:	d404      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe4:	0599      	lsls	r1, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fea:	f000 f9ea 	bl	80053c2 <__retarget_lock_acquire_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	f7ff ff5f 	bl	8004eb4 <__sflush_r>
 8004ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ff8:	07da      	lsls	r2, r3, #31
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	d4e4      	bmi.n	8004fc8 <_fflush_r+0xc>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d4e1      	bmi.n	8004fc8 <_fflush_r+0xc>
 8005004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005006:	f000 f9dd 	bl	80053c4 <__retarget_lock_release_recursive>
 800500a:	e7dd      	b.n	8004fc8 <_fflush_r+0xc>

0800500c <fflush>:
 800500c:	4601      	mov	r1, r0
 800500e:	b920      	cbnz	r0, 800501a <fflush+0xe>
 8005010:	4a04      	ldr	r2, [pc, #16]	@ (8005024 <fflush+0x18>)
 8005012:	4905      	ldr	r1, [pc, #20]	@ (8005028 <fflush+0x1c>)
 8005014:	4805      	ldr	r0, [pc, #20]	@ (800502c <fflush+0x20>)
 8005016:	f000 b8b1 	b.w	800517c <_fwalk_sglue>
 800501a:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <fflush+0x24>)
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	f7ff bfcd 	b.w	8004fbc <_fflush_r>
 8005022:	bf00      	nop
 8005024:	20000044 	.word	0x20000044
 8005028:	08004fbd 	.word	0x08004fbd
 800502c:	20000054 	.word	0x20000054
 8005030:	20000050 	.word	0x20000050

08005034 <std>:
 8005034:	2300      	movs	r3, #0
 8005036:	b510      	push	{r4, lr}
 8005038:	4604      	mov	r4, r0
 800503a:	e9c0 3300 	strd	r3, r3, [r0]
 800503e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005042:	6083      	str	r3, [r0, #8]
 8005044:	8181      	strh	r1, [r0, #12]
 8005046:	6643      	str	r3, [r0, #100]	@ 0x64
 8005048:	81c2      	strh	r2, [r0, #14]
 800504a:	6183      	str	r3, [r0, #24]
 800504c:	4619      	mov	r1, r3
 800504e:	2208      	movs	r2, #8
 8005050:	305c      	adds	r0, #92	@ 0x5c
 8005052:	f000 f93c 	bl	80052ce <memset>
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <std+0x58>)
 8005058:	6263      	str	r3, [r4, #36]	@ 0x24
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <std+0x5c>)
 800505c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <std+0x60>)
 8005060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <std+0x64>)
 8005064:	6323      	str	r3, [r4, #48]	@ 0x30
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <std+0x68>)
 8005068:	6224      	str	r4, [r4, #32]
 800506a:	429c      	cmp	r4, r3
 800506c:	d006      	beq.n	800507c <std+0x48>
 800506e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005072:	4294      	cmp	r4, r2
 8005074:	d002      	beq.n	800507c <std+0x48>
 8005076:	33d0      	adds	r3, #208	@ 0xd0
 8005078:	429c      	cmp	r4, r3
 800507a:	d105      	bne.n	8005088 <std+0x54>
 800507c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005084:	f000 b99c 	b.w	80053c0 <__retarget_lock_init_recursive>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	bf00      	nop
 800508c:	08005249 	.word	0x08005249
 8005090:	0800526b 	.word	0x0800526b
 8005094:	080052a3 	.word	0x080052a3
 8005098:	080052c7 	.word	0x080052c7
 800509c:	20004268 	.word	0x20004268

080050a0 <stdio_exit_handler>:
 80050a0:	4a02      	ldr	r2, [pc, #8]	@ (80050ac <stdio_exit_handler+0xc>)
 80050a2:	4903      	ldr	r1, [pc, #12]	@ (80050b0 <stdio_exit_handler+0x10>)
 80050a4:	4803      	ldr	r0, [pc, #12]	@ (80050b4 <stdio_exit_handler+0x14>)
 80050a6:	f000 b869 	b.w	800517c <_fwalk_sglue>
 80050aa:	bf00      	nop
 80050ac:	20000044 	.word	0x20000044
 80050b0:	08004fbd 	.word	0x08004fbd
 80050b4:	20000054 	.word	0x20000054

080050b8 <cleanup_stdio>:
 80050b8:	6841      	ldr	r1, [r0, #4]
 80050ba:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <cleanup_stdio+0x34>)
 80050bc:	4299      	cmp	r1, r3
 80050be:	b510      	push	{r4, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	d001      	beq.n	80050c8 <cleanup_stdio+0x10>
 80050c4:	f7ff ff7a 	bl	8004fbc <_fflush_r>
 80050c8:	68a1      	ldr	r1, [r4, #8]
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <cleanup_stdio+0x38>)
 80050cc:	4299      	cmp	r1, r3
 80050ce:	d002      	beq.n	80050d6 <cleanup_stdio+0x1e>
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff ff73 	bl	8004fbc <_fflush_r>
 80050d6:	68e1      	ldr	r1, [r4, #12]
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <cleanup_stdio+0x3c>)
 80050da:	4299      	cmp	r1, r3
 80050dc:	d004      	beq.n	80050e8 <cleanup_stdio+0x30>
 80050de:	4620      	mov	r0, r4
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bf6a 	b.w	8004fbc <_fflush_r>
 80050e8:	bd10      	pop	{r4, pc}
 80050ea:	bf00      	nop
 80050ec:	20004268 	.word	0x20004268
 80050f0:	200042d0 	.word	0x200042d0
 80050f4:	20004338 	.word	0x20004338

080050f8 <global_stdio_init.part.0>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <global_stdio_init.part.0+0x30>)
 80050fc:	4c0b      	ldr	r4, [pc, #44]	@ (800512c <global_stdio_init.part.0+0x34>)
 80050fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005130 <global_stdio_init.part.0+0x38>)
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	4620      	mov	r0, r4
 8005104:	2200      	movs	r2, #0
 8005106:	2104      	movs	r1, #4
 8005108:	f7ff ff94 	bl	8005034 <std>
 800510c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005110:	2201      	movs	r2, #1
 8005112:	2109      	movs	r1, #9
 8005114:	f7ff ff8e 	bl	8005034 <std>
 8005118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800511c:	2202      	movs	r2, #2
 800511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005122:	2112      	movs	r1, #18
 8005124:	f7ff bf86 	b.w	8005034 <std>
 8005128:	200043a0 	.word	0x200043a0
 800512c:	20004268 	.word	0x20004268
 8005130:	080050a1 	.word	0x080050a1

08005134 <__sfp_lock_acquire>:
 8005134:	4801      	ldr	r0, [pc, #4]	@ (800513c <__sfp_lock_acquire+0x8>)
 8005136:	f000 b944 	b.w	80053c2 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	200043a9 	.word	0x200043a9

08005140 <__sfp_lock_release>:
 8005140:	4801      	ldr	r0, [pc, #4]	@ (8005148 <__sfp_lock_release+0x8>)
 8005142:	f000 b93f 	b.w	80053c4 <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	200043a9 	.word	0x200043a9

0800514c <__sinit>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	f7ff fff0 	bl	8005134 <__sfp_lock_acquire>
 8005154:	6a23      	ldr	r3, [r4, #32]
 8005156:	b11b      	cbz	r3, 8005160 <__sinit+0x14>
 8005158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515c:	f7ff bff0 	b.w	8005140 <__sfp_lock_release>
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <__sinit+0x28>)
 8005162:	6223      	str	r3, [r4, #32]
 8005164:	4b04      	ldr	r3, [pc, #16]	@ (8005178 <__sinit+0x2c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f5      	bne.n	8005158 <__sinit+0xc>
 800516c:	f7ff ffc4 	bl	80050f8 <global_stdio_init.part.0>
 8005170:	e7f2      	b.n	8005158 <__sinit+0xc>
 8005172:	bf00      	nop
 8005174:	080050b9 	.word	0x080050b9
 8005178:	200043a0 	.word	0x200043a0

0800517c <_fwalk_sglue>:
 800517c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005180:	4607      	mov	r7, r0
 8005182:	4688      	mov	r8, r1
 8005184:	4614      	mov	r4, r2
 8005186:	2600      	movs	r6, #0
 8005188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800518c:	f1b9 0901 	subs.w	r9, r9, #1
 8005190:	d505      	bpl.n	800519e <_fwalk_sglue+0x22>
 8005192:	6824      	ldr	r4, [r4, #0]
 8005194:	2c00      	cmp	r4, #0
 8005196:	d1f7      	bne.n	8005188 <_fwalk_sglue+0xc>
 8005198:	4630      	mov	r0, r6
 800519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d907      	bls.n	80051b4 <_fwalk_sglue+0x38>
 80051a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051a8:	3301      	adds	r3, #1
 80051aa:	d003      	beq.n	80051b4 <_fwalk_sglue+0x38>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4638      	mov	r0, r7
 80051b0:	47c0      	blx	r8
 80051b2:	4306      	orrs	r6, r0
 80051b4:	3568      	adds	r5, #104	@ 0x68
 80051b6:	e7e9      	b.n	800518c <_fwalk_sglue+0x10>

080051b8 <iprintf>:
 80051b8:	b40f      	push	{r0, r1, r2, r3}
 80051ba:	b507      	push	{r0, r1, r2, lr}
 80051bc:	4906      	ldr	r1, [pc, #24]	@ (80051d8 <iprintf+0x20>)
 80051be:	ab04      	add	r3, sp, #16
 80051c0:	6808      	ldr	r0, [r1, #0]
 80051c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c6:	6881      	ldr	r1, [r0, #8]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	f000 fb85 	bl	80058d8 <_vfiprintf_r>
 80051ce:	b003      	add	sp, #12
 80051d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d4:	b004      	add	sp, #16
 80051d6:	4770      	bx	lr
 80051d8:	20000050 	.word	0x20000050

080051dc <sniprintf>:
 80051dc:	b40c      	push	{r2, r3}
 80051de:	b530      	push	{r4, r5, lr}
 80051e0:	4b18      	ldr	r3, [pc, #96]	@ (8005244 <sniprintf+0x68>)
 80051e2:	1e0c      	subs	r4, r1, #0
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	b09d      	sub	sp, #116	@ 0x74
 80051e8:	da08      	bge.n	80051fc <sniprintf+0x20>
 80051ea:	238b      	movs	r3, #139	@ 0x8b
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	b01d      	add	sp, #116	@ 0x74
 80051f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f8:	b002      	add	sp, #8
 80051fa:	4770      	bx	lr
 80051fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	931b      	str	r3, [sp, #108]	@ 0x6c
 800520a:	bf14      	ite	ne
 800520c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005210:	4623      	moveq	r3, r4
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	9307      	str	r3, [sp, #28]
 8005216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800521a:	9002      	str	r0, [sp, #8]
 800521c:	9006      	str	r0, [sp, #24]
 800521e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005222:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005224:	ab21      	add	r3, sp, #132	@ 0x84
 8005226:	a902      	add	r1, sp, #8
 8005228:	4628      	mov	r0, r5
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	f000 fa2e 	bl	800568c <_svfiprintf_r>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	bfbc      	itt	lt
 8005234:	238b      	movlt	r3, #139	@ 0x8b
 8005236:	602b      	strlt	r3, [r5, #0]
 8005238:	2c00      	cmp	r4, #0
 800523a:	d0da      	beq.n	80051f2 <sniprintf+0x16>
 800523c:	9b02      	ldr	r3, [sp, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e7d6      	b.n	80051f2 <sniprintf+0x16>
 8005244:	20000050 	.word	0x20000050

08005248 <__sread>:
 8005248:	b510      	push	{r4, lr}
 800524a:	460c      	mov	r4, r1
 800524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005250:	f000 f868 	bl	8005324 <_read_r>
 8005254:	2800      	cmp	r0, #0
 8005256:	bfab      	itete	ge
 8005258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800525a:	89a3      	ldrhlt	r3, [r4, #12]
 800525c:	181b      	addge	r3, r3, r0
 800525e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005262:	bfac      	ite	ge
 8005264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005266:	81a3      	strhlt	r3, [r4, #12]
 8005268:	bd10      	pop	{r4, pc}

0800526a <__swrite>:
 800526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	461f      	mov	r7, r3
 8005270:	898b      	ldrh	r3, [r1, #12]
 8005272:	05db      	lsls	r3, r3, #23
 8005274:	4605      	mov	r5, r0
 8005276:	460c      	mov	r4, r1
 8005278:	4616      	mov	r6, r2
 800527a:	d505      	bpl.n	8005288 <__swrite+0x1e>
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	2302      	movs	r3, #2
 8005282:	2200      	movs	r2, #0
 8005284:	f000 f83c 	bl	8005300 <_lseek_r>
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	4632      	mov	r2, r6
 8005296:	463b      	mov	r3, r7
 8005298:	4628      	mov	r0, r5
 800529a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	f000 b853 	b.w	8005348 <_write_r>

080052a2 <__sseek>:
 80052a2:	b510      	push	{r4, lr}
 80052a4:	460c      	mov	r4, r1
 80052a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052aa:	f000 f829 	bl	8005300 <_lseek_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	bf15      	itete	ne
 80052b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052be:	81a3      	strheq	r3, [r4, #12]
 80052c0:	bf18      	it	ne
 80052c2:	81a3      	strhne	r3, [r4, #12]
 80052c4:	bd10      	pop	{r4, pc}

080052c6 <__sclose>:
 80052c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ca:	f000 b809 	b.w	80052e0 <_close_r>

080052ce <memset>:
 80052ce:	4402      	add	r2, r0
 80052d0:	4603      	mov	r3, r0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d100      	bne.n	80052d8 <memset+0xa>
 80052d6:	4770      	bx	lr
 80052d8:	f803 1b01 	strb.w	r1, [r3], #1
 80052dc:	e7f9      	b.n	80052d2 <memset+0x4>
	...

080052e0 <_close_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d06      	ldr	r5, [pc, #24]	@ (80052fc <_close_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7ff fc18 	bl	8004b20 <_close>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_close_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_close_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	200043a4 	.word	0x200043a4

08005300 <_lseek_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	@ (8005320 <_lseek_r+0x20>)
 8005304:	4604      	mov	r4, r0
 8005306:	4608      	mov	r0, r1
 8005308:	4611      	mov	r1, r2
 800530a:	2200      	movs	r2, #0
 800530c:	602a      	str	r2, [r5, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	f7ff fbc7 	bl	8004aa2 <_lseek>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_lseek_r+0x1e>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_lseek_r+0x1e>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	200043a4 	.word	0x200043a4

08005324 <_read_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d07      	ldr	r5, [pc, #28]	@ (8005344 <_read_r+0x20>)
 8005328:	4604      	mov	r4, r0
 800532a:	4608      	mov	r0, r1
 800532c:	4611      	mov	r1, r2
 800532e:	2200      	movs	r2, #0
 8005330:	602a      	str	r2, [r5, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	f7ff fb5f 	bl	80049f6 <_read>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_read_r+0x1e>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_read_r+0x1e>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200043a4 	.word	0x200043a4

08005348 <_write_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d07      	ldr	r5, [pc, #28]	@ (8005368 <_write_r+0x20>)
 800534c:	4604      	mov	r4, r0
 800534e:	4608      	mov	r0, r1
 8005350:	4611      	mov	r1, r2
 8005352:	2200      	movs	r2, #0
 8005354:	602a      	str	r2, [r5, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7ff fbb5 	bl	8004ac6 <_write>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_write_r+0x1e>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_write_r+0x1e>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	200043a4 	.word	0x200043a4

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	@ (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000050 	.word	0x20000050

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4d0d      	ldr	r5, [pc, #52]	@ (80053b0 <__libc_init_array+0x38>)
 800537c:	4c0d      	ldr	r4, [pc, #52]	@ (80053b4 <__libc_init_array+0x3c>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	2600      	movs	r6, #0
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	4d0b      	ldr	r5, [pc, #44]	@ (80053b8 <__libc_init_array+0x40>)
 800538a:	4c0c      	ldr	r4, [pc, #48]	@ (80053bc <__libc_init_array+0x44>)
 800538c:	f000 fec0 	bl	8006110 <_init>
 8005390:	1b64      	subs	r4, r4, r5
 8005392:	10a4      	asrs	r4, r4, #2
 8005394:	2600      	movs	r6, #0
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	08006494 	.word	0x08006494
 80053b4:	08006494 	.word	0x08006494
 80053b8:	08006494 	.word	0x08006494
 80053bc:	08006498 	.word	0x08006498

080053c0 <__retarget_lock_init_recursive>:
 80053c0:	4770      	bx	lr

080053c2 <__retarget_lock_acquire_recursive>:
 80053c2:	4770      	bx	lr

080053c4 <__retarget_lock_release_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <memcpy>:
 80053c6:	440a      	add	r2, r1
 80053c8:	4291      	cmp	r1, r2
 80053ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ce:	d100      	bne.n	80053d2 <memcpy+0xc>
 80053d0:	4770      	bx	lr
 80053d2:	b510      	push	{r4, lr}
 80053d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053dc:	4291      	cmp	r1, r2
 80053de:	d1f9      	bne.n	80053d4 <memcpy+0xe>
 80053e0:	bd10      	pop	{r4, pc}
	...

080053e4 <_free_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4605      	mov	r5, r0
 80053e8:	2900      	cmp	r1, #0
 80053ea:	d041      	beq.n	8005470 <_free_r+0x8c>
 80053ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f0:	1f0c      	subs	r4, r1, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bfb8      	it	lt
 80053f6:	18e4      	addlt	r4, r4, r3
 80053f8:	f000 f8e0 	bl	80055bc <__malloc_lock>
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <_free_r+0x90>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	b933      	cbnz	r3, 8005410 <_free_r+0x2c>
 8005402:	6063      	str	r3, [r4, #4]
 8005404:	6014      	str	r4, [r2, #0]
 8005406:	4628      	mov	r0, r5
 8005408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800540c:	f000 b8dc 	b.w	80055c8 <__malloc_unlock>
 8005410:	42a3      	cmp	r3, r4
 8005412:	d908      	bls.n	8005426 <_free_r+0x42>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	1821      	adds	r1, r4, r0
 8005418:	428b      	cmp	r3, r1
 800541a:	bf01      	itttt	eq
 800541c:	6819      	ldreq	r1, [r3, #0]
 800541e:	685b      	ldreq	r3, [r3, #4]
 8005420:	1809      	addeq	r1, r1, r0
 8005422:	6021      	streq	r1, [r4, #0]
 8005424:	e7ed      	b.n	8005402 <_free_r+0x1e>
 8005426:	461a      	mov	r2, r3
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	b10b      	cbz	r3, 8005430 <_free_r+0x4c>
 800542c:	42a3      	cmp	r3, r4
 800542e:	d9fa      	bls.n	8005426 <_free_r+0x42>
 8005430:	6811      	ldr	r1, [r2, #0]
 8005432:	1850      	adds	r0, r2, r1
 8005434:	42a0      	cmp	r0, r4
 8005436:	d10b      	bne.n	8005450 <_free_r+0x6c>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	4401      	add	r1, r0
 800543c:	1850      	adds	r0, r2, r1
 800543e:	4283      	cmp	r3, r0
 8005440:	6011      	str	r1, [r2, #0]
 8005442:	d1e0      	bne.n	8005406 <_free_r+0x22>
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	6053      	str	r3, [r2, #4]
 800544a:	4408      	add	r0, r1
 800544c:	6010      	str	r0, [r2, #0]
 800544e:	e7da      	b.n	8005406 <_free_r+0x22>
 8005450:	d902      	bls.n	8005458 <_free_r+0x74>
 8005452:	230c      	movs	r3, #12
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	e7d6      	b.n	8005406 <_free_r+0x22>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	1821      	adds	r1, r4, r0
 800545c:	428b      	cmp	r3, r1
 800545e:	bf04      	itt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	6063      	str	r3, [r4, #4]
 8005466:	bf04      	itt	eq
 8005468:	1809      	addeq	r1, r1, r0
 800546a:	6021      	streq	r1, [r4, #0]
 800546c:	6054      	str	r4, [r2, #4]
 800546e:	e7ca      	b.n	8005406 <_free_r+0x22>
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	200043b0 	.word	0x200043b0

08005478 <sbrk_aligned>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4e0f      	ldr	r6, [pc, #60]	@ (80054b8 <sbrk_aligned+0x40>)
 800547c:	460c      	mov	r4, r1
 800547e:	6831      	ldr	r1, [r6, #0]
 8005480:	4605      	mov	r5, r0
 8005482:	b911      	cbnz	r1, 800548a <sbrk_aligned+0x12>
 8005484:	f000 fd7a 	bl	8005f7c <_sbrk_r>
 8005488:	6030      	str	r0, [r6, #0]
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f000 fd75 	bl	8005f7c <_sbrk_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d103      	bne.n	800549e <sbrk_aligned+0x26>
 8005496:	f04f 34ff 	mov.w	r4, #4294967295
 800549a:	4620      	mov	r0, r4
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	1cc4      	adds	r4, r0, #3
 80054a0:	f024 0403 	bic.w	r4, r4, #3
 80054a4:	42a0      	cmp	r0, r4
 80054a6:	d0f8      	beq.n	800549a <sbrk_aligned+0x22>
 80054a8:	1a21      	subs	r1, r4, r0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 fd66 	bl	8005f7c <_sbrk_r>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1f2      	bne.n	800549a <sbrk_aligned+0x22>
 80054b4:	e7ef      	b.n	8005496 <sbrk_aligned+0x1e>
 80054b6:	bf00      	nop
 80054b8:	200043ac 	.word	0x200043ac

080054bc <_malloc_r>:
 80054bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c0:	1ccd      	adds	r5, r1, #3
 80054c2:	f025 0503 	bic.w	r5, r5, #3
 80054c6:	3508      	adds	r5, #8
 80054c8:	2d0c      	cmp	r5, #12
 80054ca:	bf38      	it	cc
 80054cc:	250c      	movcc	r5, #12
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	4606      	mov	r6, r0
 80054d2:	db01      	blt.n	80054d8 <_malloc_r+0x1c>
 80054d4:	42a9      	cmp	r1, r5
 80054d6:	d904      	bls.n	80054e2 <_malloc_r+0x26>
 80054d8:	230c      	movs	r3, #12
 80054da:	6033      	str	r3, [r6, #0]
 80054dc:	2000      	movs	r0, #0
 80054de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055b8 <_malloc_r+0xfc>
 80054e6:	f000 f869 	bl	80055bc <__malloc_lock>
 80054ea:	f8d8 3000 	ldr.w	r3, [r8]
 80054ee:	461c      	mov	r4, r3
 80054f0:	bb44      	cbnz	r4, 8005544 <_malloc_r+0x88>
 80054f2:	4629      	mov	r1, r5
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff ffbf 	bl	8005478 <sbrk_aligned>
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	4604      	mov	r4, r0
 80054fe:	d158      	bne.n	80055b2 <_malloc_r+0xf6>
 8005500:	f8d8 4000 	ldr.w	r4, [r8]
 8005504:	4627      	mov	r7, r4
 8005506:	2f00      	cmp	r7, #0
 8005508:	d143      	bne.n	8005592 <_malloc_r+0xd6>
 800550a:	2c00      	cmp	r4, #0
 800550c:	d04b      	beq.n	80055a6 <_malloc_r+0xea>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	4639      	mov	r1, r7
 8005512:	4630      	mov	r0, r6
 8005514:	eb04 0903 	add.w	r9, r4, r3
 8005518:	f000 fd30 	bl	8005f7c <_sbrk_r>
 800551c:	4581      	cmp	r9, r0
 800551e:	d142      	bne.n	80055a6 <_malloc_r+0xea>
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	1a6d      	subs	r5, r5, r1
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ffa6 	bl	8005478 <sbrk_aligned>
 800552c:	3001      	adds	r0, #1
 800552e:	d03a      	beq.n	80055a6 <_malloc_r+0xea>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	442b      	add	r3, r5
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	f8d8 3000 	ldr.w	r3, [r8]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	bb62      	cbnz	r2, 8005598 <_malloc_r+0xdc>
 800553e:	f8c8 7000 	str.w	r7, [r8]
 8005542:	e00f      	b.n	8005564 <_malloc_r+0xa8>
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	1b52      	subs	r2, r2, r5
 8005548:	d420      	bmi.n	800558c <_malloc_r+0xd0>
 800554a:	2a0b      	cmp	r2, #11
 800554c:	d917      	bls.n	800557e <_malloc_r+0xc2>
 800554e:	1961      	adds	r1, r4, r5
 8005550:	42a3      	cmp	r3, r4
 8005552:	6025      	str	r5, [r4, #0]
 8005554:	bf18      	it	ne
 8005556:	6059      	strne	r1, [r3, #4]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	bf08      	it	eq
 800555c:	f8c8 1000 	streq.w	r1, [r8]
 8005560:	5162      	str	r2, [r4, r5]
 8005562:	604b      	str	r3, [r1, #4]
 8005564:	4630      	mov	r0, r6
 8005566:	f000 f82f 	bl	80055c8 <__malloc_unlock>
 800556a:	f104 000b 	add.w	r0, r4, #11
 800556e:	1d23      	adds	r3, r4, #4
 8005570:	f020 0007 	bic.w	r0, r0, #7
 8005574:	1ac2      	subs	r2, r0, r3
 8005576:	bf1c      	itt	ne
 8005578:	1a1b      	subne	r3, r3, r0
 800557a:	50a3      	strne	r3, [r4, r2]
 800557c:	e7af      	b.n	80054de <_malloc_r+0x22>
 800557e:	6862      	ldr	r2, [r4, #4]
 8005580:	42a3      	cmp	r3, r4
 8005582:	bf0c      	ite	eq
 8005584:	f8c8 2000 	streq.w	r2, [r8]
 8005588:	605a      	strne	r2, [r3, #4]
 800558a:	e7eb      	b.n	8005564 <_malloc_r+0xa8>
 800558c:	4623      	mov	r3, r4
 800558e:	6864      	ldr	r4, [r4, #4]
 8005590:	e7ae      	b.n	80054f0 <_malloc_r+0x34>
 8005592:	463c      	mov	r4, r7
 8005594:	687f      	ldr	r7, [r7, #4]
 8005596:	e7b6      	b.n	8005506 <_malloc_r+0x4a>
 8005598:	461a      	mov	r2, r3
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	42a3      	cmp	r3, r4
 800559e:	d1fb      	bne.n	8005598 <_malloc_r+0xdc>
 80055a0:	2300      	movs	r3, #0
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	e7de      	b.n	8005564 <_malloc_r+0xa8>
 80055a6:	230c      	movs	r3, #12
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 f80c 	bl	80055c8 <__malloc_unlock>
 80055b0:	e794      	b.n	80054dc <_malloc_r+0x20>
 80055b2:	6005      	str	r5, [r0, #0]
 80055b4:	e7d6      	b.n	8005564 <_malloc_r+0xa8>
 80055b6:	bf00      	nop
 80055b8:	200043b0 	.word	0x200043b0

080055bc <__malloc_lock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	@ (80055c4 <__malloc_lock+0x8>)
 80055be:	f7ff bf00 	b.w	80053c2 <__retarget_lock_acquire_recursive>
 80055c2:	bf00      	nop
 80055c4:	200043a8 	.word	0x200043a8

080055c8 <__malloc_unlock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	@ (80055d0 <__malloc_unlock+0x8>)
 80055ca:	f7ff befb 	b.w	80053c4 <__retarget_lock_release_recursive>
 80055ce:	bf00      	nop
 80055d0:	200043a8 	.word	0x200043a8

080055d4 <__ssputs_r>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	688e      	ldr	r6, [r1, #8]
 80055da:	461f      	mov	r7, r3
 80055dc:	42be      	cmp	r6, r7
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	4682      	mov	sl, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4690      	mov	r8, r2
 80055e6:	d82d      	bhi.n	8005644 <__ssputs_r+0x70>
 80055e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055f0:	d026      	beq.n	8005640 <__ssputs_r+0x6c>
 80055f2:	6965      	ldr	r5, [r4, #20]
 80055f4:	6909      	ldr	r1, [r1, #16]
 80055f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055fa:	eba3 0901 	sub.w	r9, r3, r1
 80055fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005602:	1c7b      	adds	r3, r7, #1
 8005604:	444b      	add	r3, r9
 8005606:	106d      	asrs	r5, r5, #1
 8005608:	429d      	cmp	r5, r3
 800560a:	bf38      	it	cc
 800560c:	461d      	movcc	r5, r3
 800560e:	0553      	lsls	r3, r2, #21
 8005610:	d527      	bpl.n	8005662 <__ssputs_r+0x8e>
 8005612:	4629      	mov	r1, r5
 8005614:	f7ff ff52 	bl	80054bc <_malloc_r>
 8005618:	4606      	mov	r6, r0
 800561a:	b360      	cbz	r0, 8005676 <__ssputs_r+0xa2>
 800561c:	6921      	ldr	r1, [r4, #16]
 800561e:	464a      	mov	r2, r9
 8005620:	f7ff fed1 	bl	80053c6 <memcpy>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800562a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	6126      	str	r6, [r4, #16]
 8005632:	6165      	str	r5, [r4, #20]
 8005634:	444e      	add	r6, r9
 8005636:	eba5 0509 	sub.w	r5, r5, r9
 800563a:	6026      	str	r6, [r4, #0]
 800563c:	60a5      	str	r5, [r4, #8]
 800563e:	463e      	mov	r6, r7
 8005640:	42be      	cmp	r6, r7
 8005642:	d900      	bls.n	8005646 <__ssputs_r+0x72>
 8005644:	463e      	mov	r6, r7
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	4632      	mov	r2, r6
 800564a:	4641      	mov	r1, r8
 800564c:	f000 fc7c 	bl	8005f48 <memmove>
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	1b9b      	subs	r3, r3, r6
 8005654:	60a3      	str	r3, [r4, #8]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	4433      	add	r3, r6
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	462a      	mov	r2, r5
 8005664:	f000 fc9a 	bl	8005f9c <_realloc_r>
 8005668:	4606      	mov	r6, r0
 800566a:	2800      	cmp	r0, #0
 800566c:	d1e0      	bne.n	8005630 <__ssputs_r+0x5c>
 800566e:	6921      	ldr	r1, [r4, #16]
 8005670:	4650      	mov	r0, sl
 8005672:	f7ff feb7 	bl	80053e4 <_free_r>
 8005676:	230c      	movs	r3, #12
 8005678:	f8ca 3000 	str.w	r3, [sl]
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e7e9      	b.n	800565e <__ssputs_r+0x8a>
	...

0800568c <_svfiprintf_r>:
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	4698      	mov	r8, r3
 8005692:	898b      	ldrh	r3, [r1, #12]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	b09d      	sub	sp, #116	@ 0x74
 8005698:	4607      	mov	r7, r0
 800569a:	460d      	mov	r5, r1
 800569c:	4614      	mov	r4, r2
 800569e:	d510      	bpl.n	80056c2 <_svfiprintf_r+0x36>
 80056a0:	690b      	ldr	r3, [r1, #16]
 80056a2:	b973      	cbnz	r3, 80056c2 <_svfiprintf_r+0x36>
 80056a4:	2140      	movs	r1, #64	@ 0x40
 80056a6:	f7ff ff09 	bl	80054bc <_malloc_r>
 80056aa:	6028      	str	r0, [r5, #0]
 80056ac:	6128      	str	r0, [r5, #16]
 80056ae:	b930      	cbnz	r0, 80056be <_svfiprintf_r+0x32>
 80056b0:	230c      	movs	r3, #12
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	b01d      	add	sp, #116	@ 0x74
 80056ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056be:	2340      	movs	r3, #64	@ 0x40
 80056c0:	616b      	str	r3, [r5, #20]
 80056c2:	2300      	movs	r3, #0
 80056c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c6:	2320      	movs	r3, #32
 80056c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d0:	2330      	movs	r3, #48	@ 0x30
 80056d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005870 <_svfiprintf_r+0x1e4>
 80056d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056da:	f04f 0901 	mov.w	r9, #1
 80056de:	4623      	mov	r3, r4
 80056e0:	469a      	mov	sl, r3
 80056e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e6:	b10a      	cbz	r2, 80056ec <_svfiprintf_r+0x60>
 80056e8:	2a25      	cmp	r2, #37	@ 0x25
 80056ea:	d1f9      	bne.n	80056e0 <_svfiprintf_r+0x54>
 80056ec:	ebba 0b04 	subs.w	fp, sl, r4
 80056f0:	d00b      	beq.n	800570a <_svfiprintf_r+0x7e>
 80056f2:	465b      	mov	r3, fp
 80056f4:	4622      	mov	r2, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ff6b 	bl	80055d4 <__ssputs_r>
 80056fe:	3001      	adds	r0, #1
 8005700:	f000 80a7 	beq.w	8005852 <_svfiprintf_r+0x1c6>
 8005704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005706:	445a      	add	r2, fp
 8005708:	9209      	str	r2, [sp, #36]	@ 0x24
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 809f 	beq.w	8005852 <_svfiprintf_r+0x1c6>
 8005714:	2300      	movs	r3, #0
 8005716:	f04f 32ff 	mov.w	r2, #4294967295
 800571a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571e:	f10a 0a01 	add.w	sl, sl, #1
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	9307      	str	r3, [sp, #28]
 8005726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800572a:	931a      	str	r3, [sp, #104]	@ 0x68
 800572c:	4654      	mov	r4, sl
 800572e:	2205      	movs	r2, #5
 8005730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005734:	484e      	ldr	r0, [pc, #312]	@ (8005870 <_svfiprintf_r+0x1e4>)
 8005736:	f7fa fd73 	bl	8000220 <memchr>
 800573a:	9a04      	ldr	r2, [sp, #16]
 800573c:	b9d8      	cbnz	r0, 8005776 <_svfiprintf_r+0xea>
 800573e:	06d0      	lsls	r0, r2, #27
 8005740:	bf44      	itt	mi
 8005742:	2320      	movmi	r3, #32
 8005744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005748:	0711      	lsls	r1, r2, #28
 800574a:	bf44      	itt	mi
 800574c:	232b      	movmi	r3, #43	@ 0x2b
 800574e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005752:	f89a 3000 	ldrb.w	r3, [sl]
 8005756:	2b2a      	cmp	r3, #42	@ 0x2a
 8005758:	d015      	beq.n	8005786 <_svfiprintf_r+0xfa>
 800575a:	9a07      	ldr	r2, [sp, #28]
 800575c:	4654      	mov	r4, sl
 800575e:	2000      	movs	r0, #0
 8005760:	f04f 0c0a 	mov.w	ip, #10
 8005764:	4621      	mov	r1, r4
 8005766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576a:	3b30      	subs	r3, #48	@ 0x30
 800576c:	2b09      	cmp	r3, #9
 800576e:	d94b      	bls.n	8005808 <_svfiprintf_r+0x17c>
 8005770:	b1b0      	cbz	r0, 80057a0 <_svfiprintf_r+0x114>
 8005772:	9207      	str	r2, [sp, #28]
 8005774:	e014      	b.n	80057a0 <_svfiprintf_r+0x114>
 8005776:	eba0 0308 	sub.w	r3, r0, r8
 800577a:	fa09 f303 	lsl.w	r3, r9, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	46a2      	mov	sl, r4
 8005784:	e7d2      	b.n	800572c <_svfiprintf_r+0xa0>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9103      	str	r1, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfbb      	ittet	lt
 8005792:	425b      	neglt	r3, r3
 8005794:	f042 0202 	orrlt.w	r2, r2, #2
 8005798:	9307      	strge	r3, [sp, #28]
 800579a:	9307      	strlt	r3, [sp, #28]
 800579c:	bfb8      	it	lt
 800579e:	9204      	strlt	r2, [sp, #16]
 80057a0:	7823      	ldrb	r3, [r4, #0]
 80057a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057a4:	d10a      	bne.n	80057bc <_svfiprintf_r+0x130>
 80057a6:	7863      	ldrb	r3, [r4, #1]
 80057a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057aa:	d132      	bne.n	8005812 <_svfiprintf_r+0x186>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	9203      	str	r2, [sp, #12]
 80057b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057b8:	3402      	adds	r4, #2
 80057ba:	9305      	str	r3, [sp, #20]
 80057bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005880 <_svfiprintf_r+0x1f4>
 80057c0:	7821      	ldrb	r1, [r4, #0]
 80057c2:	2203      	movs	r2, #3
 80057c4:	4650      	mov	r0, sl
 80057c6:	f7fa fd2b 	bl	8000220 <memchr>
 80057ca:	b138      	cbz	r0, 80057dc <_svfiprintf_r+0x150>
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	eba0 000a 	sub.w	r0, r0, sl
 80057d2:	2240      	movs	r2, #64	@ 0x40
 80057d4:	4082      	lsls	r2, r0
 80057d6:	4313      	orrs	r3, r2
 80057d8:	3401      	adds	r4, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e0:	4824      	ldr	r0, [pc, #144]	@ (8005874 <_svfiprintf_r+0x1e8>)
 80057e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e6:	2206      	movs	r2, #6
 80057e8:	f7fa fd1a 	bl	8000220 <memchr>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d036      	beq.n	800585e <_svfiprintf_r+0x1d2>
 80057f0:	4b21      	ldr	r3, [pc, #132]	@ (8005878 <_svfiprintf_r+0x1ec>)
 80057f2:	bb1b      	cbnz	r3, 800583c <_svfiprintf_r+0x1b0>
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	3307      	adds	r3, #7
 80057f8:	f023 0307 	bic.w	r3, r3, #7
 80057fc:	3308      	adds	r3, #8
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005802:	4433      	add	r3, r6
 8005804:	9309      	str	r3, [sp, #36]	@ 0x24
 8005806:	e76a      	b.n	80056de <_svfiprintf_r+0x52>
 8005808:	fb0c 3202 	mla	r2, ip, r2, r3
 800580c:	460c      	mov	r4, r1
 800580e:	2001      	movs	r0, #1
 8005810:	e7a8      	b.n	8005764 <_svfiprintf_r+0xd8>
 8005812:	2300      	movs	r3, #0
 8005814:	3401      	adds	r4, #1
 8005816:	9305      	str	r3, [sp, #20]
 8005818:	4619      	mov	r1, r3
 800581a:	f04f 0c0a 	mov.w	ip, #10
 800581e:	4620      	mov	r0, r4
 8005820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005824:	3a30      	subs	r2, #48	@ 0x30
 8005826:	2a09      	cmp	r2, #9
 8005828:	d903      	bls.n	8005832 <_svfiprintf_r+0x1a6>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0c6      	beq.n	80057bc <_svfiprintf_r+0x130>
 800582e:	9105      	str	r1, [sp, #20]
 8005830:	e7c4      	b.n	80057bc <_svfiprintf_r+0x130>
 8005832:	fb0c 2101 	mla	r1, ip, r1, r2
 8005836:	4604      	mov	r4, r0
 8005838:	2301      	movs	r3, #1
 800583a:	e7f0      	b.n	800581e <_svfiprintf_r+0x192>
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	462a      	mov	r2, r5
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <_svfiprintf_r+0x1f0>)
 8005844:	a904      	add	r1, sp, #16
 8005846:	4638      	mov	r0, r7
 8005848:	f3af 8000 	nop.w
 800584c:	1c42      	adds	r2, r0, #1
 800584e:	4606      	mov	r6, r0
 8005850:	d1d6      	bne.n	8005800 <_svfiprintf_r+0x174>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	065b      	lsls	r3, r3, #25
 8005856:	f53f af2d 	bmi.w	80056b4 <_svfiprintf_r+0x28>
 800585a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800585c:	e72c      	b.n	80056b8 <_svfiprintf_r+0x2c>
 800585e:	ab03      	add	r3, sp, #12
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	462a      	mov	r2, r5
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <_svfiprintf_r+0x1f0>)
 8005866:	a904      	add	r1, sp, #16
 8005868:	4638      	mov	r0, r7
 800586a:	f000 f9bb 	bl	8005be4 <_printf_i>
 800586e:	e7ed      	b.n	800584c <_svfiprintf_r+0x1c0>
 8005870:	08006456 	.word	0x08006456
 8005874:	08006460 	.word	0x08006460
 8005878:	00000000 	.word	0x00000000
 800587c:	080055d5 	.word	0x080055d5
 8005880:	0800645c 	.word	0x0800645c

08005884 <__sfputc_r>:
 8005884:	6893      	ldr	r3, [r2, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	b410      	push	{r4}
 800588c:	6093      	str	r3, [r2, #8]
 800588e:	da08      	bge.n	80058a2 <__sfputc_r+0x1e>
 8005890:	6994      	ldr	r4, [r2, #24]
 8005892:	42a3      	cmp	r3, r4
 8005894:	db01      	blt.n	800589a <__sfputc_r+0x16>
 8005896:	290a      	cmp	r1, #10
 8005898:	d103      	bne.n	80058a2 <__sfputc_r+0x1e>
 800589a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589e:	f000 babf 	b.w	8005e20 <__swbuf_r>
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	1c58      	adds	r0, r3, #1
 80058a6:	6010      	str	r0, [r2, #0]
 80058a8:	7019      	strb	r1, [r3, #0]
 80058aa:	4608      	mov	r0, r1
 80058ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <__sfputs_r>:
 80058b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	18d5      	adds	r5, r2, r3
 80058bc:	42ac      	cmp	r4, r5
 80058be:	d101      	bne.n	80058c4 <__sfputs_r+0x12>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e007      	b.n	80058d4 <__sfputs_r+0x22>
 80058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c8:	463a      	mov	r2, r7
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff ffda 	bl	8005884 <__sfputc_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d1f3      	bne.n	80058bc <__sfputs_r+0xa>
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d8 <_vfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	460d      	mov	r5, r1
 80058de:	b09d      	sub	sp, #116	@ 0x74
 80058e0:	4614      	mov	r4, r2
 80058e2:	4698      	mov	r8, r3
 80058e4:	4606      	mov	r6, r0
 80058e6:	b118      	cbz	r0, 80058f0 <_vfiprintf_r+0x18>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <_vfiprintf_r+0x18>
 80058ec:	f7ff fc2e 	bl	800514c <__sinit>
 80058f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	059a      	lsls	r2, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058fe:	f7ff fd60 	bl	80053c2 <__retarget_lock_acquire_recursive>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	d501      	bpl.n	800590c <_vfiprintf_r+0x34>
 8005908:	692b      	ldr	r3, [r5, #16]
 800590a:	b99b      	cbnz	r3, 8005934 <_vfiprintf_r+0x5c>
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f000 fac4 	bl	8005e9c <__swsetup_r>
 8005914:	b170      	cbz	r0, 8005934 <_vfiprintf_r+0x5c>
 8005916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005918:	07dc      	lsls	r4, r3, #31
 800591a:	d504      	bpl.n	8005926 <_vfiprintf_r+0x4e>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	b01d      	add	sp, #116	@ 0x74
 8005922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	0598      	lsls	r0, r3, #22
 800592a:	d4f7      	bmi.n	800591c <_vfiprintf_r+0x44>
 800592c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800592e:	f7ff fd49 	bl	80053c4 <__retarget_lock_release_recursive>
 8005932:	e7f3      	b.n	800591c <_vfiprintf_r+0x44>
 8005934:	2300      	movs	r3, #0
 8005936:	9309      	str	r3, [sp, #36]	@ 0x24
 8005938:	2320      	movs	r3, #32
 800593a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800593e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005942:	2330      	movs	r3, #48	@ 0x30
 8005944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005af4 <_vfiprintf_r+0x21c>
 8005948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800594c:	f04f 0901 	mov.w	r9, #1
 8005950:	4623      	mov	r3, r4
 8005952:	469a      	mov	sl, r3
 8005954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005958:	b10a      	cbz	r2, 800595e <_vfiprintf_r+0x86>
 800595a:	2a25      	cmp	r2, #37	@ 0x25
 800595c:	d1f9      	bne.n	8005952 <_vfiprintf_r+0x7a>
 800595e:	ebba 0b04 	subs.w	fp, sl, r4
 8005962:	d00b      	beq.n	800597c <_vfiprintf_r+0xa4>
 8005964:	465b      	mov	r3, fp
 8005966:	4622      	mov	r2, r4
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f7ff ffa1 	bl	80058b2 <__sfputs_r>
 8005970:	3001      	adds	r0, #1
 8005972:	f000 80a7 	beq.w	8005ac4 <_vfiprintf_r+0x1ec>
 8005976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005978:	445a      	add	r2, fp
 800597a:	9209      	str	r2, [sp, #36]	@ 0x24
 800597c:	f89a 3000 	ldrb.w	r3, [sl]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 809f 	beq.w	8005ac4 <_vfiprintf_r+0x1ec>
 8005986:	2300      	movs	r3, #0
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005990:	f10a 0a01 	add.w	sl, sl, #1
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800599c:	931a      	str	r3, [sp, #104]	@ 0x68
 800599e:	4654      	mov	r4, sl
 80059a0:	2205      	movs	r2, #5
 80059a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a6:	4853      	ldr	r0, [pc, #332]	@ (8005af4 <_vfiprintf_r+0x21c>)
 80059a8:	f7fa fc3a 	bl	8000220 <memchr>
 80059ac:	9a04      	ldr	r2, [sp, #16]
 80059ae:	b9d8      	cbnz	r0, 80059e8 <_vfiprintf_r+0x110>
 80059b0:	06d1      	lsls	r1, r2, #27
 80059b2:	bf44      	itt	mi
 80059b4:	2320      	movmi	r3, #32
 80059b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ba:	0713      	lsls	r3, r2, #28
 80059bc:	bf44      	itt	mi
 80059be:	232b      	movmi	r3, #43	@ 0x2b
 80059c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059c4:	f89a 3000 	ldrb.w	r3, [sl]
 80059c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ca:	d015      	beq.n	80059f8 <_vfiprintf_r+0x120>
 80059cc:	9a07      	ldr	r2, [sp, #28]
 80059ce:	4654      	mov	r4, sl
 80059d0:	2000      	movs	r0, #0
 80059d2:	f04f 0c0a 	mov.w	ip, #10
 80059d6:	4621      	mov	r1, r4
 80059d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059dc:	3b30      	subs	r3, #48	@ 0x30
 80059de:	2b09      	cmp	r3, #9
 80059e0:	d94b      	bls.n	8005a7a <_vfiprintf_r+0x1a2>
 80059e2:	b1b0      	cbz	r0, 8005a12 <_vfiprintf_r+0x13a>
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	e014      	b.n	8005a12 <_vfiprintf_r+0x13a>
 80059e8:	eba0 0308 	sub.w	r3, r0, r8
 80059ec:	fa09 f303 	lsl.w	r3, r9, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	46a2      	mov	sl, r4
 80059f6:	e7d2      	b.n	800599e <_vfiprintf_r+0xc6>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	1d19      	adds	r1, r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	9103      	str	r1, [sp, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bfbb      	ittet	lt
 8005a04:	425b      	neglt	r3, r3
 8005a06:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0a:	9307      	strge	r3, [sp, #28]
 8005a0c:	9307      	strlt	r3, [sp, #28]
 8005a0e:	bfb8      	it	lt
 8005a10:	9204      	strlt	r2, [sp, #16]
 8005a12:	7823      	ldrb	r3, [r4, #0]
 8005a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a16:	d10a      	bne.n	8005a2e <_vfiprintf_r+0x156>
 8005a18:	7863      	ldrb	r3, [r4, #1]
 8005a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a1c:	d132      	bne.n	8005a84 <_vfiprintf_r+0x1ac>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	9203      	str	r2, [sp, #12]
 8005a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a2a:	3402      	adds	r4, #2
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b04 <_vfiprintf_r+0x22c>
 8005a32:	7821      	ldrb	r1, [r4, #0]
 8005a34:	2203      	movs	r2, #3
 8005a36:	4650      	mov	r0, sl
 8005a38:	f7fa fbf2 	bl	8000220 <memchr>
 8005a3c:	b138      	cbz	r0, 8005a4e <_vfiprintf_r+0x176>
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	eba0 000a 	sub.w	r0, r0, sl
 8005a44:	2240      	movs	r2, #64	@ 0x40
 8005a46:	4082      	lsls	r2, r0
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	3401      	adds	r4, #1
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a52:	4829      	ldr	r0, [pc, #164]	@ (8005af8 <_vfiprintf_r+0x220>)
 8005a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a58:	2206      	movs	r2, #6
 8005a5a:	f7fa fbe1 	bl	8000220 <memchr>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d03f      	beq.n	8005ae2 <_vfiprintf_r+0x20a>
 8005a62:	4b26      	ldr	r3, [pc, #152]	@ (8005afc <_vfiprintf_r+0x224>)
 8005a64:	bb1b      	cbnz	r3, 8005aae <_vfiprintf_r+0x1d6>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	3307      	adds	r3, #7
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	3308      	adds	r3, #8
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a74:	443b      	add	r3, r7
 8005a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a78:	e76a      	b.n	8005950 <_vfiprintf_r+0x78>
 8005a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2001      	movs	r0, #1
 8005a82:	e7a8      	b.n	80059d6 <_vfiprintf_r+0xfe>
 8005a84:	2300      	movs	r3, #0
 8005a86:	3401      	adds	r4, #1
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f04f 0c0a 	mov.w	ip, #10
 8005a90:	4620      	mov	r0, r4
 8005a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a96:	3a30      	subs	r2, #48	@ 0x30
 8005a98:	2a09      	cmp	r2, #9
 8005a9a:	d903      	bls.n	8005aa4 <_vfiprintf_r+0x1cc>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0c6      	beq.n	8005a2e <_vfiprintf_r+0x156>
 8005aa0:	9105      	str	r1, [sp, #20]
 8005aa2:	e7c4      	b.n	8005a2e <_vfiprintf_r+0x156>
 8005aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7f0      	b.n	8005a90 <_vfiprintf_r+0x1b8>
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4b12      	ldr	r3, [pc, #72]	@ (8005b00 <_vfiprintf_r+0x228>)
 8005ab6:	a904      	add	r1, sp, #16
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f3af 8000 	nop.w
 8005abe:	4607      	mov	r7, r0
 8005ac0:	1c78      	adds	r0, r7, #1
 8005ac2:	d1d6      	bne.n	8005a72 <_vfiprintf_r+0x19a>
 8005ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	d405      	bmi.n	8005ad6 <_vfiprintf_r+0x1fe>
 8005aca:	89ab      	ldrh	r3, [r5, #12]
 8005acc:	059a      	lsls	r2, r3, #22
 8005ace:	d402      	bmi.n	8005ad6 <_vfiprintf_r+0x1fe>
 8005ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ad2:	f7ff fc77 	bl	80053c4 <__retarget_lock_release_recursive>
 8005ad6:	89ab      	ldrh	r3, [r5, #12]
 8005ad8:	065b      	lsls	r3, r3, #25
 8005ada:	f53f af1f 	bmi.w	800591c <_vfiprintf_r+0x44>
 8005ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ae0:	e71e      	b.n	8005920 <_vfiprintf_r+0x48>
 8005ae2:	ab03      	add	r3, sp, #12
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <_vfiprintf_r+0x228>)
 8005aea:	a904      	add	r1, sp, #16
 8005aec:	4630      	mov	r0, r6
 8005aee:	f000 f879 	bl	8005be4 <_printf_i>
 8005af2:	e7e4      	b.n	8005abe <_vfiprintf_r+0x1e6>
 8005af4:	08006456 	.word	0x08006456
 8005af8:	08006460 	.word	0x08006460
 8005afc:	00000000 	.word	0x00000000
 8005b00:	080058b3 	.word	0x080058b3
 8005b04:	0800645c 	.word	0x0800645c

08005b08 <_printf_common>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	4698      	mov	r8, r3
 8005b10:	688a      	ldr	r2, [r1, #8]
 8005b12:	690b      	ldr	r3, [r1, #16]
 8005b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bfb8      	it	lt
 8005b1c:	4613      	movlt	r3, r2
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b24:	4607      	mov	r7, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	b10a      	cbz	r2, 8005b2e <_printf_common+0x26>
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	0699      	lsls	r1, r3, #26
 8005b32:	bf42      	ittt	mi
 8005b34:	6833      	ldrmi	r3, [r6, #0]
 8005b36:	3302      	addmi	r3, #2
 8005b38:	6033      	strmi	r3, [r6, #0]
 8005b3a:	6825      	ldr	r5, [r4, #0]
 8005b3c:	f015 0506 	ands.w	r5, r5, #6
 8005b40:	d106      	bne.n	8005b50 <_printf_common+0x48>
 8005b42:	f104 0a19 	add.w	sl, r4, #25
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	6832      	ldr	r2, [r6, #0]
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc26      	bgt.n	8005b9e <_printf_common+0x96>
 8005b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	3b00      	subs	r3, #0
 8005b58:	bf18      	it	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	0692      	lsls	r2, r2, #26
 8005b5e:	d42b      	bmi.n	8005bb8 <_printf_common+0xb0>
 8005b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b64:	4641      	mov	r1, r8
 8005b66:	4638      	mov	r0, r7
 8005b68:	47c8      	blx	r9
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d01e      	beq.n	8005bac <_printf_common+0xa4>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	6922      	ldr	r2, [r4, #16]
 8005b72:	f003 0306 	and.w	r3, r3, #6
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	bf02      	ittt	eq
 8005b7a:	68e5      	ldreq	r5, [r4, #12]
 8005b7c:	6833      	ldreq	r3, [r6, #0]
 8005b7e:	1aed      	subeq	r5, r5, r3
 8005b80:	68a3      	ldr	r3, [r4, #8]
 8005b82:	bf0c      	ite	eq
 8005b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b88:	2500      	movne	r5, #0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bfc4      	itt	gt
 8005b8e:	1a9b      	subgt	r3, r3, r2
 8005b90:	18ed      	addgt	r5, r5, r3
 8005b92:	2600      	movs	r6, #0
 8005b94:	341a      	adds	r4, #26
 8005b96:	42b5      	cmp	r5, r6
 8005b98:	d11a      	bne.n	8005bd0 <_printf_common+0xc8>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e008      	b.n	8005bb0 <_printf_common+0xa8>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4652      	mov	r2, sl
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	47c8      	blx	r9
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d103      	bne.n	8005bb4 <_printf_common+0xac>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	e7c6      	b.n	8005b46 <_printf_common+0x3e>
 8005bb8:	18e1      	adds	r1, r4, r3
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	2030      	movs	r0, #48	@ 0x30
 8005bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bc2:	4422      	add	r2, r4
 8005bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bcc:	3302      	adds	r3, #2
 8005bce:	e7c7      	b.n	8005b60 <_printf_common+0x58>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	47c8      	blx	r9
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d0e6      	beq.n	8005bac <_printf_common+0xa4>
 8005bde:	3601      	adds	r6, #1
 8005be0:	e7d9      	b.n	8005b96 <_printf_common+0x8e>
	...

08005be4 <_printf_i>:
 8005be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	7e0f      	ldrb	r7, [r1, #24]
 8005bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bec:	2f78      	cmp	r7, #120	@ 0x78
 8005bee:	4691      	mov	r9, r2
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	469a      	mov	sl, r3
 8005bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bfa:	d807      	bhi.n	8005c0c <_printf_i+0x28>
 8005bfc:	2f62      	cmp	r7, #98	@ 0x62
 8005bfe:	d80a      	bhi.n	8005c16 <_printf_i+0x32>
 8005c00:	2f00      	cmp	r7, #0
 8005c02:	f000 80d1 	beq.w	8005da8 <_printf_i+0x1c4>
 8005c06:	2f58      	cmp	r7, #88	@ 0x58
 8005c08:	f000 80b8 	beq.w	8005d7c <_printf_i+0x198>
 8005c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c14:	e03a      	b.n	8005c8c <_printf_i+0xa8>
 8005c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c1a:	2b15      	cmp	r3, #21
 8005c1c:	d8f6      	bhi.n	8005c0c <_printf_i+0x28>
 8005c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c24 <_printf_i+0x40>)
 8005c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005c0d 	.word	0x08005c0d
 8005c30:	08005c0d 	.word	0x08005c0d
 8005c34:	08005c0d 	.word	0x08005c0d
 8005c38:	08005c0d 	.word	0x08005c0d
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005c0d 	.word	0x08005c0d
 8005c44:	08005c0d 	.word	0x08005c0d
 8005c48:	08005c0d 	.word	0x08005c0d
 8005c4c:	08005c0d 	.word	0x08005c0d
 8005c50:	08005d8f 	.word	0x08005d8f
 8005c54:	08005cbb 	.word	0x08005cbb
 8005c58:	08005d49 	.word	0x08005d49
 8005c5c:	08005c0d 	.word	0x08005c0d
 8005c60:	08005c0d 	.word	0x08005c0d
 8005c64:	08005db1 	.word	0x08005db1
 8005c68:	08005c0d 	.word	0x08005c0d
 8005c6c:	08005cbb 	.word	0x08005cbb
 8005c70:	08005c0d 	.word	0x08005c0d
 8005c74:	08005c0d 	.word	0x08005c0d
 8005c78:	08005d51 	.word	0x08005d51
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	1d1a      	adds	r2, r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6032      	str	r2, [r6, #0]
 8005c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e09c      	b.n	8005dca <_printf_i+0x1e6>
 8005c90:	6833      	ldr	r3, [r6, #0]
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	1d19      	adds	r1, r3, #4
 8005c96:	6031      	str	r1, [r6, #0]
 8005c98:	0606      	lsls	r6, r0, #24
 8005c9a:	d501      	bpl.n	8005ca0 <_printf_i+0xbc>
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	e003      	b.n	8005ca8 <_printf_i+0xc4>
 8005ca0:	0645      	lsls	r5, r0, #25
 8005ca2:	d5fb      	bpl.n	8005c9c <_printf_i+0xb8>
 8005ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	da03      	bge.n	8005cb4 <_printf_i+0xd0>
 8005cac:	232d      	movs	r3, #45	@ 0x2d
 8005cae:	426d      	negs	r5, r5
 8005cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb4:	4858      	ldr	r0, [pc, #352]	@ (8005e18 <_printf_i+0x234>)
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	e011      	b.n	8005cde <_printf_i+0xfa>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	6833      	ldr	r3, [r6, #0]
 8005cbe:	0608      	lsls	r0, r1, #24
 8005cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cc4:	d402      	bmi.n	8005ccc <_printf_i+0xe8>
 8005cc6:	0649      	lsls	r1, r1, #25
 8005cc8:	bf48      	it	mi
 8005cca:	b2ad      	uxthmi	r5, r5
 8005ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cce:	4852      	ldr	r0, [pc, #328]	@ (8005e18 <_printf_i+0x234>)
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	bf14      	ite	ne
 8005cd4:	230a      	movne	r3, #10
 8005cd6:	2308      	moveq	r3, #8
 8005cd8:	2100      	movs	r1, #0
 8005cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cde:	6866      	ldr	r6, [r4, #4]
 8005ce0:	60a6      	str	r6, [r4, #8]
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	db05      	blt.n	8005cf2 <_printf_i+0x10e>
 8005ce6:	6821      	ldr	r1, [r4, #0]
 8005ce8:	432e      	orrs	r6, r5
 8005cea:	f021 0104 	bic.w	r1, r1, #4
 8005cee:	6021      	str	r1, [r4, #0]
 8005cf0:	d04b      	beq.n	8005d8a <_printf_i+0x1a6>
 8005cf2:	4616      	mov	r6, r2
 8005cf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cf8:	fb03 5711 	mls	r7, r3, r1, r5
 8005cfc:	5dc7      	ldrb	r7, [r0, r7]
 8005cfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d02:	462f      	mov	r7, r5
 8005d04:	42bb      	cmp	r3, r7
 8005d06:	460d      	mov	r5, r1
 8005d08:	d9f4      	bls.n	8005cf4 <_printf_i+0x110>
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d10b      	bne.n	8005d26 <_printf_i+0x142>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	07df      	lsls	r7, r3, #31
 8005d12:	d508      	bpl.n	8005d26 <_printf_i+0x142>
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	6861      	ldr	r1, [r4, #4]
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	bfde      	ittt	le
 8005d1c:	2330      	movle	r3, #48	@ 0x30
 8005d1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d26:	1b92      	subs	r2, r2, r6
 8005d28:	6122      	str	r2, [r4, #16]
 8005d2a:	f8cd a000 	str.w	sl, [sp]
 8005d2e:	464b      	mov	r3, r9
 8005d30:	aa03      	add	r2, sp, #12
 8005d32:	4621      	mov	r1, r4
 8005d34:	4640      	mov	r0, r8
 8005d36:	f7ff fee7 	bl	8005b08 <_printf_common>
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d14a      	bne.n	8005dd4 <_printf_i+0x1f0>
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	b004      	add	sp, #16
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	f043 0320 	orr.w	r3, r3, #32
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	4832      	ldr	r0, [pc, #200]	@ (8005e1c <_printf_i+0x238>)
 8005d52:	2778      	movs	r7, #120	@ 0x78
 8005d54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	6831      	ldr	r1, [r6, #0]
 8005d5c:	061f      	lsls	r7, r3, #24
 8005d5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d62:	d402      	bmi.n	8005d6a <_printf_i+0x186>
 8005d64:	065f      	lsls	r7, r3, #25
 8005d66:	bf48      	it	mi
 8005d68:	b2ad      	uxthmi	r5, r5
 8005d6a:	6031      	str	r1, [r6, #0]
 8005d6c:	07d9      	lsls	r1, r3, #31
 8005d6e:	bf44      	itt	mi
 8005d70:	f043 0320 	orrmi.w	r3, r3, #32
 8005d74:	6023      	strmi	r3, [r4, #0]
 8005d76:	b11d      	cbz	r5, 8005d80 <_printf_i+0x19c>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	e7ad      	b.n	8005cd8 <_printf_i+0xf4>
 8005d7c:	4826      	ldr	r0, [pc, #152]	@ (8005e18 <_printf_i+0x234>)
 8005d7e:	e7e9      	b.n	8005d54 <_printf_i+0x170>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	f023 0320 	bic.w	r3, r3, #32
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	e7f6      	b.n	8005d78 <_printf_i+0x194>
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	e7bd      	b.n	8005d0a <_printf_i+0x126>
 8005d8e:	6833      	ldr	r3, [r6, #0]
 8005d90:	6825      	ldr	r5, [r4, #0]
 8005d92:	6961      	ldr	r1, [r4, #20]
 8005d94:	1d18      	adds	r0, r3, #4
 8005d96:	6030      	str	r0, [r6, #0]
 8005d98:	062e      	lsls	r6, r5, #24
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	d501      	bpl.n	8005da2 <_printf_i+0x1be>
 8005d9e:	6019      	str	r1, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <_printf_i+0x1c4>
 8005da2:	0668      	lsls	r0, r5, #25
 8005da4:	d5fb      	bpl.n	8005d9e <_printf_i+0x1ba>
 8005da6:	8019      	strh	r1, [r3, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	4616      	mov	r6, r2
 8005dae:	e7bc      	b.n	8005d2a <_printf_i+0x146>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	6032      	str	r2, [r6, #0]
 8005db6:	681e      	ldr	r6, [r3, #0]
 8005db8:	6862      	ldr	r2, [r4, #4]
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7fa fa2f 	bl	8000220 <memchr>
 8005dc2:	b108      	cbz	r0, 8005dc8 <_printf_i+0x1e4>
 8005dc4:	1b80      	subs	r0, r0, r6
 8005dc6:	6060      	str	r0, [r4, #4]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd2:	e7aa      	b.n	8005d2a <_printf_i+0x146>
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4640      	mov	r0, r8
 8005ddc:	47d0      	blx	sl
 8005dde:	3001      	adds	r0, #1
 8005de0:	d0ad      	beq.n	8005d3e <_printf_i+0x15a>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	079b      	lsls	r3, r3, #30
 8005de6:	d413      	bmi.n	8005e10 <_printf_i+0x22c>
 8005de8:	68e0      	ldr	r0, [r4, #12]
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	4298      	cmp	r0, r3
 8005dee:	bfb8      	it	lt
 8005df0:	4618      	movlt	r0, r3
 8005df2:	e7a6      	b.n	8005d42 <_printf_i+0x15e>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4632      	mov	r2, r6
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	47d0      	blx	sl
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d09d      	beq.n	8005d3e <_printf_i+0x15a>
 8005e02:	3501      	adds	r5, #1
 8005e04:	68e3      	ldr	r3, [r4, #12]
 8005e06:	9903      	ldr	r1, [sp, #12]
 8005e08:	1a5b      	subs	r3, r3, r1
 8005e0a:	42ab      	cmp	r3, r5
 8005e0c:	dcf2      	bgt.n	8005df4 <_printf_i+0x210>
 8005e0e:	e7eb      	b.n	8005de8 <_printf_i+0x204>
 8005e10:	2500      	movs	r5, #0
 8005e12:	f104 0619 	add.w	r6, r4, #25
 8005e16:	e7f5      	b.n	8005e04 <_printf_i+0x220>
 8005e18:	08006467 	.word	0x08006467
 8005e1c:	08006478 	.word	0x08006478

08005e20 <__swbuf_r>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	460e      	mov	r6, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	4605      	mov	r5, r0
 8005e28:	b118      	cbz	r0, 8005e32 <__swbuf_r+0x12>
 8005e2a:	6a03      	ldr	r3, [r0, #32]
 8005e2c:	b90b      	cbnz	r3, 8005e32 <__swbuf_r+0x12>
 8005e2e:	f7ff f98d 	bl	800514c <__sinit>
 8005e32:	69a3      	ldr	r3, [r4, #24]
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	071a      	lsls	r2, r3, #28
 8005e3a:	d501      	bpl.n	8005e40 <__swbuf_r+0x20>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	b943      	cbnz	r3, 8005e52 <__swbuf_r+0x32>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 f82a 	bl	8005e9c <__swsetup_r>
 8005e48:	b118      	cbz	r0, 8005e52 <__swbuf_r+0x32>
 8005e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e4e:	4638      	mov	r0, r7
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	1a98      	subs	r0, r3, r2
 8005e58:	6963      	ldr	r3, [r4, #20]
 8005e5a:	b2f6      	uxtb	r6, r6
 8005e5c:	4283      	cmp	r3, r0
 8005e5e:	4637      	mov	r7, r6
 8005e60:	dc05      	bgt.n	8005e6e <__swbuf_r+0x4e>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7ff f8a9 	bl	8004fbc <_fflush_r>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1ed      	bne.n	8005e4a <__swbuf_r+0x2a>
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	701e      	strb	r6, [r3, #0]
 8005e7c:	6962      	ldr	r2, [r4, #20]
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d004      	beq.n	8005e8e <__swbuf_r+0x6e>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	07db      	lsls	r3, r3, #31
 8005e88:	d5e1      	bpl.n	8005e4e <__swbuf_r+0x2e>
 8005e8a:	2e0a      	cmp	r6, #10
 8005e8c:	d1df      	bne.n	8005e4e <__swbuf_r+0x2e>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff f893 	bl	8004fbc <_fflush_r>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0d9      	beq.n	8005e4e <__swbuf_r+0x2e>
 8005e9a:	e7d6      	b.n	8005e4a <__swbuf_r+0x2a>

08005e9c <__swsetup_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <__swsetup_r+0xa8>)
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	b118      	cbz	r0, 8005eb0 <__swsetup_r+0x14>
 8005ea8:	6a03      	ldr	r3, [r0, #32]
 8005eaa:	b90b      	cbnz	r3, 8005eb0 <__swsetup_r+0x14>
 8005eac:	f7ff f94e 	bl	800514c <__sinit>
 8005eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb4:	0719      	lsls	r1, r3, #28
 8005eb6:	d422      	bmi.n	8005efe <__swsetup_r+0x62>
 8005eb8:	06da      	lsls	r2, r3, #27
 8005eba:	d407      	bmi.n	8005ecc <__swsetup_r+0x30>
 8005ebc:	2209      	movs	r2, #9
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	e033      	b.n	8005f34 <__swsetup_r+0x98>
 8005ecc:	0758      	lsls	r0, r3, #29
 8005ece:	d512      	bpl.n	8005ef6 <__swsetup_r+0x5a>
 8005ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ed2:	b141      	cbz	r1, 8005ee6 <__swsetup_r+0x4a>
 8005ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	d002      	beq.n	8005ee2 <__swsetup_r+0x46>
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff fa81 	bl	80053e4 <_free_r>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	b94b      	cbnz	r3, 8005f16 <__swsetup_r+0x7a>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d003      	beq.n	8005f16 <__swsetup_r+0x7a>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 f897 	bl	8006044 <__smakebuf_r>
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	f013 0201 	ands.w	r2, r3, #1
 8005f1e:	d00a      	beq.n	8005f36 <__swsetup_r+0x9a>
 8005f20:	2200      	movs	r2, #0
 8005f22:	60a2      	str	r2, [r4, #8]
 8005f24:	6962      	ldr	r2, [r4, #20]
 8005f26:	4252      	negs	r2, r2
 8005f28:	61a2      	str	r2, [r4, #24]
 8005f2a:	6922      	ldr	r2, [r4, #16]
 8005f2c:	b942      	cbnz	r2, 8005f40 <__swsetup_r+0xa4>
 8005f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f32:	d1c5      	bne.n	8005ec0 <__swsetup_r+0x24>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	0799      	lsls	r1, r3, #30
 8005f38:	bf58      	it	pl
 8005f3a:	6962      	ldrpl	r2, [r4, #20]
 8005f3c:	60a2      	str	r2, [r4, #8]
 8005f3e:	e7f4      	b.n	8005f2a <__swsetup_r+0x8e>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f7      	b.n	8005f34 <__swsetup_r+0x98>
 8005f44:	20000050 	.word	0x20000050

08005f48 <memmove>:
 8005f48:	4288      	cmp	r0, r1
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	eb01 0402 	add.w	r4, r1, r2
 8005f50:	d902      	bls.n	8005f58 <memmove+0x10>
 8005f52:	4284      	cmp	r4, r0
 8005f54:	4623      	mov	r3, r4
 8005f56:	d807      	bhi.n	8005f68 <memmove+0x20>
 8005f58:	1e43      	subs	r3, r0, #1
 8005f5a:	42a1      	cmp	r1, r4
 8005f5c:	d008      	beq.n	8005f70 <memmove+0x28>
 8005f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f66:	e7f8      	b.n	8005f5a <memmove+0x12>
 8005f68:	4402      	add	r2, r0
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	428a      	cmp	r2, r1
 8005f6e:	d100      	bne.n	8005f72 <memmove+0x2a>
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f7a:	e7f7      	b.n	8005f6c <memmove+0x24>

08005f7c <_sbrk_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d06      	ldr	r5, [pc, #24]	@ (8005f98 <_sbrk_r+0x1c>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	f7fa fe2e 	bl	8000be8 <_sbrk>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_sbrk_r+0x1a>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_sbrk_r+0x1a>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	200043a4 	.word	0x200043a4

08005f9c <_realloc_r>:
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	b921      	cbnz	r1, 8005fb2 <_realloc_r+0x16>
 8005fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fac:	4611      	mov	r1, r2
 8005fae:	f7ff ba85 	b.w	80054bc <_malloc_r>
 8005fb2:	b92a      	cbnz	r2, 8005fc0 <_realloc_r+0x24>
 8005fb4:	f7ff fa16 	bl	80053e4 <_free_r>
 8005fb8:	4625      	mov	r5, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc0:	f000 f89e 	bl	8006100 <_malloc_usable_size_r>
 8005fc4:	4284      	cmp	r4, r0
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	d802      	bhi.n	8005fd0 <_realloc_r+0x34>
 8005fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fce:	d8f4      	bhi.n	8005fba <_realloc_r+0x1e>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f7ff fa72 	bl	80054bc <_malloc_r>
 8005fd8:	4680      	mov	r8, r0
 8005fda:	b908      	cbnz	r0, 8005fe0 <_realloc_r+0x44>
 8005fdc:	4645      	mov	r5, r8
 8005fde:	e7ec      	b.n	8005fba <_realloc_r+0x1e>
 8005fe0:	42b4      	cmp	r4, r6
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	bf28      	it	cs
 8005fe8:	4632      	movcs	r2, r6
 8005fea:	f7ff f9ec 	bl	80053c6 <memcpy>
 8005fee:	4629      	mov	r1, r5
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f7ff f9f7 	bl	80053e4 <_free_r>
 8005ff6:	e7f1      	b.n	8005fdc <_realloc_r+0x40>

08005ff8 <__swhatbuf_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	2900      	cmp	r1, #0
 8006002:	b096      	sub	sp, #88	@ 0x58
 8006004:	4615      	mov	r5, r2
 8006006:	461e      	mov	r6, r3
 8006008:	da0d      	bge.n	8006026 <__swhatbuf_r+0x2e>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	bf14      	ite	ne
 8006016:	2340      	movne	r3, #64	@ 0x40
 8006018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800601c:	2000      	movs	r0, #0
 800601e:	6031      	str	r1, [r6, #0]
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	b016      	add	sp, #88	@ 0x58
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	466a      	mov	r2, sp
 8006028:	f000 f848 	bl	80060bc <_fstat_r>
 800602c:	2800      	cmp	r0, #0
 800602e:	dbec      	blt.n	800600a <__swhatbuf_r+0x12>
 8006030:	9901      	ldr	r1, [sp, #4]
 8006032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800603a:	4259      	negs	r1, r3
 800603c:	4159      	adcs	r1, r3
 800603e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006042:	e7eb      	b.n	800601c <__swhatbuf_r+0x24>

08006044 <__smakebuf_r>:
 8006044:	898b      	ldrh	r3, [r1, #12]
 8006046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006048:	079d      	lsls	r5, r3, #30
 800604a:	4606      	mov	r6, r0
 800604c:	460c      	mov	r4, r1
 800604e:	d507      	bpl.n	8006060 <__smakebuf_r+0x1c>
 8006050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2301      	movs	r3, #1
 800605a:	6163      	str	r3, [r4, #20]
 800605c:	b003      	add	sp, #12
 800605e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006060:	ab01      	add	r3, sp, #4
 8006062:	466a      	mov	r2, sp
 8006064:	f7ff ffc8 	bl	8005ff8 <__swhatbuf_r>
 8006068:	9f00      	ldr	r7, [sp, #0]
 800606a:	4605      	mov	r5, r0
 800606c:	4639      	mov	r1, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff fa24 	bl	80054bc <_malloc_r>
 8006074:	b948      	cbnz	r0, 800608a <__smakebuf_r+0x46>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	059a      	lsls	r2, r3, #22
 800607c:	d4ee      	bmi.n	800605c <__smakebuf_r+0x18>
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	e7e2      	b.n	8006050 <__smakebuf_r+0xc>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	6020      	str	r0, [r4, #0]
 800608e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800609a:	b15b      	cbz	r3, 80060b4 <__smakebuf_r+0x70>
 800609c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a0:	4630      	mov	r0, r6
 80060a2:	f000 f81d 	bl	80060e0 <_isatty_r>
 80060a6:	b128      	cbz	r0, 80060b4 <__smakebuf_r+0x70>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	431d      	orrs	r5, r3
 80060b8:	81a5      	strh	r5, [r4, #12]
 80060ba:	e7cf      	b.n	800605c <__smakebuf_r+0x18>

080060bc <_fstat_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	@ (80060dc <_fstat_r+0x20>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	f7fe fd70 	bl	8004bae <_fstat>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	d102      	bne.n	80060d8 <_fstat_r+0x1c>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	b103      	cbz	r3, 80060d8 <_fstat_r+0x1c>
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	200043a4 	.word	0x200043a4

080060e0 <_isatty_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	@ (80060fc <_isatty_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fe fec4 	bl	8004e78 <_isatty>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_isatty_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_isatty_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	200043a4 	.word	0x200043a4

08006100 <_malloc_usable_size_r>:
 8006100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006104:	1f18      	subs	r0, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	bfbc      	itt	lt
 800610a:	580b      	ldrlt	r3, [r1, r0]
 800610c:	18c0      	addlt	r0, r0, r3
 800610e:	4770      	bx	lr

08006110 <_init>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr

0800611c <_fini>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr
