
sistemas_reactivos_tp1_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f0  080060f0  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f8  080060f8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006100  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000420c  20000060  08006160  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000426c  08006160  0000826c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f82  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab0  00000000  00000000  0001e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00021ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  00022db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025623  00000000  00000000  00023c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dbe  00000000  00000000  0004926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da568  00000000  00000000  0006302a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051cc  00000000  00000000  0013d5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001427a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ed0 	.word	0x08005ed0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005ed0 	.word	0x08005ed0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	2000011c 	.word	0x2000011c

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 faaa 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f80c 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8a0 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f874 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uart_enviar_estado_boton();
 8000634:	f004 fec0 	bl	80053b8 <uart_enviar_estado_boton>
  /* USER CODE BEGIN RTOS_THREADS */
    app_init();
 8000638:	f004 fc14 	bl	8004e64 <app_init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f002 fa4a 	bl	8002ad4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x20>

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 ff4c 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <SystemClock_Config+0xd4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	@ 0xa8
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f8bb 	bl	8001848 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 f8ca 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fd28 	bl	8001150 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 f8b3 	bl	8000870 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fdb2 	bl	80022bc <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f887 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000031c 	.word	0x2000031c
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a2c      	ldr	r2, [pc, #176]	@ (8000840 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_GPIO_Init+0xd4>)
 80007fc:	f000 fc8e 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_GPIO_Init+0xd8>)
 8000816:	f000 fad5 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_GPIO_Init+0xd4>)
 8000832:	f000 fac7 	bl	8000dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	@ 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020800 	.word	0x40020800

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800085e:	f000 f9af 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010000 	.word	0x40010000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <HAL_MspInit+0x54>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x54>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_MspInit+0x54>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_MspInit+0x54>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f000 fa55 	bl	8000d70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	@ (8000958 <HAL_UART_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12b      	bne.n	800094e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_UART_MspInit+0x88>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <HAL_UART_MspInit+0x8c>)
 800094a:	f000 fa3b 	bl	8000dc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	@ 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <HAL_InitTick+0xd4>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <HAL_InitTick+0xd4>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6453      	str	r3, [r2, #68]	@ 0x44
 8000984:	4b2c      	ldr	r3, [pc, #176]	@ (8000a38 <HAL_InitTick+0xd4>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	f107 020c 	add.w	r2, r7, #12
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fcf2 	bl	8001384 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009a0:	f000 fcdc 	bl	800135c <HAL_RCC_GetPCLK2Freq>
 80009a4:	4603      	mov	r3, r0
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ac:	4a23      	ldr	r2, [pc, #140]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3b01      	subs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009ba:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <HAL_InitTick+0xe0>)
 80009bc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009de:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009e0:	f001 f9d0 	bl	8001d84 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d11b      	bne.n	8000a2a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009f2:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009f4:	f001 fa20 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d111      	bne.n	8000a2a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a06:	2019      	movs	r0, #25
 8000a08:	f000 f9ce 	bl	8000da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	d808      	bhi.n	8000a24 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a12:	2200      	movs	r2, #0
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 f9aa 	bl	8000d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_InitTick+0xe4>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e002      	b.n	8000a2a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	20000364 	.word	0x20000364
 8000a44:	40010000 	.word	0x40010000
 8000a48:	20000004 	.word	0x20000004

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a8a:	f001 fa45 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000364 	.word	0x20000364

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f004 fd8c 	bl	80055e4 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	200003ac 	.word	0x200003ac
 8000b00:	20004270 	.word	0x20004270

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f004 fd4b 	bl	80055f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd61 	bl	8000620 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b6c:	08006100 	.word	0x08006100
  ldr r2, =_sbss
 8000b70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b74:	2000426c 	.word	0x2000426c

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f8d8 	bl	8000d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff feda 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe64 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	200003b0 	.word	0x200003b0

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200003b0 	.word	0x200003b0

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff4c 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d82:	f7ff ff61 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff ffb1 	bl	8000cf4 <NVIC_EncodePriority>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff80 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff54 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e165      	b.n	80010ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8154 	bne.w	80010a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80ae 	beq.w	80010a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80010c4 <HAL_GPIO_Init+0x300>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a5c      	ldr	r2, [pc, #368]	@ (80010c4 <HAL_GPIO_Init+0x300>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <HAL_GPIO_Init+0x300>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a58      	ldr	r2, [pc, #352]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80010cc <HAL_GPIO_Init+0x308>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4e      	ldr	r2, [pc, #312]	@ (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80010d4 <HAL_GPIO_Init+0x310>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	@ (80010d8 <HAL_GPIO_Init+0x314>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	@ (80010dc <HAL_GPIO_Init+0x318>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x20a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80010e0 <HAL_GPIO_Init+0x31c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x206>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <HAL_GPIO_Init+0x320>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a31      	ldr	r2, [pc, #196]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <HAL_GPIO_Init+0x324>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae96 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40013c00 	.word	0x40013c00

080010ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e001      	b.n	800110e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0cc      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001164:	4b68      	ldr	r3, [pc, #416]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d90c      	bls.n	800118c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b63      	ldr	r3, [pc, #396]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0b8      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a4:	4b59      	ldr	r3, [pc, #356]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a58      	ldr	r2, [pc, #352]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011bc:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a52      	ldr	r2, [pc, #328]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4b50      	ldr	r3, [pc, #320]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	494d      	ldr	r1, [pc, #308]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d044      	beq.n	8001270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d119      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e07f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d003      	beq.n	800120e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120a:	2b03      	cmp	r3, #3
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e06f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e067      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f023 0203 	bic.w	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4934      	ldr	r1, [pc, #208]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff fcd2 	bl	8000be8 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	e00a      	b.n	800125e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff fcce 	bl	8000be8 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e04f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 020c 	and.w	r2, r3, #12
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d1eb      	bne.n	8001248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001270:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d20c      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e032      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4916      	ldr	r1, [pc, #88]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	490e      	ldr	r1, [pc, #56]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d6:	f000 f887 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	490a      	ldr	r1, [pc, #40]	@ (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	5ccb      	ldrb	r3, [r1, r3]
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_RCC_ClockConfig+0x1c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fb34 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00
 800130c:	40023800 	.word	0x40023800
 8001310:	080060a4 	.word	0x080060a4
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_RCC_GetHCLKFreq+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000000 	.word	0x20000000

08001334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001338:	f7ff fff0 	bl	800131c <HAL_RCC_GetHCLKFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0a9b      	lsrs	r3, r3, #10
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4903      	ldr	r1, [pc, #12]	@ (8001358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	080060b4 	.word	0x080060b4

0800135c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001360:	f7ff ffdc 	bl	800131c <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0b5b      	lsrs	r3, r3, #13
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	@ (8001380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	080060b4 	.word	0x080060b4

08001384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	220f      	movs	r2, #15
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c6:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <HAL_RCC_GetClockConfig+0x60>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 020f 	and.w	r2, r3, #15
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0ae      	sub	sp, #184	@ 0xb8
 80013ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140e:	4bcb      	ldr	r3, [pc, #812]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b0c      	cmp	r3, #12
 8001418:	f200 8206 	bhi.w	8001828 <HAL_RCC_GetSysClockFreq+0x440>
 800141c:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <HAL_RCC_GetSysClockFreq+0x3c>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001459 	.word	0x08001459
 8001428:	08001829 	.word	0x08001829
 800142c:	08001829 	.word	0x08001829
 8001430:	08001829 	.word	0x08001829
 8001434:	08001461 	.word	0x08001461
 8001438:	08001829 	.word	0x08001829
 800143c:	08001829 	.word	0x08001829
 8001440:	08001829 	.word	0x08001829
 8001444:	08001469 	.word	0x08001469
 8001448:	08001829 	.word	0x08001829
 800144c:	08001829 	.word	0x08001829
 8001450:	08001829 	.word	0x08001829
 8001454:	08001659 	.word	0x08001659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4bb9      	ldr	r3, [pc, #740]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x358>)
 800145a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800145e:	e1e7      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001460:	4bb8      	ldr	r3, [pc, #736]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001466:	e1e3      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001468:	4bb4      	ldr	r3, [pc, #720]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001474:	4bb1      	ldr	r3, [pc, #708]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d071      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001480:	4bae      	ldr	r3, [pc, #696]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	2200      	movs	r2, #0
 8001488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800148c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001498:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014a6:	4622      	mov	r2, r4
 80014a8:	462b      	mov	r3, r5
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	f04f 0100 	mov.w	r1, #0
 80014b2:	0159      	lsls	r1, r3, #5
 80014b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b8:	0150      	lsls	r0, r2, #5
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4621      	mov	r1, r4
 80014c0:	1a51      	subs	r1, r2, r1
 80014c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80014c4:	4629      	mov	r1, r5
 80014c6:	eb63 0301 	sbc.w	r3, r3, r1
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014d8:	4649      	mov	r1, r9
 80014da:	018b      	lsls	r3, r1, #6
 80014dc:	4641      	mov	r1, r8
 80014de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014e2:	4641      	mov	r1, r8
 80014e4:	018a      	lsls	r2, r1, #6
 80014e6:	4641      	mov	r1, r8
 80014e8:	1a51      	subs	r1, r2, r1
 80014ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014ec:	4649      	mov	r1, r9
 80014ee:	eb63 0301 	sbc.w	r3, r3, r1
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001500:	4649      	mov	r1, r9
 8001502:	00cb      	lsls	r3, r1, #3
 8001504:	4641      	mov	r1, r8
 8001506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800150a:	4641      	mov	r1, r8
 800150c:	00ca      	lsls	r2, r1, #3
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	4603      	mov	r3, r0
 8001514:	4622      	mov	r2, r4
 8001516:	189b      	adds	r3, r3, r2
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
 800151a:	462b      	mov	r3, r5
 800151c:	460a      	mov	r2, r1
 800151e:	eb42 0303 	adc.w	r3, r2, r3
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001530:	4629      	mov	r1, r5
 8001532:	024b      	lsls	r3, r1, #9
 8001534:	4621      	mov	r1, r4
 8001536:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800153a:	4621      	mov	r1, r4
 800153c:	024a      	lsls	r2, r1, #9
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001546:	2200      	movs	r2, #0
 8001548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800154c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001550:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001554:	f7fe feb4 	bl	80002c0 <__aeabi_uldivmod>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4613      	mov	r3, r2
 800155e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001562:	e067      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001564:	4b75      	ldr	r3, [pc, #468]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	2200      	movs	r2, #0
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001570:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800157c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800157e:	2300      	movs	r3, #0
 8001580:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001582:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001586:	4622      	mov	r2, r4
 8001588:	462b      	mov	r3, r5
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0159      	lsls	r1, r3, #5
 8001594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001598:	0150      	lsls	r0, r2, #5
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4621      	mov	r1, r4
 80015a0:	1a51      	subs	r1, r2, r1
 80015a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015a4:	4629      	mov	r1, r5
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015b8:	4649      	mov	r1, r9
 80015ba:	018b      	lsls	r3, r1, #6
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c2:	4641      	mov	r1, r8
 80015c4:	018a      	lsls	r2, r1, #6
 80015c6:	4641      	mov	r1, r8
 80015c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80015cc:	4649      	mov	r1, r9
 80015ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015e6:	4692      	mov	sl, r2
 80015e8:	469b      	mov	fp, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	eb1a 0303 	adds.w	r3, sl, r3
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	462b      	mov	r3, r5
 80015f4:	eb4b 0303 	adc.w	r3, fp, r3
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001606:	4629      	mov	r1, r5
 8001608:	028b      	lsls	r3, r1, #10
 800160a:	4621      	mov	r1, r4
 800160c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001610:	4621      	mov	r1, r4
 8001612:	028a      	lsls	r2, r1, #10
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001620:	677a      	str	r2, [r7, #116]	@ 0x74
 8001622:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001626:	f7fe fe4b 	bl	80002c0 <__aeabi_uldivmod>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4613      	mov	r3, r2
 8001630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800164a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001656:	e0eb      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b38      	ldr	r3, [pc, #224]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001664:	4b35      	ldr	r3, [pc, #212]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d06b      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800167a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800167c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800167e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001682:	663b      	str	r3, [r7, #96]	@ 0x60
 8001684:	2300      	movs	r3, #0
 8001686:	667b      	str	r3, [r7, #100]	@ 0x64
 8001688:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	0159      	lsls	r1, r3, #5
 800169a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169e:	0150      	lsls	r0, r2, #5
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4621      	mov	r1, r4
 80016a6:	1a51      	subs	r1, r2, r1
 80016a8:	61b9      	str	r1, [r7, #24]
 80016aa:	4629      	mov	r1, r5
 80016ac:	eb63 0301 	sbc.w	r3, r3, r1
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016be:	4659      	mov	r1, fp
 80016c0:	018b      	lsls	r3, r1, #6
 80016c2:	4651      	mov	r1, sl
 80016c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c8:	4651      	mov	r1, sl
 80016ca:	018a      	lsls	r2, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ebb2 0801 	subs.w	r8, r2, r1
 80016d2:	4659      	mov	r1, fp
 80016d4:	eb63 0901 	sbc.w	r9, r3, r1
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ec:	4690      	mov	r8, r2
 80016ee:	4699      	mov	r9, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	eb18 0303 	adds.w	r3, r8, r3
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	462b      	mov	r3, r5
 80016fa:	eb49 0303 	adc.w	r3, r9, r3
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800170c:	4629      	mov	r1, r5
 800170e:	024b      	lsls	r3, r1, #9
 8001710:	4621      	mov	r1, r4
 8001712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001716:	4621      	mov	r1, r4
 8001718:	024a      	lsls	r2, r1, #9
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001722:	2200      	movs	r2, #0
 8001724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001726:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800172c:	f7fe fdc8 	bl	80002c0 <__aeabi_uldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4613      	mov	r3, r2
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800173a:	e065      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x420>
 800173c:	40023800 	.word	0x40023800
 8001740:	00f42400 	.word	0x00f42400
 8001744:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001748:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x458>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	2200      	movs	r2, #0
 8001750:	4618      	mov	r0, r3
 8001752:	4611      	mov	r1, r2
 8001754:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001758:	653b      	str	r3, [r7, #80]	@ 0x50
 800175a:	2300      	movs	r3, #0
 800175c:	657b      	str	r3, [r7, #84]	@ 0x54
 800175e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	0159      	lsls	r1, r3, #5
 8001770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001774:	0150      	lsls	r0, r2, #5
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4641      	mov	r1, r8
 800177c:	1a51      	subs	r1, r2, r1
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	4649      	mov	r1, r9
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001794:	4659      	mov	r1, fp
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	4651      	mov	r1, sl
 800179a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179e:	4651      	mov	r1, sl
 80017a0:	018a      	lsls	r2, r1, #6
 80017a2:	4651      	mov	r1, sl
 80017a4:	1a54      	subs	r4, r2, r1
 80017a6:	4659      	mov	r1, fp
 80017a8:	eb63 0501 	sbc.w	r5, r3, r1
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	00eb      	lsls	r3, r5, #3
 80017b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ba:	00e2      	lsls	r2, r4, #3
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4643      	mov	r3, r8
 80017c2:	18e3      	adds	r3, r4, r3
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	464b      	mov	r3, r9
 80017c8:	eb45 0303 	adc.w	r3, r5, r3
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017da:	4629      	mov	r1, r5
 80017dc:	028b      	lsls	r3, r1, #10
 80017de:	4621      	mov	r1, r4
 80017e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e4:	4621      	mov	r1, r4
 80017e6:	028a      	lsls	r2, r1, #10
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f0:	2200      	movs	r2, #0
 80017f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017fa:	f7fe fd61 	bl	80002c0 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4613      	mov	r3, r2
 8001804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x458>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0f1b      	lsrs	r3, r3, #28
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800181a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001826:	e003      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x45c>)
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800182e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001834:	4618      	mov	r0, r3
 8001836:	37b8      	adds	r7, #184	@ 0xb8
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	00f42400 	.word	0x00f42400

08001848 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e28d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8083 	beq.w	800196e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001868:	4b94      	ldr	r3, [pc, #592]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d019      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001874:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
        || \
 800187c:	2b08      	cmp	r3, #8
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001880:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188c:	d00c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188e:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b84      	ldr	r3, [pc, #528]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d05b      	beq.n	800196c <HAL_RCC_OscConfig+0x124>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d157      	bne.n	800196c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e25a      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x90>
 80018ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7b      	ldr	r2, [pc, #492]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xb4>
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a72      	ldr	r2, [pc, #456]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6e      	ldr	r2, [pc, #440]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6b      	ldr	r2, [pc, #428]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f964 	bl	8000be8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f960 	bl	8000be8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e21f      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b61      	ldr	r3, [pc, #388]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xdc>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f950 	bl	8000be8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f94c 	bl	8000be8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e20b      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b57      	ldr	r3, [pc, #348]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x104>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800197a:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001986:	4b4d      	ldr	r3, [pc, #308]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
        || \
 800198e:	2b08      	cmp	r3, #8
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1d3      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x278>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f8f9 	bl	8000be8 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff f8f5 	bl	8000be8 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1b4      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x278>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f8d8 	bl	8000be8 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f8d4 	bl	8000be8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e193      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f8b8 	bl	8000be8 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f8b4 	bl	8000be8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e173      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x234>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f8a1 	bl	8000be8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f89d 	bl	8000be8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e15c      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b83      	ldr	r3, [pc, #524]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b76      	ldr	r3, [pc, #472]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a75      	ldr	r2, [pc, #468]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f85d 	bl	8000be8 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff f859 	bl	8000be8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e118      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x31e>
 8001b58:	4b66      	ldr	r3, [pc, #408]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a65      	ldr	r2, [pc, #404]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x340>
 8001b6e:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b88:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f81e 	bl	8000be8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f81a 	bl	8000be8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0d7      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x368>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f808 	bl	8000be8 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f804 	bl	8000be8 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0c1      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80ad 	beq.w	8001d74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d060      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d145      	bne.n	8001cba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7fe ffd8 	bl	8000be8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe ffd4 	bl	8000be8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e093      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	071b      	lsls	r3, r3, #28
 8001c86:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7fe ffa9 	bl	8000be8 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe ffa5 	bl	8000be8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e064      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x452>
 8001cb8:	e05c      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ff92 	bl	8000be8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe ff8e 	bl	8000be8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e04d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e040      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_RCC_OscConfig+0x538>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d030      	beq.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d129      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d122      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d119      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9c0 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d2 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8d5 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8af 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f886 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f878 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f889 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f860 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f852 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f863 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fbe4 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f900 	bl	80022a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f834 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8d2 	bl	8002294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	@ (800226c <TIM_Base_SetConfig+0x124>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <TIM_Base_SetConfig+0x128>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3e      	ldr	r2, [pc, #248]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a32      	ldr	r2, [pc, #200]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <TIM_Base_SetConfig+0x124>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002270 <TIM_Base_SetConfig+0x128>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002280 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a28      	ldr	r2, [pc, #160]	@ (8002288 <TIM_Base_SetConfig+0x140>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a27      	ldr	r2, [pc, #156]	@ (800228c <TIM_Base_SetConfig+0x144>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <TIM_Base_SetConfig+0x148>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0xf2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d103      	bne.n	8002242 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40010400 	.word	0x40010400
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800
 8002288:	40001800 	.word	0x40001800
 800228c:	40001c00 	.word	0x40001c00
 8002290:	40002000 	.word	0x40002000

08002294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e042      	b.n	8002354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe faf6 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f973 	bl	80025ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b20      	cmp	r3, #32
 800237a:	d175      	bne.n	8002468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_UART_Transmit+0x2c>
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e06e      	b.n	800246a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2221      	movs	r2, #33	@ 0x21
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800239a:	f7fe fc25 	bl	8000be8 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023b4:	d108      	bne.n	80023c8 <HAL_UART_Transmit+0x6c>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	e003      	b.n	80023d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023d0:	e02e      	b.n	8002430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2180      	movs	r1, #128	@ 0x80
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f848 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e03a      	b.n	800246a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3302      	adds	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e007      	b.n	8002422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1cb      	bne.n	80023d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	2140      	movs	r1, #64	@ 0x40
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f814 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e006      	b.n	800246a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002482:	e03b      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d037      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248c:	f7fe fbac 	bl	8000be8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	6a3a      	ldr	r2, [r7, #32]
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e03a      	b.n	800251c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b80      	cmp	r3, #128	@ 0x80
 80024b8:	d020      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d01d      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d116      	bne.n	80024fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f81d 	bl	8002524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2208      	movs	r2, #8
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00f      	b.n	800251c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	429a      	cmp	r2, r3
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d0b4      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b095      	sub	sp, #84	@ 0x54
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800254c:	643a      	str	r2, [r7, #64]	@ 0x40
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e5      	bne.n	800252c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	2b01      	cmp	r3, #1
 800259a:	d119      	bne.n	80025d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025bc:	61ba      	str	r2, [r7, #24]
 80025be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	613b      	str	r3, [r7, #16]
   return(result);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025de:	bf00      	nop
 80025e0:	3754      	adds	r7, #84	@ 0x54
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b0c0      	sub	sp, #256	@ 0x100
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	ea40 0301 	orr.w	r3, r0, r1
 8002614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002644:	f021 010c 	bic.w	r1, r1, #12
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002666:	6999      	ldr	r1, [r3, #24]
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	ea40 0301 	orr.w	r3, r0, r1
 8002672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b8f      	ldr	r3, [pc, #572]	@ (80028b8 <UART_SetConfig+0x2cc>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <UART_SetConfig+0xa0>
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <UART_SetConfig+0x2d0>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d104      	bne.n	8002696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800268c:	f7fe fe66 	bl	800135c <HAL_RCC_GetPCLK2Freq>
 8002690:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002694:	e003      	b.n	800269e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7fe fe4d 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 800269a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a8:	f040 810c 	bne.w	80028c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	1891      	adds	r1, r2, r2
 80026c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026c6:	415b      	adcs	r3, r3
 80026c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026ce:	4621      	mov	r1, r4
 80026d0:	eb12 0801 	adds.w	r8, r2, r1
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb43 0901 	adc.w	r9, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb18 0303 	adds.w	r3, r8, r3
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002712:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800271a:	460b      	mov	r3, r1
 800271c:	18db      	adds	r3, r3, r3
 800271e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002720:	4613      	mov	r3, r2
 8002722:	eb42 0303 	adc.w	r3, r2, r3
 8002726:	657b      	str	r3, [r7, #84]	@ 0x54
 8002728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800272c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002730:	f7fd fdc6 	bl	80002c0 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <UART_SetConfig+0x2d4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800274c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800275c:	415b      	adcs	r3, r3
 800275e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002764:	4641      	mov	r1, r8
 8002766:	eb12 0a01 	adds.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb43 0b01 	adc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800277c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002784:	4692      	mov	sl, r2
 8002786:	469b      	mov	fp, r3
 8002788:	4643      	mov	r3, r8
 800278a:	eb1a 0303 	adds.w	r3, sl, r3
 800278e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002792:	464b      	mov	r3, r9
 8002794:	eb4b 0303 	adc.w	r3, fp, r3
 8002798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027b0:	460b      	mov	r3, r1
 80027b2:	18db      	adds	r3, r3, r3
 80027b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027b6:	4613      	mov	r3, r2
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027c6:	f7fd fd7b 	bl	80002c0 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <UART_SetConfig+0x2d4>)
 80027d2:	fba3 2301 	umull	r2, r3, r3, r1
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2264      	movs	r2, #100	@ 0x64
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <UART_SetConfig+0x2d4>)
 80027e8:	fba3 2302 	umull	r2, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027f4:	441c      	add	r4, r3
 80027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002800:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002810:	415b      	adcs	r3, r3
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6339      	str	r1, [r7, #48]	@ 0x30
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800284c:	464b      	mov	r3, r9
 800284e:	460a      	mov	r2, r1
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002864:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800286c:	460b      	mov	r3, r1
 800286e:	18db      	adds	r3, r3, r3
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002872:	4613      	mov	r3, r2
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800287e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002882:	f7fd fd1d 	bl	80002c0 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <UART_SetConfig+0x2d4>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	@ 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3332      	adds	r3, #50	@ 0x32
 800289e:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <UART_SetConfig+0x2d4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4422      	add	r2, r4
 80028b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b4:	e106      	b.n	8002ac4 <UART_SetConfig+0x4d8>
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028d6:	4642      	mov	r2, r8
 80028d8:	464b      	mov	r3, r9
 80028da:	1891      	adds	r1, r2, r2
 80028dc:	6239      	str	r1, [r7, #32]
 80028de:	415b      	adcs	r3, r3
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028e6:	4641      	mov	r1, r8
 80028e8:	1854      	adds	r4, r2, r1
 80028ea:	4649      	mov	r1, r9
 80028ec:	eb43 0501 	adc.w	r5, r3, r1
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	00eb      	lsls	r3, r5, #3
 80028fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fe:	00e2      	lsls	r2, r4, #3
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4643      	mov	r3, r8
 8002906:	18e3      	adds	r3, r4, r3
 8002908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800290c:	464b      	mov	r3, r9
 800290e:	eb45 0303 	adc.w	r3, r5, r3
 8002912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002932:	4629      	mov	r1, r5
 8002934:	008b      	lsls	r3, r1, #2
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293c:	4621      	mov	r1, r4
 800293e:	008a      	lsls	r2, r1, #2
 8002940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002944:	f7fd fcbc 	bl	80002c0 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4b60      	ldr	r3, [pc, #384]	@ (8002ad0 <UART_SetConfig+0x4e4>)
 800294e:	fba3 2302 	umull	r2, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	011c      	lsls	r4, r3, #4
 8002956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002960:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	61b9      	str	r1, [r7, #24]
 8002970:	415b      	adcs	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002978:	4641      	mov	r1, r8
 800297a:	1851      	adds	r1, r2, r1
 800297c:	6139      	str	r1, [r7, #16]
 800297e:	4649      	mov	r1, r9
 8002980:	414b      	adcs	r3, r1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002990:	4659      	mov	r1, fp
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299a:	4651      	mov	r1, sl
 800299c:	00ca      	lsls	r2, r1, #3
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	4642      	mov	r2, r8
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029ac:	464b      	mov	r3, r9
 80029ae:	460a      	mov	r2, r1
 80029b0:	eb42 0303 	adc.w	r3, r2, r3
 80029b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029d0:	4649      	mov	r1, r9
 80029d2:	008b      	lsls	r3, r1, #2
 80029d4:	4641      	mov	r1, r8
 80029d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029da:	4641      	mov	r1, r8
 80029dc:	008a      	lsls	r2, r1, #2
 80029de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029e2:	f7fd fc6d 	bl	80002c0 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <UART_SetConfig+0x4e4>)
 80029ee:	fba3 2301 	umull	r2, r3, r3, r1
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2264      	movs	r2, #100	@ 0x64
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	1acb      	subs	r3, r1, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	@ 0x32
 8002a00:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <UART_SetConfig+0x4e4>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a0c:	441c      	add	r4, r3
 8002a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a12:	2200      	movs	r2, #0
 8002a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a16:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	1891      	adds	r1, r2, r2
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	415b      	adcs	r3, r3
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	1851      	adds	r1, r2, r1
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	4649      	mov	r1, r9
 8002a34:	414b      	adcs	r3, r1
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a44:	4659      	mov	r1, fp
 8002a46:	00cb      	lsls	r3, r1, #3
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4e:	4651      	mov	r1, sl
 8002a50:	00ca      	lsls	r2, r1, #3
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	4642      	mov	r2, r8
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a5e:	464b      	mov	r3, r9
 8002a60:	460a      	mov	r2, r1
 8002a62:	eb42 0303 	adc.w	r3, r2, r3
 8002a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a72:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a80:	4649      	mov	r1, r9
 8002a82:	008b      	lsls	r3, r1, #2
 8002a84:	4641      	mov	r1, r8
 8002a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	008a      	lsls	r2, r1, #2
 8002a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a92:	f7fd fc15 	bl	80002c0 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <UART_SetConfig+0x4e4>)
 8002a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	2164      	movs	r1, #100	@ 0x64
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	3332      	adds	r3, #50	@ 0x32
 8002aae:	4a08      	ldr	r2, [pc, #32]	@ (8002ad0 <UART_SetConfig+0x4e4>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	f003 020f 	and.w	r2, r3, #15
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4422      	add	r2, r4
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ad8:	f000 ff7e 	bl	80039d8 <vTaskStartScheduler>
  
  return osOK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 0208 	add.w	r2, r3, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295
 8002afa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0208 	add.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0208 	add.w	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d103      	bne.n	8002ba4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00c      	b.n	8002bbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e002      	b.n	8002bb2 <vListInsert+0x2e>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d2f6      	bcs.n	8002bac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d103      	bne.n	8002c2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c78:	f001 fe26 	bl	80048c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	68f9      	ldr	r1, [r7, #12]
 8002cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	22ff      	movs	r2, #255	@ 0xff
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	22ff      	movs	r2, #255	@ 0xff
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d114      	bne.n	8002cf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f8d6 	bl	8003e8c <xTaskRemoveFromEventList>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <xQueueGenericReset+0xd0>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	e009      	b.n	8002d0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fef0 	bl	8002ae2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3324      	adds	r3, #36	@ 0x24
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff feeb 	bl	8002ae2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d0c:	f001 fe0e 	bl	800492c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d10:	2301      	movs	r3, #1
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	613b      	str	r3, [r7, #16]
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3348      	adds	r3, #72	@ 0x48
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fe94 	bl	8004a88 <pvPortMalloc>
 8002d60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d011      	beq.n	8002d8c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3348      	adds	r3, #72	@ 0x48
 8002d70:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d7a:	79fa      	ldrb	r2, [r7, #7]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f805 	bl	8002d96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e002      	b.n	8002db8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	69b8      	ldr	r0, [r7, #24]
 8002dc8:	f7ff ff40 	bl	8002c4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	@ 0x38
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002de2:	2300      	movs	r3, #0
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <xQueueGenericSend+0x34>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <xQueueGenericSend+0x42>
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <xQueueGenericSend+0x46>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueGenericSend+0x48>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <xQueueGenericSend+0x64>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <xQueueGenericSend+0x72>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <xQueueGenericSend+0x76>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueGenericSend+0x78>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <xQueueGenericSend+0x94>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	623b      	str	r3, [r7, #32]
}
 8002e62:	bf00      	nop
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e68:	f001 f9d6 	bl	8004218 <xTaskGetSchedulerState>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <xQueueGenericSend+0xa4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <xQueueGenericSend+0xa8>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <xQueueGenericSend+0xaa>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <xQueueGenericSend+0xc6>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	61fb      	str	r3, [r7, #28]
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	e7fd      	b.n	8002e96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e9a:	f001 fd15 	bl	80048c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSend+0xdc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d129      	bne.n	8002f04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eb6:	f000 fa99 	bl	80033ec <prvCopyDataToQueue>
 8002eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	3324      	adds	r3, #36	@ 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 ffdf 	bl	8003e8c <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <xQueueGenericSend+0x200>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e00a      	b.n	8002efc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <xQueueGenericSend+0x200>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002efc:	f001 fd16 	bl	800492c <vPortExitCritical>
				return pdPASS;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e063      	b.n	8002fcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f0a:	f001 fd0f 	bl	800492c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e05c      	b.n	8002fcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 f819 	bl	8003f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f26:	f001 fd01 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f2a:	f000 fdbf 	bl	8003aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f2e:	f001 fccb 	bl	80048c8 <vPortEnterCritical>
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <xQueueGenericSend+0x174>
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0x18a>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f5e:	f001 fce5 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f62:	1d3a      	adds	r2, r7, #4
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f808 	bl	8003f80 <xTaskCheckForTimeOut>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d124      	bne.n	8002fc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f78:	f000 fb30 	bl	80035dc <prvIsQueueFull>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	3310      	adds	r3, #16
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ff58 	bl	8003e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f92:	f000 fabb 	bl	800350c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f96:	f000 fd97 	bl	8003ac8 <xTaskResumeAll>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af7c 	bne.w	8002e9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <xQueueGenericSend+0x200>)
 8002fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	e772      	b.n	8002e9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fb6:	f000 faa9 	bl	800350c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fba:	f000 fd85 	bl	8003ac8 <xTaskResumeAll>
 8002fbe:	e76c      	b.n	8002e9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fc2:	f000 faa3 	bl	800350c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fc6:	f000 fd7f 	bl	8003ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3738      	adds	r7, #56	@ 0x38
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10b      	bne.n	800300a <xQueueReceive+0x32>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	623b      	str	r3, [r7, #32]
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <xQueueReceive+0x40>
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <xQueueReceive+0x44>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <xQueueReceive+0x46>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <xQueueReceive+0x62>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	61fb      	str	r3, [r7, #28]
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	e7fd      	b.n	8003036 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800303a:	f001 f8ed 	bl	8004218 <xTaskGetSchedulerState>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <xQueueReceive+0x72>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <xQueueReceive+0x76>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueReceive+0x78>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xQueueReceive+0x94>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	61bb      	str	r3, [r7, #24]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800306c:	f001 fc2c 	bl	80048c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01f      	beq.n	80030bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003080:	f000 fa1e 	bl	80034c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	1e5a      	subs	r2, r3, #1
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00f      	beq.n	80030b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	3310      	adds	r3, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fef7 	bl	8003e8c <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003198 <xQueueReceive+0x1c0>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030b4:	f001 fc3a 	bl	800492c <vPortExitCritical>
				return pdPASS;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e069      	b.n	8003190 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030c2:	f001 fc33 	bl	800492c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e062      	b.n	8003190 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ff3d 	bl	8003f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030de:	f001 fc25 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030e2:	f000 fce3 	bl	8003aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030e6:	f001 fbef 	bl	80048c8 <vPortEnterCritical>
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d103      	bne.n	8003100 <xQueueReceive+0x128>
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003106:	b25b      	sxtb	r3, r3
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d103      	bne.n	8003116 <xQueueReceive+0x13e>
 800310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003116:	f001 fc09 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800311a:	1d3a      	adds	r2, r7, #4
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 ff2c 	bl	8003f80 <xTaskCheckForTimeOut>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d123      	bne.n	8003176 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800312e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003130:	f000 fa3e 	bl	80035b0 <prvIsQueueEmpty>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800313a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313c:	3324      	adds	r3, #36	@ 0x24
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fe7c 	bl	8003e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314a:	f000 f9df 	bl	800350c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800314e:	f000 fcbb 	bl	8003ac8 <xTaskResumeAll>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d189      	bne.n	800306c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <xQueueReceive+0x1c0>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	e780      	b.n	800306c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800316a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800316c:	f000 f9ce 	bl	800350c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003170:	f000 fcaa 	bl	8003ac8 <xTaskResumeAll>
 8003174:	e77a      	b.n	800306c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003178:	f000 f9c8 	bl	800350c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800317c:	f000 fca4 	bl	8003ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003182:	f000 fa15 	bl	80035b0 <prvIsQueueEmpty>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f43f af6f 	beq.w	800306c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800318e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003190:	4618      	mov	r0, r3
 8003192:	3730      	adds	r7, #48	@ 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	@ 0x38
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	623b      	str	r3, [r7, #32]
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	61fb      	str	r3, [r7, #28]
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f0:	f001 f812 	bl	8004218 <xTaskGetSchedulerState>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <xQueueSemaphoreTake+0x64>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <xQueueSemaphoreTake+0x68>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <xQueueSemaphoreTake+0x6a>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	61bb      	str	r3, [r7, #24]
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003222:	f001 fb51 	bl	80048c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d024      	beq.n	800327c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003242:	f001 f995 	bl	8004570 <pvTaskIncrementMutexHeldCount>
 8003246:	4602      	mov	r2, r0
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00f      	beq.n	8003274 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fe17 	bl	8003e8c <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <xQueueSemaphoreTake+0x21c>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003274:	f001 fb5a 	bl	800492c <vPortExitCritical>
				return pdPASS;
 8003278:	2301      	movs	r3, #1
 800327a:	e098      	b.n	80033ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	617b      	str	r3, [r7, #20]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032a0:	f001 fb44 	bl	800492c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e082      	b.n	80033ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fe4e 	bl	8003f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032bc:	f001 fb36 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c0:	f000 fbf4 	bl	8003aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c4:	f001 fb00 	bl	80048c8 <vPortEnterCritical>
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <xQueueSemaphoreTake+0x142>
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d103      	bne.n	80032f4 <xQueueSemaphoreTake+0x158>
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032f4:	f001 fb1a 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f8:	463a      	mov	r2, r7
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fe3d 	bl	8003f80 <xTaskCheckForTimeOut>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d132      	bne.n	8003372 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800330c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800330e:	f000 f94f 	bl	80035b0 <prvIsQueueEmpty>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d026      	beq.n	8003366 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003320:	f001 fad2 	bl	80048c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ff93 	bl	8004254 <xTaskPriorityInherit>
 800332e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003330:	f001 fafc 	bl	800492c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	3324      	adds	r3, #36	@ 0x24
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd7f 	bl	8003e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003342:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003344:	f000 f8e2 	bl	800350c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003348:	f000 fbbe 	bl	8003ac8 <xTaskResumeAll>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f47f af67 	bne.w	8003222 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003354:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <xQueueSemaphoreTake+0x21c>)
 8003356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	e75d      	b.n	8003222 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003368:	f000 f8d0 	bl	800350c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800336c:	f000 fbac 	bl	8003ac8 <xTaskResumeAll>
 8003370:	e757      	b.n	8003222 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003372:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003374:	f000 f8ca 	bl	800350c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003378:	f000 fba6 	bl	8003ac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800337c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800337e:	f000 f917 	bl	80035b0 <prvIsQueueEmpty>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f43f af4c 	beq.w	8003222 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003390:	f001 fa9a 	bl	80048c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003396:	f000 f811 	bl	80033bc <prvGetDisinheritPriorityAfterTimeout>
 800339a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 f854 	bl	8004450 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033a8:	f001 fac0 	bl	800492c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3738      	adds	r7, #56	@ 0x38
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1c3 0307 	rsb	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80033de:	68fb      	ldr	r3, [r7, #12]
	}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d14d      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 ff92 	bl	8004340 <xTaskPriorityDisinherit>
 800341c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e043      	b.n	80034ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d119      	bne.n	8003460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6858      	ldr	r0, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	f002 f900 	bl	800563c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	441a      	add	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d32b      	bcc.n	80034ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e026      	b.n	80034ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68d8      	ldr	r0, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f002 f8e6 	bl	800563c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d207      	bcs.n	800349c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	425b      	negs	r3, r3
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d105      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	441a      	add	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d303      	bcc.n	80034f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	461a      	mov	r2, r3
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f002 f89c 	bl	800563c <memcpy>
	}
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003514:	f001 f9d8 	bl	80048c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003520:	e011      	b.n	8003546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3324      	adds	r3, #36	@ 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fcac 	bl	8003e8c <xTaskRemoveFromEventList>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800353a:	f000 fd85 	bl	8004048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3b01      	subs	r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	dce9      	bgt.n	8003522 <prvUnlockQueue+0x16>
 800354e:	e000      	b.n	8003552 <prvUnlockQueue+0x46>
					break;
 8003550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	22ff      	movs	r2, #255	@ 0xff
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800355a:	f001 f9e7 	bl	800492c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800355e:	f001 f9b3 	bl	80048c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800356a:	e011      	b.n	8003590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc87 	bl	8003e8c <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003584:	f000 fd60 	bl	8004048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	3b01      	subs	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003594:	2b00      	cmp	r3, #0
 8003596:	dce9      	bgt.n	800356c <prvUnlockQueue+0x60>
 8003598:	e000      	b.n	800359c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800359a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	22ff      	movs	r2, #255	@ 0xff
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035a4:	f001 f9c2 	bl	800492c <vPortExitCritical>
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035b8:	f001 f986 	bl	80048c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ce:	f001 f9ad 	bl	800492c <vPortExitCritical>

	return xReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035e4:	f001 f970 	bl	80048c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d102      	bne.n	80035fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035fe:	f001 f995 	bl	800492c <vPortExitCritical>

	return xReturn;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08e      	sub	sp, #56	@ 0x38
 8003610:	af04      	add	r7, sp, #16
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	623b      	str	r3, [r7, #32]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <xTaskCreateStatic+0x4a>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	61fb      	str	r3, [r7, #28]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003656:	23a0      	movs	r3, #160	@ 0xa0
 8003658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2ba0      	cmp	r3, #160	@ 0xa0
 800365e:	d00b      	beq.n	8003678 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	61bb      	str	r3, [r7, #24]
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003678:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01e      	beq.n	80036be <xTaskCreateStatic+0xb2>
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01b      	beq.n	80036be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	2202      	movs	r2, #2
 8003694:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003698:	2300      	movs	r3, #0
 800369a:	9303      	str	r3, [sp, #12]
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	9302      	str	r3, [sp, #8]
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f851 	bl	8003758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036b8:	f000 f8ee 	bl	8003898 <prvAddNewTaskToReadyList>
 80036bc:	e001      	b.n	80036c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c2:	697b      	ldr	r3, [r7, #20]
	}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3728      	adds	r7, #40	@ 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af04      	add	r7, sp, #16
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f9d1 	bl	8004a88 <pvPortMalloc>
 80036e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036ee:	20a0      	movs	r0, #160	@ 0xa0
 80036f0:	f001 f9ca 	bl	8004a88 <pvPortMalloc>
 80036f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	631a      	str	r2, [r3, #48]	@ 0x30
 8003702:	e005      	b.n	8003710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f001 fa8d 	bl	8004c24 <vPortFree>
 800370a:	e001      	b.n	8003710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	2300      	movs	r3, #0
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	9302      	str	r3, [sp, #8]
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f80f 	bl	8003758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373a:	69f8      	ldr	r0, [r7, #28]
 800373c:	f000 f8ac 	bl	8003898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003740:	2301      	movs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e002      	b.n	800374c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800374c:	69bb      	ldr	r3, [r7, #24]
	}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003770:	3b01      	subs	r3, #1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	617b      	str	r3, [r7, #20]
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	e7fd      	b.n	800379e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01f      	beq.n	80037e8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e012      	b.n	80037d4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	7819      	ldrb	r1, [r3, #0]
 80037b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	3334      	adds	r3, #52	@ 0x34
 80037be:	460a      	mov	r2, r1
 80037c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	d9e9      	bls.n	80037ae <prvInitialiseNewTask+0x56>
 80037da:	e000      	b.n	80037de <prvInitialiseNewTask+0x86>
			{
				break;
 80037dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037e6:	e003      	b.n	80037f0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d901      	bls.n	80037fa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037f6:	2306      	movs	r3, #6
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	3304      	adds	r3, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f986 	bl	8002b22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	3318      	adds	r3, #24
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f981 	bl	8002b22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	f1c3 0207 	rsb	r2, r3, #7
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	2200      	movs	r2, #0
 8003842:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	224c      	movs	r2, #76	@ 0x4c
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fe4e 	bl	80054f0 <memset>
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	4a0d      	ldr	r2, [pc, #52]	@ (800388c <prvInitialiseNewTask+0x134>)
 8003858:	651a      	str	r2, [r3, #80]	@ 0x50
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	4a0c      	ldr	r2, [pc, #48]	@ (8003890 <prvInitialiseNewTask+0x138>)
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	4a0c      	ldr	r2, [pc, #48]	@ (8003894 <prvInitialiseNewTask+0x13c>)
 8003864:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f000 fefa 	bl	8004664 <pxPortInitialiseStack>
 8003870:	4602      	mov	r2, r0
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20004124 	.word	0x20004124
 8003890:	2000418c 	.word	0x2000418c
 8003894:	200041f4 	.word	0x200041f4

08003898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038a0:	f001 f812 	bl	80048c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <prvAddNewTaskToReadyList+0xb8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <prvAddNewTaskToReadyList+0xb8>)
 80038ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <prvAddNewTaskToReadyList+0xbc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038b6:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <prvAddNewTaskToReadyList+0xbc>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <prvAddNewTaskToReadyList+0xb8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d110      	bne.n	80038e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038c4:	f000 fbe4 	bl	8004090 <prvInitialiseTaskLists>
 80038c8:	e00d      	b.n	80038e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ca:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <prvAddNewTaskToReadyList+0xc0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <prvAddNewTaskToReadyList+0xbc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d802      	bhi.n	80038e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <prvAddNewTaskToReadyList+0xbc>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038e6:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <prvAddNewTaskToReadyList+0xc4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3301      	adds	r3, #1
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <prvAddNewTaskToReadyList+0xc4>)
 80038ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <prvAddNewTaskToReadyList+0xc8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <prvAddNewTaskToReadyList+0xc8>)
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <prvAddNewTaskToReadyList+0xcc>)
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f7ff f90f 	bl	8002b3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800391e:	f001 f805 	bl	800492c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <prvAddNewTaskToReadyList+0xc0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <prvAddNewTaskToReadyList+0xbc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <prvAddNewTaskToReadyList+0xd0>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	200004b4 	.word	0x200004b4
 8003954:	200003b4 	.word	0x200003b4
 8003958:	200004c0 	.word	0x200004c0
 800395c:	200004d0 	.word	0x200004d0
 8003960:	200004bc 	.word	0x200004bc
 8003964:	200003b8 	.word	0x200003b8
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d018      	beq.n	80039b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <vTaskDelay+0x64>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <vTaskDelay+0x32>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800399e:	f000 f885 	bl	8003aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a2:	2100      	movs	r1, #0
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fdf7 	bl	8004598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039aa:	f000 f88d 	bl	8003ac8 <xTaskResumeAll>
 80039ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039b6:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <vTaskDelay+0x68>)
 80039b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200004dc 	.word	0x200004dc
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039e6:	463a      	mov	r2, r7
 80039e8:	1d39      	adds	r1, r7, #4
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fdfc 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	9202      	str	r2, [sp, #8]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2300      	movs	r3, #0
 8003a04:	460a      	mov	r2, r1
 8003a06:	4921      	ldr	r1, [pc, #132]	@ (8003a8c <vTaskStartScheduler+0xb4>)
 8003a08:	4821      	ldr	r0, [pc, #132]	@ (8003a90 <vTaskStartScheduler+0xb8>)
 8003a0a:	f7ff fdff 	bl	800360c <xTaskCreateStatic>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <vTaskStartScheduler+0xbc>)
 8003a12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a14:	4b1f      	ldr	r3, [pc, #124]	@ (8003a94 <vTaskStartScheduler+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e001      	b.n	8003a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d11b      	bne.n	8003a64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	613b      	str	r3, [r7, #16]
}
 8003a3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a40:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <vTaskStartScheduler+0xc0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	334c      	adds	r3, #76	@ 0x4c
 8003a46:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <vTaskStartScheduler+0xc4>)
 8003a48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <vTaskStartScheduler+0xc8>)
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a52:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <vTaskStartScheduler+0xcc>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <vTaskStartScheduler+0xd0>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a5e:	f000 fe8f 	bl	8004780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a62:	e00f      	b.n	8003a84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d10b      	bne.n	8003a84 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	60fb      	str	r3, [r7, #12]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <vTaskStartScheduler+0xa8>
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	08005ee8 	.word	0x08005ee8
 8003a90:	08004061 	.word	0x08004061
 8003a94:	200004d8 	.word	0x200004d8
 8003a98:	200003b4 	.word	0x200003b4
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	200004d4 	.word	0x200004d4
 8003aa4:	200004c0 	.word	0x200004c0
 8003aa8:	200004b8 	.word	0x200004b8

08003aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <vTaskSuspendAll+0x18>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a03      	ldr	r2, [pc, #12]	@ (8003ac4 <vTaskSuspendAll+0x18>)
 8003ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	200004dc 	.word	0x200004dc

08003ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ad6:	4b42      	ldr	r3, [pc, #264]	@ (8003be0 <xTaskResumeAll+0x118>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	603b      	str	r3, [r7, #0]
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003af6:	f000 fee7 	bl	80048c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003afa:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <xTaskResumeAll+0x118>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	4a37      	ldr	r2, [pc, #220]	@ (8003be0 <xTaskResumeAll+0x118>)
 8003b02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <xTaskResumeAll+0x118>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d161      	bne.n	8003bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b0c:	4b35      	ldr	r3, [pc, #212]	@ (8003be4 <xTaskResumeAll+0x11c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05d      	beq.n	8003bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b14:	e02e      	b.n	8003b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b16:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <xTaskResumeAll+0x120>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3318      	adds	r3, #24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f867 	bl	8002bf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f862 	bl	8002bf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	2201      	movs	r2, #1
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bec <xTaskResumeAll+0x124>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	4a2a      	ldr	r2, [pc, #168]	@ (8003bec <xTaskResumeAll+0x124>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a27      	ldr	r2, [pc, #156]	@ (8003bf0 <xTaskResumeAll+0x128>)
 8003b52:	441a      	add	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7fe ffee 	bl	8002b3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <xTaskResumeAll+0x12c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b6e:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <xTaskResumeAll+0x130>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b74:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <xTaskResumeAll+0x120>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1cc      	bne.n	8003b16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b82:	f000 fb29 	bl	80041d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b86:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <xTaskResumeAll+0x134>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b92:	f000 f837 	bl	8003c04 <xTaskIncrementTick>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b9c:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <xTaskResumeAll+0x130>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f1      	bne.n	8003b92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <xTaskResumeAll+0x134>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <xTaskResumeAll+0x130>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <xTaskResumeAll+0x138>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd0:	f000 feac 	bl	800492c <vPortExitCritical>

	return xAlreadyYielded;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200004dc 	.word	0x200004dc
 8003be4:	200004b4 	.word	0x200004b4
 8003be8:	20000474 	.word	0x20000474
 8003bec:	200004bc 	.word	0x200004bc
 8003bf0:	200003b8 	.word	0x200003b8
 8003bf4:	200003b4 	.word	0x200003b4
 8003bf8:	200004c8 	.word	0x200004c8
 8003bfc:	200004c4 	.word	0x200004c4
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003d4c <xTaskIncrementTick+0x148>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808f 	bne.w	8003d36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c18:	4b4d      	ldr	r3, [pc, #308]	@ (8003d50 <xTaskIncrementTick+0x14c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c20:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <xTaskIncrementTick+0x14c>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d121      	bne.n	8003c70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c2c:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <xTaskIncrementTick+0x150>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	603b      	str	r3, [r7, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xTaskIncrementTick+0x46>
 8003c4e:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <xTaskIncrementTick+0x150>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	4b40      	ldr	r3, [pc, #256]	@ (8003d58 <xTaskIncrementTick+0x154>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3e      	ldr	r2, [pc, #248]	@ (8003d54 <xTaskIncrementTick+0x150>)
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d58 <xTaskIncrementTick+0x154>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <xTaskIncrementTick+0x158>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	4a3c      	ldr	r2, [pc, #240]	@ (8003d5c <xTaskIncrementTick+0x158>)
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	f000 fab4 	bl	80041d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c70:	4b3b      	ldr	r3, [pc, #236]	@ (8003d60 <xTaskIncrementTick+0x15c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d348      	bcc.n	8003d0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7a:	4b36      	ldr	r3, [pc, #216]	@ (8003d54 <xTaskIncrementTick+0x150>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c84:	4b36      	ldr	r3, [pc, #216]	@ (8003d60 <xTaskIncrementTick+0x15c>)
 8003c86:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8a:	601a      	str	r2, [r3, #0]
					break;
 8003c8c:	e03e      	b.n	8003d0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <xTaskIncrementTick+0x150>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d203      	bcs.n	8003cae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8003d60 <xTaskIncrementTick+0x15c>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cac:	e02e      	b.n	8003d0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe ff9f 	bl	8002bf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe ff96 	bl	8002bf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <xTaskIncrementTick+0x160>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <xTaskIncrementTick+0x160>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d68 <xTaskIncrementTick+0x164>)
 8003cea:	441a      	add	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe ff22 	bl	8002b3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <xTaskIncrementTick+0x168>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3b9      	bcc.n	8003c7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0a:	e7b6      	b.n	8003c7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d0c:	4b17      	ldr	r3, [pc, #92]	@ (8003d6c <xTaskIncrementTick+0x168>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d12:	4915      	ldr	r1, [pc, #84]	@ (8003d68 <xTaskIncrementTick+0x164>)
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d901      	bls.n	8003d28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d28:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <xTaskIncrementTick+0x16c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e004      	b.n	8003d40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d36:	4b0f      	ldr	r3, [pc, #60]	@ (8003d74 <xTaskIncrementTick+0x170>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <xTaskIncrementTick+0x170>)
 8003d3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d40:	697b      	ldr	r3, [r7, #20]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200004dc 	.word	0x200004dc
 8003d50:	200004b8 	.word	0x200004b8
 8003d54:	2000046c 	.word	0x2000046c
 8003d58:	20000470 	.word	0x20000470
 8003d5c:	200004cc 	.word	0x200004cc
 8003d60:	200004d4 	.word	0x200004d4
 8003d64:	200004bc 	.word	0x200004bc
 8003d68:	200003b8 	.word	0x200003b8
 8003d6c:	200003b4 	.word	0x200003b4
 8003d70:	200004c8 	.word	0x200004c8
 8003d74:	200004c4 	.word	0x200004c4

08003d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e28 <vTaskSwitchContext+0xb0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d86:	4b29      	ldr	r3, [pc, #164]	@ (8003e2c <vTaskSwitchContext+0xb4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d8c:	e045      	b.n	8003e1a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003d8e:	4b27      	ldr	r3, [pc, #156]	@ (8003e2c <vTaskSwitchContext+0xb4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d94:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <vTaskSwitchContext+0xb8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f1c3 031f 	rsb	r3, r3, #31
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	4922      	ldr	r1, [pc, #136]	@ (8003e34 <vTaskSwitchContext+0xbc>)
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	607b      	str	r3, [r7, #4]
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	e7fd      	b.n	8003dd2 <vTaskSwitchContext+0x5a>
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <vTaskSwitchContext+0xbc>)
 8003de2:	4413      	add	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3308      	adds	r3, #8
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <vTaskSwitchContext+0x8e>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <vTaskSwitchContext+0xc0>)
 8003e0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e10:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <vTaskSwitchContext+0xc0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	334c      	adds	r3, #76	@ 0x4c
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <vTaskSwitchContext+0xc4>)
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	200004dc 	.word	0x200004dc
 8003e2c:	200004c8 	.word	0x200004c8
 8003e30:	200004bc 	.word	0x200004bc
 8003e34:	200003b8 	.word	0x200003b8
 8003e38:	200003b4 	.word	0x200003b4
 8003e3c:	20000010 	.word	0x20000010

08003e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <vTaskPlaceOnEventList+0x48>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fe fe87 	bl	8002b84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e76:	2101      	movs	r1, #1
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f000 fb8d 	bl	8004598 <prvAddCurrentTaskToDelayedList>
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200003b4 	.word	0x200003b4

08003e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	60fb      	str	r3, [r7, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fe99 	bl	8002bf6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <xTaskRemoveFromEventList+0xb0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d11c      	bne.n	8003f06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fe90 	bl	8002bf6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	4b18      	ldr	r3, [pc, #96]	@ (8003f40 <xTaskRemoveFromEventList+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <xTaskRemoveFromEventList+0xb4>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4a13      	ldr	r2, [pc, #76]	@ (8003f44 <xTaskRemoveFromEventList+0xb8>)
 8003ef6:	441a      	add	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7fe fe1c 	bl	8002b3c <vListInsertEnd>
 8003f04:	e005      	b.n	8003f12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	480e      	ldr	r0, [pc, #56]	@ (8003f48 <xTaskRemoveFromEventList+0xbc>)
 8003f0e:	f7fe fe15 	bl	8002b3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <xTaskRemoveFromEventList+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d905      	bls.n	8003f2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f24:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <xTaskRemoveFromEventList+0xc4>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e001      	b.n	8003f30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f30:	697b      	ldr	r3, [r7, #20]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200004dc 	.word	0x200004dc
 8003f40:	200004bc 	.word	0x200004bc
 8003f44:	200003b8 	.word	0x200003b8
 8003f48:	20000474 	.word	0x20000474
 8003f4c:	200003b4 	.word	0x200003b4
 8003f50:	200004c8 	.word	0x200004c8

08003f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <vTaskInternalSetTimeOutState+0x24>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <vTaskInternalSetTimeOutState+0x28>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	200004cc 	.word	0x200004cc
 8003f7c:	200004b8 	.word	0x200004b8

08003f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	613b      	str	r3, [r7, #16]
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60fb      	str	r3, [r7, #12]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003fc6:	f000 fc7f 	bl	80048c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <xTaskCheckForTimeOut+0xc0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d102      	bne.n	8003fea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e023      	b.n	8004032 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <xTaskCheckForTimeOut+0xc4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d007      	beq.n	8004006 <xTaskCheckForTimeOut+0x86>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	e015      	b.n	8004032 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	d20b      	bcs.n	8004028 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff99 	bl	8003f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e004      	b.n	8004032 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800402e:	2301      	movs	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004032:	f000 fc7b 	bl	800492c <vPortExitCritical>

	return xReturn;
 8004036:	69fb      	ldr	r3, [r7, #28]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200004b8 	.word	0x200004b8
 8004044:	200004cc 	.word	0x200004cc

08004048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <vTaskMissedYield+0x14>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	200004c8 	.word	0x200004c8

08004060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004068:	f000 f852 	bl	8004110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <prvIdleTask+0x28>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d9f9      	bls.n	8004068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <prvIdleTask+0x2c>)
 8004076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004084:	e7f0      	b.n	8004068 <prvIdleTask+0x8>
 8004086:	bf00      	nop
 8004088:	200003b8 	.word	0x200003b8
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	e00c      	b.n	80040b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <prvInitialiseTaskLists+0x60>)
 80040a8:	4413      	add	r3, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fd19 	bl	8002ae2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3301      	adds	r3, #1
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d9ef      	bls.n	800409c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040bc:	480d      	ldr	r0, [pc, #52]	@ (80040f4 <prvInitialiseTaskLists+0x64>)
 80040be:	f7fe fd10 	bl	8002ae2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040c2:	480d      	ldr	r0, [pc, #52]	@ (80040f8 <prvInitialiseTaskLists+0x68>)
 80040c4:	f7fe fd0d 	bl	8002ae2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040c8:	480c      	ldr	r0, [pc, #48]	@ (80040fc <prvInitialiseTaskLists+0x6c>)
 80040ca:	f7fe fd0a 	bl	8002ae2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040ce:	480c      	ldr	r0, [pc, #48]	@ (8004100 <prvInitialiseTaskLists+0x70>)
 80040d0:	f7fe fd07 	bl	8002ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040d4:	480b      	ldr	r0, [pc, #44]	@ (8004104 <prvInitialiseTaskLists+0x74>)
 80040d6:	f7fe fd04 	bl	8002ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <prvInitialiseTaskLists+0x78>)
 80040dc:	4a05      	ldr	r2, [pc, #20]	@ (80040f4 <prvInitialiseTaskLists+0x64>)
 80040de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <prvInitialiseTaskLists+0x7c>)
 80040e2:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <prvInitialiseTaskLists+0x68>)
 80040e4:	601a      	str	r2, [r3, #0]
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200003b8 	.word	0x200003b8
 80040f4:	20000444 	.word	0x20000444
 80040f8:	20000458 	.word	0x20000458
 80040fc:	20000474 	.word	0x20000474
 8004100:	20000488 	.word	0x20000488
 8004104:	200004a0 	.word	0x200004a0
 8004108:	2000046c 	.word	0x2000046c
 800410c:	20000470 	.word	0x20000470

08004110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004116:	e019      	b.n	800414c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004118:	f000 fbd6 	bl	80048c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <prvCheckTasksWaitingTermination+0x50>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fd64 	bl	8002bf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <prvCheckTasksWaitingTermination+0x54>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3b01      	subs	r3, #1
 8004134:	4a0b      	ldr	r2, [pc, #44]	@ (8004164 <prvCheckTasksWaitingTermination+0x54>)
 8004136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <prvCheckTasksWaitingTermination+0x58>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <prvCheckTasksWaitingTermination+0x58>)
 8004140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004142:	f000 fbf3 	bl	800492c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f810 	bl	800416c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <prvCheckTasksWaitingTermination+0x58>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e1      	bne.n	8004118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000488 	.word	0x20000488
 8004164:	200004b4 	.word	0x200004b4
 8004168:	2000049c 	.word	0x2000049c

0800416c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	334c      	adds	r3, #76	@ 0x4c
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f9d5 	bl	8005528 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd49 	bl	8004c24 <vPortFree>
				vPortFree( pxTCB );
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fd46 	bl	8004c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004198:	e019      	b.n	80041ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d103      	bne.n	80041ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fd3d 	bl	8004c24 <vPortFree>
	}
 80041aa:	e010      	b.n	80041ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d00b      	beq.n	80041ce <prvDeleteTCB+0x62>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60fb      	str	r3, [r7, #12]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <prvDeleteTCB+0x5e>
	}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041de:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <prvResetNextTaskUnblockTime+0x38>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <prvResetNextTaskUnblockTime+0x3c>)
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041f0:	e008      	b.n	8004204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <prvResetNextTaskUnblockTime+0x38>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <prvResetNextTaskUnblockTime+0x3c>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	2000046c 	.word	0x2000046c
 8004214:	200004d4 	.word	0x200004d4

08004218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800421e:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <xTaskGetSchedulerState+0x34>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004226:	2301      	movs	r3, #1
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	e008      	b.n	800423e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422c:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <xTaskGetSchedulerState+0x38>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004234:	2302      	movs	r3, #2
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	e001      	b.n	800423e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800423e:	687b      	ldr	r3, [r7, #4]
	}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	200004c0 	.word	0x200004c0
 8004250:	200004dc 	.word	0x200004dc

08004254 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d05e      	beq.n	8004328 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <xTaskPriorityInherit+0xe0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	429a      	cmp	r2, r3
 8004276:	d24e      	bcs.n	8004316 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db06      	blt.n	800428e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004280:	4b2c      	ldr	r3, [pc, #176]	@ (8004334 <xTaskPriorityInherit+0xe0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	f1c3 0207 	rsb	r2, r3, #7
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6959      	ldr	r1, [r3, #20]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <xTaskPriorityInherit+0xe4>)
 80042a0:	4413      	add	r3, r2
 80042a2:	4299      	cmp	r1, r3
 80042a4:	d12f      	bne.n	8004306 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fca3 	bl	8002bf6 <uxListRemove>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43da      	mvns	r2, r3
 80042c2:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <xTaskPriorityInherit+0xe8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4013      	ands	r3, r2
 80042c8:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <xTaskPriorityInherit+0xe8>)
 80042ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042cc:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <xTaskPriorityInherit+0xe0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	2201      	movs	r2, #1
 80042dc:	409a      	lsls	r2, r3
 80042de:	4b17      	ldr	r3, [pc, #92]	@ (800433c <xTaskPriorityInherit+0xe8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	4a15      	ldr	r2, [pc, #84]	@ (800433c <xTaskPriorityInherit+0xe8>)
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <xTaskPriorityInherit+0xe4>)
 80042f6:	441a      	add	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7fe fc1c 	bl	8002b3c <vListInsertEnd>
 8004304:	e004      	b.n	8004310 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <xTaskPriorityInherit+0xe0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e008      	b.n	8004328 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <xTaskPriorityInherit+0xe0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	429a      	cmp	r2, r3
 8004322:	d201      	bcs.n	8004328 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004328:	68fb      	ldr	r3, [r7, #12]
	}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200003b4 	.word	0x200003b4
 8004338:	200003b8 	.word	0x200003b8
 800433c:	200004bc 	.word	0x200004bc

08004340 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d070      	beq.n	8004438 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004356:	4b3b      	ldr	r3, [pc, #236]	@ (8004444 <xTaskPriorityDisinherit+0x104>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d00b      	beq.n	8004378 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	60fb      	str	r3, [r7, #12]
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60bb      	str	r3, [r7, #8]
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439c:	1e5a      	subs	r2, r3, #1
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d044      	beq.n	8004438 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d140      	bne.n	8004438 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fc1b 	bl	8002bf6 <uxListRemove>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d115      	bne.n	80043f2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ca:	491f      	ldr	r1, [pc, #124]	@ (8004448 <xTaskPriorityDisinherit+0x108>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xTaskPriorityDisinherit+0xb2>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	2201      	movs	r2, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43da      	mvns	r2, r3
 80043e8:	4b18      	ldr	r3, [pc, #96]	@ (800444c <xTaskPriorityDisinherit+0x10c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4013      	ands	r3, r2
 80043ee:	4a17      	ldr	r2, [pc, #92]	@ (800444c <xTaskPriorityDisinherit+0x10c>)
 80043f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	f1c3 0207 	rsb	r2, r3, #7
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	2201      	movs	r2, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <xTaskPriorityDisinherit+0x10c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <xTaskPriorityDisinherit+0x10c>)
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4a08      	ldr	r2, [pc, #32]	@ (8004448 <xTaskPriorityDisinherit+0x108>)
 8004426:	441a      	add	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7fe fb84 	bl	8002b3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004438:	697b      	ldr	r3, [r7, #20]
	}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200003b4 	.word	0x200003b4
 8004448:	200003b8 	.word	0x200003b8
 800444c:	200004bc 	.word	0x200004bc

08004450 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d079      	beq.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d902      	bls.n	8004498 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e002      	b.n	800449e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d059      	beq.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d154      	bne.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d10b      	bne.n	80044d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60bb      	str	r3, [r7, #8]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db04      	blt.n	80044f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f1c3 0207 	rsb	r2, r3, #7
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004502:	4413      	add	r3, r2
 8004504:	4299      	cmp	r1, r3
 8004506:	d129      	bne.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe fb72 	bl	8002bf6 <uxListRemove>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	2201      	movs	r2, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	4b11      	ldr	r3, [pc, #68]	@ (800456c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4013      	ands	r3, r2
 800452a:	4a10      	ldr	r2, [pc, #64]	@ (800456c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800452c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	4a0b      	ldr	r2, [pc, #44]	@ (800456c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4a06      	ldr	r2, [pc, #24]	@ (8004568 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800454e:	441a      	add	r2, r3
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7fe faf0 	bl	8002b3c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800455c:	bf00      	nop
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	200003b4 	.word	0x200003b4
 8004568:	200003b8 	.word	0x200003b8
 800456c:	200004bc 	.word	0x200004bc

08004570 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004574:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004582:	3201      	adds	r2, #1
 8004584:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004586:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
	}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	200003b4 	.word	0x200003b4

08004598 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fb21 	bl	8002bf6 <uxListRemove>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045ba:	4b24      	ldr	r3, [pc, #144]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	2201      	movs	r2, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	4b21      	ldr	r3, [pc, #132]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4013      	ands	r3, r2
 80045ce:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d10a      	bne.n	80045f0 <prvAddCurrentTaskToDelayedList+0x58>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	481a      	ldr	r0, [pc, #104]	@ (8004654 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045ea:	f7fe faa7 	bl	8002b3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ee:	e026      	b.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045f8:	4b14      	ldr	r3, [pc, #80]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d209      	bcs.n	800461c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <prvAddCurrentTaskToDelayedList+0xc0>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fe fab5 	bl	8002b84 <vListInsert>
}
 800461a:	e010      	b.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <prvAddCurrentTaskToDelayedList+0xc4>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe faab 	bl	8002b84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d202      	bcs.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <prvAddCurrentTaskToDelayedList+0xc8>)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6013      	str	r3, [r2, #0]
}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200004b8 	.word	0x200004b8
 800464c:	200003b4 	.word	0x200003b4
 8004650:	200004bc 	.word	0x200004bc
 8004654:	200004a0 	.word	0x200004a0
 8004658:	20000470 	.word	0x20000470
 800465c:	2000046c 	.word	0x2000046c
 8004660:	200004d4 	.word	0x200004d4

08004664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b04      	subs	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800467c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0201 	bic.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004694:	4a0c      	ldr	r2, [pc, #48]	@ (80046c8 <pxPortInitialiseStack+0x64>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b14      	subs	r3, #20
 800469e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f06f 0202 	mvn.w	r2, #2
 80046b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b20      	subs	r3, #32
 80046b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	080046cd 	.word	0x080046cd

080046cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046d6:	4b13      	ldr	r3, [pc, #76]	@ (8004724 <prvTaskExitError+0x58>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d00b      	beq.n	80046f8 <prvTaskExitError+0x2c>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <prvTaskExitError+0x28>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60bb      	str	r3, [r7, #8]
}
 800470a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800470c:	bf00      	nop
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0fc      	beq.n	800470e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c
	...

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004758:	4808      	ldr	r0, [pc, #32]	@ (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800477a:	bf00      	nop
 800477c:	e000ed08 	.word	0xe000ed08

08004780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004786:	4b47      	ldr	r3, [pc, #284]	@ (80048a4 <xPortStartScheduler+0x124>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <xPortStartScheduler+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10b      	bne.n	80047a8 <xPortStartScheduler+0x28>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047a8:	4b3e      	ldr	r3, [pc, #248]	@ (80048a4 <xPortStartScheduler+0x124>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3f      	ldr	r2, [pc, #252]	@ (80048ac <xPortStartScheduler+0x12c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10b      	bne.n	80047ca <xPortStartScheduler+0x4a>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	613b      	str	r3, [r7, #16]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ca:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <xPortStartScheduler+0x130>)
 80047cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	22ff      	movs	r2, #255	@ 0xff
 80047da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <xPortStartScheduler+0x134>)
 80047f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047f2:	4b31      	ldr	r3, [pc, #196]	@ (80048b8 <xPortStartScheduler+0x138>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f8:	e009      	b.n	800480e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80047fa:	4b2f      	ldr	r3, [pc, #188]	@ (80048b8 <xPortStartScheduler+0x138>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	4a2d      	ldr	r2, [pc, #180]	@ (80048b8 <xPortStartScheduler+0x138>)
 8004802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b80      	cmp	r3, #128	@ 0x80
 8004818:	d0ef      	beq.n	80047fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800481a:	4b27      	ldr	r3, [pc, #156]	@ (80048b8 <xPortStartScheduler+0x138>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1c3 0307 	rsb	r3, r3, #7
 8004822:	2b04      	cmp	r3, #4
 8004824:	d00b      	beq.n	800483e <xPortStartScheduler+0xbe>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800483e:	4b1e      	ldr	r3, [pc, #120]	@ (80048b8 <xPortStartScheduler+0x138>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <xPortStartScheduler+0x138>)
 8004846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004848:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <xPortStartScheduler+0x138>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <xPortStartScheduler+0x138>)
 8004852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <xPortStartScheduler+0x13c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <xPortStartScheduler+0x13c>)
 8004862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004868:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <xPortStartScheduler+0x13c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <xPortStartScheduler+0x13c>)
 800486e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004874:	f000 f8da 	bl	8004a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004878:	4b11      	ldr	r3, [pc, #68]	@ (80048c0 <xPortStartScheduler+0x140>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800487e:	f000 f8f9 	bl	8004a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004882:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <xPortStartScheduler+0x144>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a0f      	ldr	r2, [pc, #60]	@ (80048c4 <xPortStartScheduler+0x144>)
 8004888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800488c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800488e:	f7ff ff63 	bl	8004758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004892:	f7ff fa71 	bl	8003d78 <vTaskSwitchContext>
	prvTaskExitError();
 8004896:	f7ff ff19 	bl	80046cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	e000ed00 	.word	0xe000ed00
 80048a8:	410fc271 	.word	0x410fc271
 80048ac:	410fc270 	.word	0x410fc270
 80048b0:	e000e400 	.word	0xe000e400
 80048b4:	200004e0 	.word	0x200004e0
 80048b8:	200004e4 	.word	0x200004e4
 80048bc:	e000ed20 	.word	0xe000ed20
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	e000ef34 	.word	0xe000ef34

080048c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
}
 80048e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <vPortEnterCritical+0x5c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004924 <vPortEnterCritical+0x5c>)
 80048ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <vPortEnterCritical+0x5c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d110      	bne.n	8004916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <vPortEnterCritical+0x60>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <vPortEnterCritical+0x4e>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	603b      	str	r3, [r7, #0]
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	e7fd      	b.n	8004912 <vPortEnterCritical+0x4a>
	}
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004932:	4b12      	ldr	r3, [pc, #72]	@ (800497c <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <vPortExitCritical+0x26>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <vPortExitCritical+0x50>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a08      	ldr	r2, [pc, #32]	@ (800497c <vPortExitCritical+0x50>)
 800495a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <vPortExitCritical+0x50>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <vPortExitCritical+0x44>
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800496e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000000c 	.word	0x2000000c

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f01e 0f10 	tst.w	lr, #16
 8004990:	bf08      	it	eq
 8004992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80049a4:	f380 8811 	msr	BASEPRI, r0
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f7ff f9e2 	bl	8003d78 <vTaskSwitchContext>
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f380 8811 	msr	BASEPRI, r0
 80049bc:	bc09      	pop	{r0, r3}
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	6808      	ldr	r0, [r1, #0]
 80049c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c6:	f01e 0f10 	tst.w	lr, #16
 80049ca:	bf08      	it	eq
 80049cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049d0:	f380 8809 	msr	PSP, r0
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst>:
 80049e0:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a02:	f7ff f8ff 	bl	8003c04 <xTaskIncrementTick>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <SysTick_Handler+0x40>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <vPortSetupTimerInterrupt+0x38>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <vPortSetupTimerInterrupt+0x3c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <vPortSetupTimerInterrupt+0x40>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	4a09      	ldr	r2, [pc, #36]	@ (8004a70 <vPortSetupTimerInterrupt+0x44>)
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a4e:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e010 	.word	0xe000e010
 8004a64:	e000e018 	.word	0xe000e018
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	10624dd3 	.word	0x10624dd3
 8004a70:	e000e014 	.word	0xe000e014

08004a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a84 <vPortEnableVFP+0x10>
 8004a78:	6801      	ldr	r1, [r0, #0]
 8004a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a7e:	6001      	str	r1, [r0, #0]
 8004a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed88 	.word	0xe000ed88

08004a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a94:	f7ff f80a 	bl	8003aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a98:	4b5c      	ldr	r3, [pc, #368]	@ (8004c0c <pvPortMalloc+0x184>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004aa0:	f000 f924 	bl	8004cec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <pvPortMalloc+0x188>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 8095 	bne.w	8004bdc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01e      	beq.n	8004af6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ab8:	2208      	movs	r2, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d015      	beq.n	8004af6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <pvPortMalloc+0x6e>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	617b      	str	r3, [r7, #20]
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	e7fd      	b.n	8004af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d06f      	beq.n	8004bdc <pvPortMalloc+0x154>
 8004afc:	4b45      	ldr	r3, [pc, #276]	@ (8004c14 <pvPortMalloc+0x18c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d86a      	bhi.n	8004bdc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b06:	4b44      	ldr	r3, [pc, #272]	@ (8004c18 <pvPortMalloc+0x190>)
 8004b08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b0a:	4b43      	ldr	r3, [pc, #268]	@ (8004c18 <pvPortMalloc+0x190>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b10:	e004      	b.n	8004b1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d903      	bls.n	8004b2e <pvPortMalloc+0xa6>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f1      	bne.n	8004b12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b2e:	4b37      	ldr	r3, [pc, #220]	@ (8004c0c <pvPortMalloc+0x184>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d051      	beq.n	8004bdc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	4413      	add	r3, r2
 8004b40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	2308      	movs	r3, #8
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d920      	bls.n	8004b9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4413      	add	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <pvPortMalloc+0xfc>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	613b      	str	r3, [r7, #16]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b96:	69b8      	ldr	r0, [r7, #24]
 8004b98:	f000 f90a 	bl	8004db0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c14 <pvPortMalloc+0x18c>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <pvPortMalloc+0x18c>)
 8004ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004baa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <pvPortMalloc+0x18c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <pvPortMalloc+0x194>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d203      	bcs.n	8004bbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bb6:	4b17      	ldr	r3, [pc, #92]	@ (8004c14 <pvPortMalloc+0x18c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <pvPortMalloc+0x194>)
 8004bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <pvPortMalloc+0x188>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <pvPortMalloc+0x198>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	4a11      	ldr	r2, [pc, #68]	@ (8004c20 <pvPortMalloc+0x198>)
 8004bda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bdc:	f7fe ff74 	bl	8003ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <pvPortMalloc+0x17a>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60fb      	str	r3, [r7, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	e7fd      	b.n	8004bfe <pvPortMalloc+0x176>
	return pvReturn;
 8004c02:	69fb      	ldr	r3, [r7, #28]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	@ 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	200040f0 	.word	0x200040f0
 8004c10:	20004104 	.word	0x20004104
 8004c14:	200040f4 	.word	0x200040f4
 8004c18:	200040e8 	.word	0x200040e8
 8004c1c:	200040f8 	.word	0x200040f8
 8004c20:	200040fc 	.word	0x200040fc

08004c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04f      	beq.n	8004cd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c36:	2308      	movs	r3, #8
 8004c38:	425b      	negs	r3, r3
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b25      	ldr	r3, [pc, #148]	@ (8004ce0 <vPortFree+0xbc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <vPortFree+0x46>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <vPortFree+0x66>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60bb      	str	r3, [r7, #8]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ce0 <vPortFree+0xbc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11a      	bne.n	8004cd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <vPortFree+0xbc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	401a      	ands	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cb0:	f7fe fefc 	bl	8003aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <vPortFree+0xc0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <vPortFree+0xc0>)
 8004cc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cc2:	6938      	ldr	r0, [r7, #16]
 8004cc4:	f000 f874 	bl	8004db0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004cc8:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <vPortFree+0xc4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a06      	ldr	r2, [pc, #24]	@ (8004ce8 <vPortFree+0xc4>)
 8004cd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004cd2:	f7fe fef9 	bl	8003ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cd6:	bf00      	nop
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20004104 	.word	0x20004104
 8004ce4:	200040f4 	.word	0x200040f4
 8004ce8:	20004100 	.word	0x20004100

08004cec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cf2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004cf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cf8:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <prvHeapInit+0xac>)
 8004cfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3307      	adds	r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d98 <prvHeapInit+0xac>)
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d24:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <prvHeapInit+0xb0>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <prvHeapInit+0xb0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d38:	2208      	movs	r2, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <prvHeapInit+0xb4>)
 8004d4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d4e:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <prvHeapInit+0xb4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <prvHeapInit+0xb4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <prvHeapInit+0xb4>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <prvHeapInit+0xb8>)
 8004d7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <prvHeapInit+0xbc>)
 8004d82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d84:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <prvHeapInit+0xc0>)
 8004d86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	200004e8 	.word	0x200004e8
 8004d9c:	200040e8 	.word	0x200040e8
 8004da0:	200040f0 	.word	0x200040f0
 8004da4:	200040f8 	.word	0x200040f8
 8004da8:	200040f4 	.word	0x200040f4
 8004dac:	20004104 	.word	0x20004104

08004db0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004db8:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <prvInsertBlockIntoFreeList+0xac>)
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <prvInsertBlockIntoFreeList+0x14>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d8f7      	bhi.n	8004dbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d108      	bne.n	8004df2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d118      	bne.n	8004e38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <prvInsertBlockIntoFreeList+0xb0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d00d      	beq.n	8004e2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	441a      	add	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e008      	b.n	8004e40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <prvInsertBlockIntoFreeList+0xb0>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e003      	b.n	8004e40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d002      	beq.n	8004e4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	200040e8 	.word	0x200040e8
 8004e60:	200040f0 	.word	0x200040f0

08004e64 <app_init>:
SemaphoreHandle_t sem_led_red;
SemaphoreHandle_t sem_led_green;
SemaphoreHandle_t sem_led_blue;

void app_init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	@ 0x38
 8004e68:	af02      	add	r7, sp, #8
  /* Crear cola UART y tarea UART */
  uart_queue = xQueueCreate(5, sizeof(char[64]));
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2140      	movs	r1, #64	@ 0x40
 8004e6e:	2005      	movs	r0, #5
 8004e70:	f7fd ff56 	bl	8002d20 <xQueueGenericCreate>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a8f      	ldr	r2, [pc, #572]	@ (80050b4 <app_init+0x250>)
 8004e78:	6013      	str	r3, [r2, #0]
  configASSERT(uart_queue != NULL);
 8004e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80050b4 <app_init+0x250>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <app_init+0x36>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <app_init+0x32>
  if (uart_queue == NULL) {
 8004e9a:	4b86      	ldr	r3, [pc, #536]	@ (80050b4 <app_init+0x250>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <app_init+0x42>
      // Fallback directo si falla
      while (1);
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <app_init+0x3e>
  }

  xTaskCreate(task_uart, "task_uart", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2280      	movs	r2, #128	@ 0x80
 8004eb2:	4981      	ldr	r1, [pc, #516]	@ (80050b8 <app_init+0x254>)
 8004eb4:	4881      	ldr	r0, [pc, #516]	@ (80050bc <app_init+0x258>)
 8004eb6:	f7fe fc09 	bl	80036cc <xTaskCreate>
  xTaskCreate(task_button, "Button", 128, NULL, osPriorityNormal, NULL);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2280      	movs	r2, #128	@ 0x80
 8004ec6:	497e      	ldr	r1, [pc, #504]	@ (80050c0 <app_init+0x25c>)
 8004ec8:	487e      	ldr	r0, [pc, #504]	@ (80050c4 <app_init+0x260>)
 8004eca:	f7fe fbff 	bl	80036cc <xTaskCreate>


  /* Enviar mensaje por UART */
  task_uart_app("app init\r\n");
 8004ece:	487e      	ldr	r0, [pc, #504]	@ (80050c8 <app_init+0x264>)
 8004ed0:	f000 fa52 	bl	8005378 <task_uart_app>

  /* Crear cola de eventos del botón */
  button_event_queue = xQueueCreate(1, sizeof(button_type_t));
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f7fd ff21 	bl	8002d20 <xQueueGenericCreate>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4a7a      	ldr	r2, [pc, #488]	@ (80050cc <app_init+0x268>)
 8004ee2:	6013      	str	r3, [r2, #0]
  configASSERT(button_event_queue != NULL);
 8004ee4:	4b79      	ldr	r3, [pc, #484]	@ (80050cc <app_init+0x268>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <app_init+0xa0>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <app_init+0x9c>
  if (button_event_queue == NULL) {
 8004f04:	4b71      	ldr	r3, [pc, #452]	@ (80050cc <app_init+0x268>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <app_init+0xb2>
      task_uart_app("Error: no se pudo crear la cola de botón\r\n");
 8004f0c:	4870      	ldr	r0, [pc, #448]	@ (80050d0 <app_init+0x26c>)
 8004f0e:	f000 fa33 	bl	8005378 <task_uart_app>
      while (1);
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <app_init+0xae>
  }

  /* Crear semáforos para cada LED */
  sem_led_red = xSemaphoreCreateBinary();
 8004f16:	2203      	movs	r2, #3
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7fd ff00 	bl	8002d20 <xQueueGenericCreate>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a6c      	ldr	r2, [pc, #432]	@ (80050d4 <app_init+0x270>)
 8004f24:	6013      	str	r3, [r2, #0]
  sem_led_green = xSemaphoreCreateBinary();
 8004f26:	2203      	movs	r2, #3
 8004f28:	2100      	movs	r1, #0
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f7fd fef8 	bl	8002d20 <xQueueGenericCreate>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a69      	ldr	r2, [pc, #420]	@ (80050d8 <app_init+0x274>)
 8004f34:	6013      	str	r3, [r2, #0]
  sem_led_blue = xSemaphoreCreateBinary();
 8004f36:	2203      	movs	r2, #3
 8004f38:	2100      	movs	r1, #0
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7fd fef0 	bl	8002d20 <xQueueGenericCreate>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a66      	ldr	r2, [pc, #408]	@ (80050dc <app_init+0x278>)
 8004f44:	6013      	str	r3, [r2, #0]

  configASSERT(sem_led_red != NULL);
 8004f46:	4b63      	ldr	r3, [pc, #396]	@ (80050d4 <app_init+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <app_init+0x102>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	623b      	str	r3, [r7, #32]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <app_init+0xfe>
  configASSERT(sem_led_green != NULL);
 8004f66:	4b5c      	ldr	r3, [pc, #368]	@ (80050d8 <app_init+0x274>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <app_init+0x122>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	61fb      	str	r3, [r7, #28]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <app_init+0x11e>
  configASSERT(sem_led_blue != NULL);
 8004f86:	4b55      	ldr	r3, [pc, #340]	@ (80050dc <app_init+0x278>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <app_init+0x142>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	61bb      	str	r3, [r7, #24]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <app_init+0x13e>

  /* Crear tareas del sistema */
  BaseType_t status;

  status = xTaskCreate(task_button, "task_button", 128, NULL, tskIDLE_PRIORITY + 2, NULL);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	2302      	movs	r3, #2
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2280      	movs	r2, #128	@ 0x80
 8004fb2:	494b      	ldr	r1, [pc, #300]	@ (80050e0 <app_init+0x27c>)
 8004fb4:	4843      	ldr	r0, [pc, #268]	@ (80050c4 <app_init+0x260>)
 8004fb6:	f7fe fb89 	bl	80036cc <xTaskCreate>
 8004fba:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d00b      	beq.n	8004fda <app_init+0x176>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	617b      	str	r3, [r7, #20]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <app_init+0x172>

  status = xTaskCreate(task_ui, "task_ui", 128, NULL, tskIDLE_PRIORITY + 2, NULL);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2302      	movs	r3, #2
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	493f      	ldr	r1, [pc, #252]	@ (80050e4 <app_init+0x280>)
 8004fe8:	483f      	ldr	r0, [pc, #252]	@ (80050e8 <app_init+0x284>)
 8004fea:	f7fe fb6f 	bl	80036cc <xTaskCreate>
 8004fee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d00b      	beq.n	800500e <app_init+0x1aa>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	613b      	str	r3, [r7, #16]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <app_init+0x1a6>

  status = xTaskCreate(task_led_red, "task_led_red", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
 800500e:	2300      	movs	r3, #0
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	2301      	movs	r3, #1
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2300      	movs	r3, #0
 8005018:	2280      	movs	r2, #128	@ 0x80
 800501a:	4934      	ldr	r1, [pc, #208]	@ (80050ec <app_init+0x288>)
 800501c:	4834      	ldr	r0, [pc, #208]	@ (80050f0 <app_init+0x28c>)
 800501e:	f7fe fb55 	bl	80036cc <xTaskCreate>
 8005022:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8005024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d00b      	beq.n	8005042 <app_init+0x1de>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	60fb      	str	r3, [r7, #12]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <app_init+0x1da>

  status = xTaskCreate(task_led_green, "task_led_green", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8005042:	2300      	movs	r3, #0
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	2301      	movs	r3, #1
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2300      	movs	r3, #0
 800504c:	2280      	movs	r2, #128	@ 0x80
 800504e:	4929      	ldr	r1, [pc, #164]	@ (80050f4 <app_init+0x290>)
 8005050:	4829      	ldr	r0, [pc, #164]	@ (80050f8 <app_init+0x294>)
 8005052:	f7fe fb3b 	bl	80036cc <xTaskCreate>
 8005056:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d00b      	beq.n	8005076 <app_init+0x212>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60bb      	str	r3, [r7, #8]
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	e7fd      	b.n	8005072 <app_init+0x20e>

  status = xTaskCreate(task_led_blue, "task_led_blue", 128, NULL, tskIDLE_PRIORITY + 1, NULL);
 8005076:	2300      	movs	r3, #0
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	2301      	movs	r3, #1
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	2280      	movs	r2, #128	@ 0x80
 8005082:	491e      	ldr	r1, [pc, #120]	@ (80050fc <app_init+0x298>)
 8005084:	481e      	ldr	r0, [pc, #120]	@ (8005100 <app_init+0x29c>)
 8005086:	f7fe fb21 	bl	80036cc <xTaskCreate>
 800508a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00b      	beq.n	80050aa <app_init+0x246>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	607b      	str	r3, [r7, #4]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <app_init+0x242>
}
 80050aa:	bf00      	nop
 80050ac:	3730      	adds	r7, #48	@ 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000410c 	.word	0x2000410c
 80050b8:	08005ef0 	.word	0x08005ef0
 80050bc:	08005331 	.word	0x08005331
 80050c0:	08005efc 	.word	0x08005efc
 80050c4:	080051bd 	.word	0x080051bd
 80050c8:	08005f04 	.word	0x08005f04
 80050cc:	20004108 	.word	0x20004108
 80050d0:	08005f10 	.word	0x08005f10
 80050d4:	20004110 	.word	0x20004110
 80050d8:	20004114 	.word	0x20004114
 80050dc:	20004118 	.word	0x20004118
 80050e0:	08005f3c 	.word	0x08005f3c
 80050e4:	08005f48 	.word	0x08005f48
 80050e8:	0800540d 	.word	0x0800540d
 80050ec:	08005f50 	.word	0x08005f50
 80050f0:	080052ed 	.word	0x080052ed
 80050f4:	08005f60 	.word	0x08005f60
 80050f8:	080052a9 	.word	0x080052a9
 80050fc:	08005f70 	.word	0x08005f70
 8005100:	08005261 	.word	0x08005261

08005104 <button_init_>:

static button_info_t button_info;

/* Inicializa el estado del botón */
static void button_init_(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  button_info.counter = 0;
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <button_init_+0x1c>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  button_info.state = BUTTON_STATE_IDLE;
 800510e:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <button_init_+0x1c>)
 8005110:	2200      	movs	r2, #0
 8005112:	711a      	strb	r2, [r3, #4]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	2000411c 	.word	0x2000411c

08005124 <button_process_state_>:

/* Clasifica la pulsación */
static button_event_t button_process_state_(bool is_pressed)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  button_event_t event = { BUTTON_TYPE_NONE, 0 };
 8005130:	2300      	movs	r3, #0
 8005132:	723b      	strb	r3, [r7, #8]
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  if (is_pressed)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <button_process_state_+0x30>
  {
	uart_enviar_estado_boton();
 800513e:	f000 f93b 	bl	80053b8 <uart_enviar_estado_boton>
    button_info.counter += TASK_PERIOD_MS_;
 8005142:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <button_process_state_+0x94>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3332      	adds	r3, #50	@ 0x32
 8005148:	4a1b      	ldr	r2, [pc, #108]	@ (80051b8 <button_process_state_+0x94>)
 800514a:	6013      	str	r3, [r2, #0]
    button_info.state = BUTTON_STATE_PRESSED;
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <button_process_state_+0x94>)
 800514e:	2201      	movs	r2, #1
 8005150:	711a      	strb	r2, [r3, #4]
 8005152:	e024      	b.n	800519e <button_process_state_+0x7a>
  }
  else
  {
    if (button_info.state == BUTTON_STATE_PRESSED)
 8005154:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <button_process_state_+0x94>)
 8005156:	791b      	ldrb	r3, [r3, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d120      	bne.n	800519e <button_process_state_+0x7a>
    {
      // Se soltó el botón (flanco de bajada)
      event.duration = button_info.counter;
 800515c:	4b16      	ldr	r3, [pc, #88]	@ (80051b8 <button_process_state_+0x94>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]

      if (button_info.counter >= BUTTON_LONG_TIMEOUT_)
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <button_process_state_+0x94>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800516a:	d302      	bcc.n	8005172 <button_process_state_+0x4e>
        event.type = BUTTON_TYPE_LONG;
 800516c:	2303      	movs	r3, #3
 800516e:	723b      	strb	r3, [r7, #8]
 8005170:	e00d      	b.n	800518e <button_process_state_+0x6a>
      else if (button_info.counter >= BUTTON_SHORT_TIMEOUT_)
 8005172:	4b11      	ldr	r3, [pc, #68]	@ (80051b8 <button_process_state_+0x94>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800517a:	d302      	bcc.n	8005182 <button_process_state_+0x5e>
        event.type = BUTTON_TYPE_SHORT;
 800517c:	2302      	movs	r3, #2
 800517e:	723b      	strb	r3, [r7, #8]
 8005180:	e005      	b.n	800518e <button_process_state_+0x6a>
      else if (button_info.counter >= BUTTON_PULSE_TIMEOUT_)
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <button_process_state_+0x94>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2bc7      	cmp	r3, #199	@ 0xc7
 8005188:	d901      	bls.n	800518e <button_process_state_+0x6a>
        event.type = BUTTON_TYPE_PULSE;
 800518a:	2301      	movs	r3, #1
 800518c:	723b      	strb	r3, [r7, #8]

      // Reset
      button_info.counter = 0;
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <button_process_state_+0x94>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
      button_info.state = BUTTON_STATE_IDLE;
 8005194:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <button_process_state_+0x94>)
 8005196:	2200      	movs	r2, #0
 8005198:	711a      	strb	r2, [r3, #4]
      uart_enviar_estado_boton();
 800519a:	f000 f90d 	bl	80053b8 <uart_enviar_estado_boton>
    }
  }

  return event;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	461a      	mov	r2, r3
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000411c 	.word	0x2000411c

080051bc <task_button>:

/* Tarea del botón (modo polling) */
void task_button(void* argument)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b096      	sub	sp, #88	@ 0x58
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  (void) argument;

  button_init_();
 80051c4:	f7ff ff9e 	bl	8005104 <button_init_>

  while (1)
  {
    GPIO_PinState state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 80051c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051cc:	481e      	ldr	r0, [pc, #120]	@ (8005248 <task_button+0x8c>)
 80051ce:	f7fb ff8d 	bl	80010ec <HAL_GPIO_ReadPin>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    bool is_pressed = (state == GPIO_PIN_RESET);
 80051d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    button_event_t event = button_process_state_(is_pressed);
 80051e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80051ec:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff ff96 	bl	8005124 <button_process_state_>

    if (event.type != BUTTON_TYPE_NONE)
 80051f8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01f      	beq.n	8005240 <task_button+0x84>
    {
      // Mostrar mensaje por UART

      char msg[64];
      sprintf(msg, "Boton: %s - Tiempo: %lu ms\r\n",
              (event.type == BUTTON_TYPE_LONG)  ? "LARGO" :
 8005200:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
      sprintf(msg, "Boton: %s - Tiempo: %lu ms\r\n",
 8005204:	2b03      	cmp	r3, #3
 8005206:	d007      	beq.n	8005218 <task_button+0x5c>
              (event.type == BUTTON_TYPE_SHORT) ? "CORTO" : "PULSO",
 8005208:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800520c:	2b02      	cmp	r3, #2
 800520e:	d101      	bne.n	8005214 <task_button+0x58>
 8005210:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <task_button+0x90>)
 8005212:	e002      	b.n	800521a <task_button+0x5e>
 8005214:	4a0e      	ldr	r2, [pc, #56]	@ (8005250 <task_button+0x94>)
 8005216:	e000      	b.n	800521a <task_button+0x5e>
      sprintf(msg, "Boton: %s - Tiempo: %lu ms\r\n",
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <task_button+0x98>)
 800521a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521c:	f107 000c 	add.w	r0, r7, #12
 8005220:	490d      	ldr	r1, [pc, #52]	@ (8005258 <task_button+0x9c>)
 8005222:	f000 f943 	bl	80054ac <siprintf>
              event.duration);
      task_uart_app(msg);
 8005226:	f107 030c 	add.w	r3, r7, #12
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f8a4 	bl	8005378 <task_uart_app>

      // Enviar tipo de evento a la cola
      xQueueSend(button_event_queue, &event.type, 0);
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <task_button+0xa0>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005238:	2300      	movs	r3, #0
 800523a:	2200      	movs	r2, #0
 800523c:	f7fd fdca 	bl	8002dd4 <xQueueGenericSend>
    }

    vTaskDelay(pdMS_TO_TICKS(TASK_PERIOD_MS_));
 8005240:	2032      	movs	r0, #50	@ 0x32
 8005242:	f7fe fb93 	bl	800396c <vTaskDelay>
  {
 8005246:	e7bf      	b.n	80051c8 <task_button+0xc>
 8005248:	40020800 	.word	0x40020800
 800524c:	08005f80 	.word	0x08005f80
 8005250:	08005f88 	.word	0x08005f88
 8005254:	08005f90 	.word	0x08005f90
 8005258:	08005f98 	.word	0x08005f98
 800525c:	20004108 	.word	0x20004108

08005260 <task_led_blue>:


extern SemaphoreHandle_t sem_led_blue;

void task_led_blue(void *argument)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  while (1)
  {
    if (xSemaphoreTake(sem_led_blue, portMAX_DELAY) == pdTRUE)
 8005268:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <task_led_blue+0x40>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f04f 31ff 	mov.w	r1, #4294967295
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd ff93 	bl	800319c <xQueueSemaphoreTake>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d1f5      	bne.n	8005268 <task_led_blue+0x8>
    {
      HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005282:	4808      	ldr	r0, [pc, #32]	@ (80052a4 <task_led_blue+0x44>)
 8005284:	f7fb ff4a 	bl	800111c <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(1000));
 8005288:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800528c:	f7fe fb6e 	bl	800396c <vTaskDelay>
      HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005290:	2200      	movs	r2, #0
 8005292:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005296:	4803      	ldr	r0, [pc, #12]	@ (80052a4 <task_led_blue+0x44>)
 8005298:	f7fb ff40 	bl	800111c <HAL_GPIO_WritePin>
    if (xSemaphoreTake(sem_led_blue, portMAX_DELAY) == pdTRUE)
 800529c:	e7e4      	b.n	8005268 <task_led_blue+0x8>
 800529e:	bf00      	nop
 80052a0:	20004118 	.word	0x20004118
 80052a4:	40020400 	.word	0x40020400

080052a8 <task_led_green>:


extern SemaphoreHandle_t sem_led_green;

void task_led_green(void *argument)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  while (1)
  {
    if (xSemaphoreTake(sem_led_green, portMAX_DELAY) == pdTRUE)
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <task_led_green+0x3c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f04f 31ff 	mov.w	r1, #4294967295
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd ff6f 	bl	800319c <xQueueSemaphoreTake>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d1f5      	bne.n	80052b0 <task_led_green+0x8>
    {
      HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 80052c4:	2201      	movs	r2, #1
 80052c6:	2180      	movs	r1, #128	@ 0x80
 80052c8:	4807      	ldr	r0, [pc, #28]	@ (80052e8 <task_led_green+0x40>)
 80052ca:	f7fb ff27 	bl	800111c <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(1000));
 80052ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052d2:	f7fe fb4b 	bl	800396c <vTaskDelay>
      HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80052d6:	2200      	movs	r2, #0
 80052d8:	2180      	movs	r1, #128	@ 0x80
 80052da:	4803      	ldr	r0, [pc, #12]	@ (80052e8 <task_led_green+0x40>)
 80052dc:	f7fb ff1e 	bl	800111c <HAL_GPIO_WritePin>
    if (xSemaphoreTake(sem_led_green, portMAX_DELAY) == pdTRUE)
 80052e0:	e7e6      	b.n	80052b0 <task_led_green+0x8>
 80052e2:	bf00      	nop
 80052e4:	20004114 	.word	0x20004114
 80052e8:	40020400 	.word	0x40020400

080052ec <task_led_red>:


extern SemaphoreHandle_t sem_led_red;

void task_led_red(void *argument)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  while (1)
  {
    if (xSemaphoreTake(sem_led_red, portMAX_DELAY) == pdTRUE)
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <task_led_red+0x3c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 31ff 	mov.w	r1, #4294967295
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fd ff4d 	bl	800319c <xQueueSemaphoreTake>
 8005302:	4603      	mov	r3, r0
 8005304:	2b01      	cmp	r3, #1
 8005306:	d1f5      	bne.n	80052f4 <task_led_red+0x8>
    {
      HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005308:	2201      	movs	r2, #1
 800530a:	2101      	movs	r1, #1
 800530c:	4807      	ldr	r0, [pc, #28]	@ (800532c <task_led_red+0x40>)
 800530e:	f7fb ff05 	bl	800111c <HAL_GPIO_WritePin>
      vTaskDelay(pdMS_TO_TICKS(1000));
 8005312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005316:	f7fe fb29 	bl	800396c <vTaskDelay>
      HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 800531a:	2200      	movs	r2, #0
 800531c:	2101      	movs	r1, #1
 800531e:	4803      	ldr	r0, [pc, #12]	@ (800532c <task_led_red+0x40>)
 8005320:	f7fb fefc 	bl	800111c <HAL_GPIO_WritePin>
    if (xSemaphoreTake(sem_led_red, portMAX_DELAY) == pdTRUE)
 8005324:	e7e6      	b.n	80052f4 <task_led_red+0x8>
 8005326:	bf00      	nop
 8005328:	20004110 	.word	0x20004110
 800532c:	40020400 	.word	0x40020400

08005330 <task_uart>:
extern QueueHandle_t uart_queue;  // Definida en app.c

#define UART_MSG_MAX_LEN 64

void task_uart(void *argument)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b092      	sub	sp, #72	@ 0x48
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    char msg[UART_MSG_MAX_LEN];

    while (1)
    {
        if (xQueueReceive(uart_queue, &msg, portMAX_DELAY) == pdTRUE)
 8005338:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <task_uart+0x40>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f107 0108 	add.w	r1, r7, #8
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd fe47 	bl	8002fd8 <xQueueReceive>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d1f3      	bne.n	8005338 <task_uart+0x8>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8005350:	f107 0308 	add.w	r3, r7, #8
 8005354:	4618      	mov	r0, r3
 8005356:	f7fa ff5b 	bl	8000210 <strlen>
 800535a:	4603      	mov	r3, r0
 800535c:	b29a      	uxth	r2, r3
 800535e:	f107 0108 	add.w	r1, r7, #8
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	4803      	ldr	r0, [pc, #12]	@ (8005374 <task_uart+0x44>)
 8005368:	f7fc fff8 	bl	800235c <HAL_UART_Transmit>
        if (xQueueReceive(uart_queue, &msg, portMAX_DELAY) == pdTRUE)
 800536c:	e7e4      	b.n	8005338 <task_uart+0x8>
 800536e:	bf00      	nop
 8005370:	2000410c 	.word	0x2000410c
 8005374:	2000031c 	.word	0x2000031c

08005378 <task_uart_app>:
/**
 * @brief Envía un mensaje por UART de forma segura a través de la cola
 * @param msg Cadena null-terminated (máx. 63 caracteres)
 */
void task_uart_app(const char *msg)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b092      	sub	sp, #72	@ 0x48
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    if (msg == NULL) return;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d012      	beq.n	80053ac <task_uart_app+0x34>

    char buffer[UART_MSG_MAX_LEN];
    strncpy(buffer, msg, UART_MSG_MAX_LEN - 1);
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	223f      	movs	r2, #63	@ 0x3f
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f8b6 	bl	8005500 <strncpy>
    buffer[UART_MSG_MAX_LEN - 1] = '\0';  // Asegura terminación
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    xQueueSend(uart_queue, &buffer, 0);  // 0 = no espera si está llena
 800539a:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <task_uart_app+0x3c>)
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	f107 0108 	add.w	r1, r7, #8
 80053a2:	2300      	movs	r3, #0
 80053a4:	2200      	movs	r2, #0
 80053a6:	f7fd fd15 	bl	8002dd4 <xQueueGenericSend>
 80053aa:	e000      	b.n	80053ae <task_uart_app+0x36>
    if (msg == NULL) return;
 80053ac:	bf00      	nop
}
 80053ae:	3748      	adds	r7, #72	@ 0x48
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000410c 	.word	0x2000410c

080053b8 <uart_enviar_estado_boton>:

void uart_enviar_estado_boton(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80053be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053c2:	480e      	ldr	r0, [pc, #56]	@ (80053fc <uart_enviar_estado_boton+0x44>)
 80053c4:	f7fb fe92 	bl	80010ec <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	70fb      	strb	r3, [r7, #3]

    const char* mensaje;

    if (state == GPIO_PIN_RESET)  // Activo-bajo: presionado
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <uart_enviar_estado_boton+0x20>
        mensaje = "Estado del boton: PRESIONADO\r\n";
 80053d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <uart_enviar_estado_boton+0x48>)
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e001      	b.n	80053dc <uart_enviar_estado_boton+0x24>
    else
        mensaje = "Estado del boton: LIBERADO\r\n";
 80053d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <uart_enviar_estado_boton+0x4c>)
 80053da:	607b      	str	r3, [r7, #4]

    HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fa ff17 	bl	8000210 <strlen>
 80053e2:	4603      	mov	r3, r0
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4806      	ldr	r0, [pc, #24]	@ (8005408 <uart_enviar_estado_boton+0x50>)
 80053ee:	f7fc ffb5 	bl	800235c <HAL_UART_Transmit>
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40020800 	.word	0x40020800
 8005400:	08005fb8 	.word	0x08005fb8
 8005404:	08005fd8 	.word	0x08005fd8
 8005408:	2000031c 	.word	0x2000031c

0800540c <task_ui>:

/* Cola de eventos del botón (proviene de task_button) */
extern QueueHandle_t button_event_queue;

void task_ui(void *argument)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  button_type_t button_event;

  while (1)
  {
    /* Espera un evento de tipo button_type_t enviado por task_button */
    if (xQueueReceive(button_event_queue, &button_event, portMAX_DELAY) == pdTRUE)
 8005414:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <task_ui+0x80>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f107 010f 	add.w	r1, r7, #15
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	4618      	mov	r0, r3
 8005422:	f7fd fdd9 	bl	8002fd8 <xQueueReceive>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d1f3      	bne.n	8005414 <task_ui+0x8>
    {

      switch (button_event)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d01c      	beq.n	800546c <task_ui+0x60>
 8005432:	2b03      	cmp	r3, #3
 8005434:	dc25      	bgt.n	8005482 <task_ui+0x76>
 8005436:	2b01      	cmp	r3, #1
 8005438:	d002      	beq.n	8005440 <task_ui+0x34>
 800543a:	2b02      	cmp	r3, #2
 800543c:	d00b      	beq.n	8005456 <task_ui+0x4a>
 800543e:	e020      	b.n	8005482 <task_ui+0x76>
      {
        case BUTTON_TYPE_PULSE:
          //LOGGER_INFO("UI: botón tipo PULSE → activar LED rojo");
          task_uart_app(" UI: boton tipo PULSE - activar LED rojo\r\n");
 8005440:	4813      	ldr	r0, [pc, #76]	@ (8005490 <task_ui+0x84>)
 8005442:	f7ff ff99 	bl	8005378 <task_uart_app>
        	xSemaphoreGive(sem_led_red);
 8005446:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <task_ui+0x88>)
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	2200      	movs	r2, #0
 800544e:	2100      	movs	r1, #0
 8005450:	f7fd fcc0 	bl	8002dd4 <xQueueGenericSend>
          break;
 8005454:	e019      	b.n	800548a <task_ui+0x7e>

        case BUTTON_TYPE_SHORT:
          //LOGGER_INFO("UI: botón tipo SHORT → activar LED verde");
        	task_uart_app(" UI: boton tipo SHORT - activar LED verde\r\n");
 8005456:	4810      	ldr	r0, [pc, #64]	@ (8005498 <task_ui+0x8c>)
 8005458:	f7ff ff8e 	bl	8005378 <task_uart_app>
          xSemaphoreGive(sem_led_green);
 800545c:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <task_ui+0x90>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	f7fd fcb5 	bl	8002dd4 <xQueueGenericSend>
          break;
 800546a:	e00e      	b.n	800548a <task_ui+0x7e>

        case BUTTON_TYPE_LONG:
          //LOGGER_INFO("UI: botón tipo LONG → activar LED azul");
        	task_uart_app(" UI: boton tipo LONG - activar LED azul\r\n");
 800546c:	480c      	ldr	r0, [pc, #48]	@ (80054a0 <task_ui+0x94>)
 800546e:	f7ff ff83 	bl	8005378 <task_uart_app>
          xSemaphoreGive(sem_led_blue);
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <task_ui+0x98>)
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	2200      	movs	r2, #0
 800547a:	2100      	movs	r1, #0
 800547c:	f7fd fcaa 	bl	8002dd4 <xQueueGenericSend>
          break;
 8005480:	e003      	b.n	800548a <task_ui+0x7e>

        default:
          //LOGGER_WARN("UI: tipo de pulsación no reconocido");
          task_uart_app(" UI: tipo de pulsacion no reconocido\r\n");
 8005482:	4809      	ldr	r0, [pc, #36]	@ (80054a8 <task_ui+0x9c>)
 8005484:	f7ff ff78 	bl	8005378 <task_uart_app>
          break;
 8005488:	bf00      	nop
    if (xQueueReceive(button_event_queue, &button_event, portMAX_DELAY) == pdTRUE)
 800548a:	e7c3      	b.n	8005414 <task_ui+0x8>
 800548c:	20004108 	.word	0x20004108
 8005490:	08005ff8 	.word	0x08005ff8
 8005494:	20004110 	.word	0x20004110
 8005498:	08006024 	.word	0x08006024
 800549c:	20004114 	.word	0x20004114
 80054a0:	08006050 	.word	0x08006050
 80054a4:	20004118 	.word	0x20004118
 80054a8:	0800607c 	.word	0x0800607c

080054ac <siprintf>:
 80054ac:	b40e      	push	{r1, r2, r3}
 80054ae:	b510      	push	{r4, lr}
 80054b0:	b09d      	sub	sp, #116	@ 0x74
 80054b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054b4:	9002      	str	r0, [sp, #8]
 80054b6:	9006      	str	r0, [sp, #24]
 80054b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054bc:	480a      	ldr	r0, [pc, #40]	@ (80054e8 <siprintf+0x3c>)
 80054be:	9107      	str	r1, [sp, #28]
 80054c0:	9104      	str	r1, [sp, #16]
 80054c2:	490a      	ldr	r1, [pc, #40]	@ (80054ec <siprintf+0x40>)
 80054c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c8:	9105      	str	r1, [sp, #20]
 80054ca:	2400      	movs	r4, #0
 80054cc:	a902      	add	r1, sp, #8
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054d4:	f000 fa14 	bl	8005900 <_svfiprintf_r>
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	701c      	strb	r4, [r3, #0]
 80054dc:	b01d      	add	sp, #116	@ 0x74
 80054de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e2:	b003      	add	sp, #12
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000010 	.word	0x20000010
 80054ec:	ffff0208 	.word	0xffff0208

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <strncpy>:
 8005500:	b510      	push	{r4, lr}
 8005502:	3901      	subs	r1, #1
 8005504:	4603      	mov	r3, r0
 8005506:	b132      	cbz	r2, 8005516 <strncpy+0x16>
 8005508:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800550c:	f803 4b01 	strb.w	r4, [r3], #1
 8005510:	3a01      	subs	r2, #1
 8005512:	2c00      	cmp	r4, #0
 8005514:	d1f7      	bne.n	8005506 <strncpy+0x6>
 8005516:	441a      	add	r2, r3
 8005518:	2100      	movs	r1, #0
 800551a:	4293      	cmp	r3, r2
 800551c:	d100      	bne.n	8005520 <strncpy+0x20>
 800551e:	bd10      	pop	{r4, pc}
 8005520:	f803 1b01 	strb.w	r1, [r3], #1
 8005524:	e7f9      	b.n	800551a <strncpy+0x1a>
	...

08005528 <_reclaim_reent>:
 8005528:	4b2d      	ldr	r3, [pc, #180]	@ (80055e0 <_reclaim_reent+0xb8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4283      	cmp	r3, r0
 800552e:	b570      	push	{r4, r5, r6, lr}
 8005530:	4604      	mov	r4, r0
 8005532:	d053      	beq.n	80055dc <_reclaim_reent+0xb4>
 8005534:	69c3      	ldr	r3, [r0, #28]
 8005536:	b31b      	cbz	r3, 8005580 <_reclaim_reent+0x58>
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	b163      	cbz	r3, 8005556 <_reclaim_reent+0x2e>
 800553c:	2500      	movs	r5, #0
 800553e:	69e3      	ldr	r3, [r4, #28]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	5959      	ldr	r1, [r3, r5]
 8005544:	b9b1      	cbnz	r1, 8005574 <_reclaim_reent+0x4c>
 8005546:	3504      	adds	r5, #4
 8005548:	2d80      	cmp	r5, #128	@ 0x80
 800554a:	d1f8      	bne.n	800553e <_reclaim_reent+0x16>
 800554c:	69e3      	ldr	r3, [r4, #28]
 800554e:	4620      	mov	r0, r4
 8005550:	68d9      	ldr	r1, [r3, #12]
 8005552:	f000 f881 	bl	8005658 <_free_r>
 8005556:	69e3      	ldr	r3, [r4, #28]
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	b111      	cbz	r1, 8005562 <_reclaim_reent+0x3a>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f87b 	bl	8005658 <_free_r>
 8005562:	69e3      	ldr	r3, [r4, #28]
 8005564:	689d      	ldr	r5, [r3, #8]
 8005566:	b15d      	cbz	r5, 8005580 <_reclaim_reent+0x58>
 8005568:	4629      	mov	r1, r5
 800556a:	4620      	mov	r0, r4
 800556c:	682d      	ldr	r5, [r5, #0]
 800556e:	f000 f873 	bl	8005658 <_free_r>
 8005572:	e7f8      	b.n	8005566 <_reclaim_reent+0x3e>
 8005574:	680e      	ldr	r6, [r1, #0]
 8005576:	4620      	mov	r0, r4
 8005578:	f000 f86e 	bl	8005658 <_free_r>
 800557c:	4631      	mov	r1, r6
 800557e:	e7e1      	b.n	8005544 <_reclaim_reent+0x1c>
 8005580:	6961      	ldr	r1, [r4, #20]
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x62>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 f867 	bl	8005658 <_free_r>
 800558a:	69e1      	ldr	r1, [r4, #28]
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x6c>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f862 	bl	8005658 <_free_r>
 8005594:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005596:	b111      	cbz	r1, 800559e <_reclaim_reent+0x76>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f85d 	bl	8005658 <_free_r>
 800559e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a0:	b111      	cbz	r1, 80055a8 <_reclaim_reent+0x80>
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f858 	bl	8005658 <_free_r>
 80055a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80055aa:	b111      	cbz	r1, 80055b2 <_reclaim_reent+0x8a>
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f853 	bl	8005658 <_free_r>
 80055b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80055b4:	b111      	cbz	r1, 80055bc <_reclaim_reent+0x94>
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f84e 	bl	8005658 <_free_r>
 80055bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80055be:	b111      	cbz	r1, 80055c6 <_reclaim_reent+0x9e>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 f849 	bl	8005658 <_free_r>
 80055c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80055c8:	b111      	cbz	r1, 80055d0 <_reclaim_reent+0xa8>
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f844 	bl	8005658 <_free_r>
 80055d0:	6a23      	ldr	r3, [r4, #32]
 80055d2:	b11b      	cbz	r3, 80055dc <_reclaim_reent+0xb4>
 80055d4:	4620      	mov	r0, r4
 80055d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055da:	4718      	bx	r3
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	bf00      	nop
 80055e0:	20000010 	.word	0x20000010

080055e4 <__errno>:
 80055e4:	4b01      	ldr	r3, [pc, #4]	@ (80055ec <__errno+0x8>)
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000010 	.word	0x20000010

080055f0 <__libc_init_array>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005628 <__libc_init_array+0x38>)
 80055f4:	4c0d      	ldr	r4, [pc, #52]	@ (800562c <__libc_init_array+0x3c>)
 80055f6:	1b64      	subs	r4, r4, r5
 80055f8:	10a4      	asrs	r4, r4, #2
 80055fa:	2600      	movs	r6, #0
 80055fc:	42a6      	cmp	r6, r4
 80055fe:	d109      	bne.n	8005614 <__libc_init_array+0x24>
 8005600:	4d0b      	ldr	r5, [pc, #44]	@ (8005630 <__libc_init_array+0x40>)
 8005602:	4c0c      	ldr	r4, [pc, #48]	@ (8005634 <__libc_init_array+0x44>)
 8005604:	f000 fc64 	bl	8005ed0 <_init>
 8005608:	1b64      	subs	r4, r4, r5
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	2600      	movs	r6, #0
 800560e:	42a6      	cmp	r6, r4
 8005610:	d105      	bne.n	800561e <__libc_init_array+0x2e>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	f855 3b04 	ldr.w	r3, [r5], #4
 8005618:	4798      	blx	r3
 800561a:	3601      	adds	r6, #1
 800561c:	e7ee      	b.n	80055fc <__libc_init_array+0xc>
 800561e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005622:	4798      	blx	r3
 8005624:	3601      	adds	r6, #1
 8005626:	e7f2      	b.n	800560e <__libc_init_array+0x1e>
 8005628:	080060f8 	.word	0x080060f8
 800562c:	080060f8 	.word	0x080060f8
 8005630:	080060f8 	.word	0x080060f8
 8005634:	080060fc 	.word	0x080060fc

08005638 <__retarget_lock_acquire_recursive>:
 8005638:	4770      	bx	lr

0800563a <__retarget_lock_release_recursive>:
 800563a:	4770      	bx	lr

0800563c <memcpy>:
 800563c:	440a      	add	r2, r1
 800563e:	4291      	cmp	r1, r2
 8005640:	f100 33ff 	add.w	r3, r0, #4294967295
 8005644:	d100      	bne.n	8005648 <memcpy+0xc>
 8005646:	4770      	bx	lr
 8005648:	b510      	push	{r4, lr}
 800564a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800564e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005652:	4291      	cmp	r1, r2
 8005654:	d1f9      	bne.n	800564a <memcpy+0xe>
 8005656:	bd10      	pop	{r4, pc}

08005658 <_free_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4605      	mov	r5, r0
 800565c:	2900      	cmp	r1, #0
 800565e:	d041      	beq.n	80056e4 <_free_r+0x8c>
 8005660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005664:	1f0c      	subs	r4, r1, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfb8      	it	lt
 800566a:	18e4      	addlt	r4, r4, r3
 800566c:	f000 f8e0 	bl	8005830 <__malloc_lock>
 8005670:	4a1d      	ldr	r2, [pc, #116]	@ (80056e8 <_free_r+0x90>)
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	b933      	cbnz	r3, 8005684 <_free_r+0x2c>
 8005676:	6063      	str	r3, [r4, #4]
 8005678:	6014      	str	r4, [r2, #0]
 800567a:	4628      	mov	r0, r5
 800567c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005680:	f000 b8dc 	b.w	800583c <__malloc_unlock>
 8005684:	42a3      	cmp	r3, r4
 8005686:	d908      	bls.n	800569a <_free_r+0x42>
 8005688:	6820      	ldr	r0, [r4, #0]
 800568a:	1821      	adds	r1, r4, r0
 800568c:	428b      	cmp	r3, r1
 800568e:	bf01      	itttt	eq
 8005690:	6819      	ldreq	r1, [r3, #0]
 8005692:	685b      	ldreq	r3, [r3, #4]
 8005694:	1809      	addeq	r1, r1, r0
 8005696:	6021      	streq	r1, [r4, #0]
 8005698:	e7ed      	b.n	8005676 <_free_r+0x1e>
 800569a:	461a      	mov	r2, r3
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b10b      	cbz	r3, 80056a4 <_free_r+0x4c>
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d9fa      	bls.n	800569a <_free_r+0x42>
 80056a4:	6811      	ldr	r1, [r2, #0]
 80056a6:	1850      	adds	r0, r2, r1
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d10b      	bne.n	80056c4 <_free_r+0x6c>
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	4401      	add	r1, r0
 80056b0:	1850      	adds	r0, r2, r1
 80056b2:	4283      	cmp	r3, r0
 80056b4:	6011      	str	r1, [r2, #0]
 80056b6:	d1e0      	bne.n	800567a <_free_r+0x22>
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	6053      	str	r3, [r2, #4]
 80056be:	4408      	add	r0, r1
 80056c0:	6010      	str	r0, [r2, #0]
 80056c2:	e7da      	b.n	800567a <_free_r+0x22>
 80056c4:	d902      	bls.n	80056cc <_free_r+0x74>
 80056c6:	230c      	movs	r3, #12
 80056c8:	602b      	str	r3, [r5, #0]
 80056ca:	e7d6      	b.n	800567a <_free_r+0x22>
 80056cc:	6820      	ldr	r0, [r4, #0]
 80056ce:	1821      	adds	r1, r4, r0
 80056d0:	428b      	cmp	r3, r1
 80056d2:	bf04      	itt	eq
 80056d4:	6819      	ldreq	r1, [r3, #0]
 80056d6:	685b      	ldreq	r3, [r3, #4]
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	bf04      	itt	eq
 80056dc:	1809      	addeq	r1, r1, r0
 80056de:	6021      	streq	r1, [r4, #0]
 80056e0:	6054      	str	r4, [r2, #4]
 80056e2:	e7ca      	b.n	800567a <_free_r+0x22>
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	20004268 	.word	0x20004268

080056ec <sbrk_aligned>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	4e0f      	ldr	r6, [pc, #60]	@ (800572c <sbrk_aligned+0x40>)
 80056f0:	460c      	mov	r4, r1
 80056f2:	6831      	ldr	r1, [r6, #0]
 80056f4:	4605      	mov	r5, r0
 80056f6:	b911      	cbnz	r1, 80056fe <sbrk_aligned+0x12>
 80056f8:	f000 fba4 	bl	8005e44 <_sbrk_r>
 80056fc:	6030      	str	r0, [r6, #0]
 80056fe:	4621      	mov	r1, r4
 8005700:	4628      	mov	r0, r5
 8005702:	f000 fb9f 	bl	8005e44 <_sbrk_r>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	d103      	bne.n	8005712 <sbrk_aligned+0x26>
 800570a:	f04f 34ff 	mov.w	r4, #4294967295
 800570e:	4620      	mov	r0, r4
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	1cc4      	adds	r4, r0, #3
 8005714:	f024 0403 	bic.w	r4, r4, #3
 8005718:	42a0      	cmp	r0, r4
 800571a:	d0f8      	beq.n	800570e <sbrk_aligned+0x22>
 800571c:	1a21      	subs	r1, r4, r0
 800571e:	4628      	mov	r0, r5
 8005720:	f000 fb90 	bl	8005e44 <_sbrk_r>
 8005724:	3001      	adds	r0, #1
 8005726:	d1f2      	bne.n	800570e <sbrk_aligned+0x22>
 8005728:	e7ef      	b.n	800570a <sbrk_aligned+0x1e>
 800572a:	bf00      	nop
 800572c:	20004264 	.word	0x20004264

08005730 <_malloc_r>:
 8005730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005734:	1ccd      	adds	r5, r1, #3
 8005736:	f025 0503 	bic.w	r5, r5, #3
 800573a:	3508      	adds	r5, #8
 800573c:	2d0c      	cmp	r5, #12
 800573e:	bf38      	it	cc
 8005740:	250c      	movcc	r5, #12
 8005742:	2d00      	cmp	r5, #0
 8005744:	4606      	mov	r6, r0
 8005746:	db01      	blt.n	800574c <_malloc_r+0x1c>
 8005748:	42a9      	cmp	r1, r5
 800574a:	d904      	bls.n	8005756 <_malloc_r+0x26>
 800574c:	230c      	movs	r3, #12
 800574e:	6033      	str	r3, [r6, #0]
 8005750:	2000      	movs	r0, #0
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800582c <_malloc_r+0xfc>
 800575a:	f000 f869 	bl	8005830 <__malloc_lock>
 800575e:	f8d8 3000 	ldr.w	r3, [r8]
 8005762:	461c      	mov	r4, r3
 8005764:	bb44      	cbnz	r4, 80057b8 <_malloc_r+0x88>
 8005766:	4629      	mov	r1, r5
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff ffbf 	bl	80056ec <sbrk_aligned>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	4604      	mov	r4, r0
 8005772:	d158      	bne.n	8005826 <_malloc_r+0xf6>
 8005774:	f8d8 4000 	ldr.w	r4, [r8]
 8005778:	4627      	mov	r7, r4
 800577a:	2f00      	cmp	r7, #0
 800577c:	d143      	bne.n	8005806 <_malloc_r+0xd6>
 800577e:	2c00      	cmp	r4, #0
 8005780:	d04b      	beq.n	800581a <_malloc_r+0xea>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	4639      	mov	r1, r7
 8005786:	4630      	mov	r0, r6
 8005788:	eb04 0903 	add.w	r9, r4, r3
 800578c:	f000 fb5a 	bl	8005e44 <_sbrk_r>
 8005790:	4581      	cmp	r9, r0
 8005792:	d142      	bne.n	800581a <_malloc_r+0xea>
 8005794:	6821      	ldr	r1, [r4, #0]
 8005796:	1a6d      	subs	r5, r5, r1
 8005798:	4629      	mov	r1, r5
 800579a:	4630      	mov	r0, r6
 800579c:	f7ff ffa6 	bl	80056ec <sbrk_aligned>
 80057a0:	3001      	adds	r0, #1
 80057a2:	d03a      	beq.n	800581a <_malloc_r+0xea>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	442b      	add	r3, r5
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	f8d8 3000 	ldr.w	r3, [r8]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	bb62      	cbnz	r2, 800580c <_malloc_r+0xdc>
 80057b2:	f8c8 7000 	str.w	r7, [r8]
 80057b6:	e00f      	b.n	80057d8 <_malloc_r+0xa8>
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	1b52      	subs	r2, r2, r5
 80057bc:	d420      	bmi.n	8005800 <_malloc_r+0xd0>
 80057be:	2a0b      	cmp	r2, #11
 80057c0:	d917      	bls.n	80057f2 <_malloc_r+0xc2>
 80057c2:	1961      	adds	r1, r4, r5
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	6025      	str	r5, [r4, #0]
 80057c8:	bf18      	it	ne
 80057ca:	6059      	strne	r1, [r3, #4]
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	bf08      	it	eq
 80057d0:	f8c8 1000 	streq.w	r1, [r8]
 80057d4:	5162      	str	r2, [r4, r5]
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f82f 	bl	800583c <__malloc_unlock>
 80057de:	f104 000b 	add.w	r0, r4, #11
 80057e2:	1d23      	adds	r3, r4, #4
 80057e4:	f020 0007 	bic.w	r0, r0, #7
 80057e8:	1ac2      	subs	r2, r0, r3
 80057ea:	bf1c      	itt	ne
 80057ec:	1a1b      	subne	r3, r3, r0
 80057ee:	50a3      	strne	r3, [r4, r2]
 80057f0:	e7af      	b.n	8005752 <_malloc_r+0x22>
 80057f2:	6862      	ldr	r2, [r4, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	bf0c      	ite	eq
 80057f8:	f8c8 2000 	streq.w	r2, [r8]
 80057fc:	605a      	strne	r2, [r3, #4]
 80057fe:	e7eb      	b.n	80057d8 <_malloc_r+0xa8>
 8005800:	4623      	mov	r3, r4
 8005802:	6864      	ldr	r4, [r4, #4]
 8005804:	e7ae      	b.n	8005764 <_malloc_r+0x34>
 8005806:	463c      	mov	r4, r7
 8005808:	687f      	ldr	r7, [r7, #4]
 800580a:	e7b6      	b.n	800577a <_malloc_r+0x4a>
 800580c:	461a      	mov	r2, r3
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	42a3      	cmp	r3, r4
 8005812:	d1fb      	bne.n	800580c <_malloc_r+0xdc>
 8005814:	2300      	movs	r3, #0
 8005816:	6053      	str	r3, [r2, #4]
 8005818:	e7de      	b.n	80057d8 <_malloc_r+0xa8>
 800581a:	230c      	movs	r3, #12
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	4630      	mov	r0, r6
 8005820:	f000 f80c 	bl	800583c <__malloc_unlock>
 8005824:	e794      	b.n	8005750 <_malloc_r+0x20>
 8005826:	6005      	str	r5, [r0, #0]
 8005828:	e7d6      	b.n	80057d8 <_malloc_r+0xa8>
 800582a:	bf00      	nop
 800582c:	20004268 	.word	0x20004268

08005830 <__malloc_lock>:
 8005830:	4801      	ldr	r0, [pc, #4]	@ (8005838 <__malloc_lock+0x8>)
 8005832:	f7ff bf01 	b.w	8005638 <__retarget_lock_acquire_recursive>
 8005836:	bf00      	nop
 8005838:	20004260 	.word	0x20004260

0800583c <__malloc_unlock>:
 800583c:	4801      	ldr	r0, [pc, #4]	@ (8005844 <__malloc_unlock+0x8>)
 800583e:	f7ff befc 	b.w	800563a <__retarget_lock_release_recursive>
 8005842:	bf00      	nop
 8005844:	20004260 	.word	0x20004260

08005848 <__ssputs_r>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	688e      	ldr	r6, [r1, #8]
 800584e:	461f      	mov	r7, r3
 8005850:	42be      	cmp	r6, r7
 8005852:	680b      	ldr	r3, [r1, #0]
 8005854:	4682      	mov	sl, r0
 8005856:	460c      	mov	r4, r1
 8005858:	4690      	mov	r8, r2
 800585a:	d82d      	bhi.n	80058b8 <__ssputs_r+0x70>
 800585c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005864:	d026      	beq.n	80058b4 <__ssputs_r+0x6c>
 8005866:	6965      	ldr	r5, [r4, #20]
 8005868:	6909      	ldr	r1, [r1, #16]
 800586a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800586e:	eba3 0901 	sub.w	r9, r3, r1
 8005872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005876:	1c7b      	adds	r3, r7, #1
 8005878:	444b      	add	r3, r9
 800587a:	106d      	asrs	r5, r5, #1
 800587c:	429d      	cmp	r5, r3
 800587e:	bf38      	it	cc
 8005880:	461d      	movcc	r5, r3
 8005882:	0553      	lsls	r3, r2, #21
 8005884:	d527      	bpl.n	80058d6 <__ssputs_r+0x8e>
 8005886:	4629      	mov	r1, r5
 8005888:	f7ff ff52 	bl	8005730 <_malloc_r>
 800588c:	4606      	mov	r6, r0
 800588e:	b360      	cbz	r0, 80058ea <__ssputs_r+0xa2>
 8005890:	6921      	ldr	r1, [r4, #16]
 8005892:	464a      	mov	r2, r9
 8005894:	f7ff fed2 	bl	800563c <memcpy>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800589e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	6126      	str	r6, [r4, #16]
 80058a6:	6165      	str	r5, [r4, #20]
 80058a8:	444e      	add	r6, r9
 80058aa:	eba5 0509 	sub.w	r5, r5, r9
 80058ae:	6026      	str	r6, [r4, #0]
 80058b0:	60a5      	str	r5, [r4, #8]
 80058b2:	463e      	mov	r6, r7
 80058b4:	42be      	cmp	r6, r7
 80058b6:	d900      	bls.n	80058ba <__ssputs_r+0x72>
 80058b8:	463e      	mov	r6, r7
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	4632      	mov	r2, r6
 80058be:	4641      	mov	r1, r8
 80058c0:	f000 faa6 	bl	8005e10 <memmove>
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	1b9b      	subs	r3, r3, r6
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	4433      	add	r3, r6
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	2000      	movs	r0, #0
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	462a      	mov	r2, r5
 80058d8:	f000 fac4 	bl	8005e64 <_realloc_r>
 80058dc:	4606      	mov	r6, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	d1e0      	bne.n	80058a4 <__ssputs_r+0x5c>
 80058e2:	6921      	ldr	r1, [r4, #16]
 80058e4:	4650      	mov	r0, sl
 80058e6:	f7ff feb7 	bl	8005658 <_free_r>
 80058ea:	230c      	movs	r3, #12
 80058ec:	f8ca 3000 	str.w	r3, [sl]
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e7e9      	b.n	80058d2 <__ssputs_r+0x8a>
	...

08005900 <_svfiprintf_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	4698      	mov	r8, r3
 8005906:	898b      	ldrh	r3, [r1, #12]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	b09d      	sub	sp, #116	@ 0x74
 800590c:	4607      	mov	r7, r0
 800590e:	460d      	mov	r5, r1
 8005910:	4614      	mov	r4, r2
 8005912:	d510      	bpl.n	8005936 <_svfiprintf_r+0x36>
 8005914:	690b      	ldr	r3, [r1, #16]
 8005916:	b973      	cbnz	r3, 8005936 <_svfiprintf_r+0x36>
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	f7ff ff09 	bl	8005730 <_malloc_r>
 800591e:	6028      	str	r0, [r5, #0]
 8005920:	6128      	str	r0, [r5, #16]
 8005922:	b930      	cbnz	r0, 8005932 <_svfiprintf_r+0x32>
 8005924:	230c      	movs	r3, #12
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	b01d      	add	sp, #116	@ 0x74
 800592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005932:	2340      	movs	r3, #64	@ 0x40
 8005934:	616b      	str	r3, [r5, #20]
 8005936:	2300      	movs	r3, #0
 8005938:	9309      	str	r3, [sp, #36]	@ 0x24
 800593a:	2320      	movs	r3, #32
 800593c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005940:	f8cd 800c 	str.w	r8, [sp, #12]
 8005944:	2330      	movs	r3, #48	@ 0x30
 8005946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ae4 <_svfiprintf_r+0x1e4>
 800594a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800594e:	f04f 0901 	mov.w	r9, #1
 8005952:	4623      	mov	r3, r4
 8005954:	469a      	mov	sl, r3
 8005956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800595a:	b10a      	cbz	r2, 8005960 <_svfiprintf_r+0x60>
 800595c:	2a25      	cmp	r2, #37	@ 0x25
 800595e:	d1f9      	bne.n	8005954 <_svfiprintf_r+0x54>
 8005960:	ebba 0b04 	subs.w	fp, sl, r4
 8005964:	d00b      	beq.n	800597e <_svfiprintf_r+0x7e>
 8005966:	465b      	mov	r3, fp
 8005968:	4622      	mov	r2, r4
 800596a:	4629      	mov	r1, r5
 800596c:	4638      	mov	r0, r7
 800596e:	f7ff ff6b 	bl	8005848 <__ssputs_r>
 8005972:	3001      	adds	r0, #1
 8005974:	f000 80a7 	beq.w	8005ac6 <_svfiprintf_r+0x1c6>
 8005978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800597a:	445a      	add	r2, fp
 800597c:	9209      	str	r2, [sp, #36]	@ 0x24
 800597e:	f89a 3000 	ldrb.w	r3, [sl]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 809f 	beq.w	8005ac6 <_svfiprintf_r+0x1c6>
 8005988:	2300      	movs	r3, #0
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005992:	f10a 0a01 	add.w	sl, sl, #1
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	9307      	str	r3, [sp, #28]
 800599a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800599e:	931a      	str	r3, [sp, #104]	@ 0x68
 80059a0:	4654      	mov	r4, sl
 80059a2:	2205      	movs	r2, #5
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	484e      	ldr	r0, [pc, #312]	@ (8005ae4 <_svfiprintf_r+0x1e4>)
 80059aa:	f7fa fc39 	bl	8000220 <memchr>
 80059ae:	9a04      	ldr	r2, [sp, #16]
 80059b0:	b9d8      	cbnz	r0, 80059ea <_svfiprintf_r+0xea>
 80059b2:	06d0      	lsls	r0, r2, #27
 80059b4:	bf44      	itt	mi
 80059b6:	2320      	movmi	r3, #32
 80059b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059bc:	0711      	lsls	r1, r2, #28
 80059be:	bf44      	itt	mi
 80059c0:	232b      	movmi	r3, #43	@ 0x2b
 80059c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059c6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80059cc:	d015      	beq.n	80059fa <_svfiprintf_r+0xfa>
 80059ce:	9a07      	ldr	r2, [sp, #28]
 80059d0:	4654      	mov	r4, sl
 80059d2:	2000      	movs	r0, #0
 80059d4:	f04f 0c0a 	mov.w	ip, #10
 80059d8:	4621      	mov	r1, r4
 80059da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059de:	3b30      	subs	r3, #48	@ 0x30
 80059e0:	2b09      	cmp	r3, #9
 80059e2:	d94b      	bls.n	8005a7c <_svfiprintf_r+0x17c>
 80059e4:	b1b0      	cbz	r0, 8005a14 <_svfiprintf_r+0x114>
 80059e6:	9207      	str	r2, [sp, #28]
 80059e8:	e014      	b.n	8005a14 <_svfiprintf_r+0x114>
 80059ea:	eba0 0308 	sub.w	r3, r0, r8
 80059ee:	fa09 f303 	lsl.w	r3, r9, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	9304      	str	r3, [sp, #16]
 80059f6:	46a2      	mov	sl, r4
 80059f8:	e7d2      	b.n	80059a0 <_svfiprintf_r+0xa0>
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	9103      	str	r1, [sp, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfbb      	ittet	lt
 8005a06:	425b      	neglt	r3, r3
 8005a08:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0c:	9307      	strge	r3, [sp, #28]
 8005a0e:	9307      	strlt	r3, [sp, #28]
 8005a10:	bfb8      	it	lt
 8005a12:	9204      	strlt	r2, [sp, #16]
 8005a14:	7823      	ldrb	r3, [r4, #0]
 8005a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a18:	d10a      	bne.n	8005a30 <_svfiprintf_r+0x130>
 8005a1a:	7863      	ldrb	r3, [r4, #1]
 8005a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a1e:	d132      	bne.n	8005a86 <_svfiprintf_r+0x186>
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	1d1a      	adds	r2, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	9203      	str	r2, [sp, #12]
 8005a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a2c:	3402      	adds	r4, #2
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005af4 <_svfiprintf_r+0x1f4>
 8005a34:	7821      	ldrb	r1, [r4, #0]
 8005a36:	2203      	movs	r2, #3
 8005a38:	4650      	mov	r0, sl
 8005a3a:	f7fa fbf1 	bl	8000220 <memchr>
 8005a3e:	b138      	cbz	r0, 8005a50 <_svfiprintf_r+0x150>
 8005a40:	9b04      	ldr	r3, [sp, #16]
 8005a42:	eba0 000a 	sub.w	r0, r0, sl
 8005a46:	2240      	movs	r2, #64	@ 0x40
 8005a48:	4082      	lsls	r2, r0
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a54:	4824      	ldr	r0, [pc, #144]	@ (8005ae8 <_svfiprintf_r+0x1e8>)
 8005a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a5a:	2206      	movs	r2, #6
 8005a5c:	f7fa fbe0 	bl	8000220 <memchr>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d036      	beq.n	8005ad2 <_svfiprintf_r+0x1d2>
 8005a64:	4b21      	ldr	r3, [pc, #132]	@ (8005aec <_svfiprintf_r+0x1ec>)
 8005a66:	bb1b      	cbnz	r3, 8005ab0 <_svfiprintf_r+0x1b0>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	9303      	str	r3, [sp, #12]
 8005a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a76:	4433      	add	r3, r6
 8005a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a7a:	e76a      	b.n	8005952 <_svfiprintf_r+0x52>
 8005a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a80:	460c      	mov	r4, r1
 8005a82:	2001      	movs	r0, #1
 8005a84:	e7a8      	b.n	80059d8 <_svfiprintf_r+0xd8>
 8005a86:	2300      	movs	r3, #0
 8005a88:	3401      	adds	r4, #1
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f04f 0c0a 	mov.w	ip, #10
 8005a92:	4620      	mov	r0, r4
 8005a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a98:	3a30      	subs	r2, #48	@ 0x30
 8005a9a:	2a09      	cmp	r2, #9
 8005a9c:	d903      	bls.n	8005aa6 <_svfiprintf_r+0x1a6>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0c6      	beq.n	8005a30 <_svfiprintf_r+0x130>
 8005aa2:	9105      	str	r1, [sp, #20]
 8005aa4:	e7c4      	b.n	8005a30 <_svfiprintf_r+0x130>
 8005aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aaa:	4604      	mov	r4, r0
 8005aac:	2301      	movs	r3, #1
 8005aae:	e7f0      	b.n	8005a92 <_svfiprintf_r+0x192>
 8005ab0:	ab03      	add	r3, sp, #12
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <_svfiprintf_r+0x1f0>)
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	4638      	mov	r0, r7
 8005abc:	f3af 8000 	nop.w
 8005ac0:	1c42      	adds	r2, r0, #1
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	d1d6      	bne.n	8005a74 <_svfiprintf_r+0x174>
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	065b      	lsls	r3, r3, #25
 8005aca:	f53f af2d 	bmi.w	8005928 <_svfiprintf_r+0x28>
 8005ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ad0:	e72c      	b.n	800592c <_svfiprintf_r+0x2c>
 8005ad2:	ab03      	add	r3, sp, #12
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <_svfiprintf_r+0x1f0>)
 8005ada:	a904      	add	r1, sp, #16
 8005adc:	4638      	mov	r0, r7
 8005ade:	f000 f879 	bl	8005bd4 <_printf_i>
 8005ae2:	e7ed      	b.n	8005ac0 <_svfiprintf_r+0x1c0>
 8005ae4:	080060bc 	.word	0x080060bc
 8005ae8:	080060c6 	.word	0x080060c6
 8005aec:	00000000 	.word	0x00000000
 8005af0:	08005849 	.word	0x08005849
 8005af4:	080060c2 	.word	0x080060c2

08005af8 <_printf_common>:
 8005af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	4616      	mov	r6, r2
 8005afe:	4698      	mov	r8, r3
 8005b00:	688a      	ldr	r2, [r1, #8]
 8005b02:	690b      	ldr	r3, [r1, #16]
 8005b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bfb8      	it	lt
 8005b0c:	4613      	movlt	r3, r2
 8005b0e:	6033      	str	r3, [r6, #0]
 8005b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b14:	4607      	mov	r7, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	b10a      	cbz	r2, 8005b1e <_printf_common+0x26>
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	0699      	lsls	r1, r3, #26
 8005b22:	bf42      	ittt	mi
 8005b24:	6833      	ldrmi	r3, [r6, #0]
 8005b26:	3302      	addmi	r3, #2
 8005b28:	6033      	strmi	r3, [r6, #0]
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	f015 0506 	ands.w	r5, r5, #6
 8005b30:	d106      	bne.n	8005b40 <_printf_common+0x48>
 8005b32:	f104 0a19 	add.w	sl, r4, #25
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	6832      	ldr	r2, [r6, #0]
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	42ab      	cmp	r3, r5
 8005b3e:	dc26      	bgt.n	8005b8e <_printf_common+0x96>
 8005b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	3b00      	subs	r3, #0
 8005b48:	bf18      	it	ne
 8005b4a:	2301      	movne	r3, #1
 8005b4c:	0692      	lsls	r2, r2, #26
 8005b4e:	d42b      	bmi.n	8005ba8 <_printf_common+0xb0>
 8005b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b54:	4641      	mov	r1, r8
 8005b56:	4638      	mov	r0, r7
 8005b58:	47c8      	blx	r9
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d01e      	beq.n	8005b9c <_printf_common+0xa4>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	6922      	ldr	r2, [r4, #16]
 8005b62:	f003 0306 	and.w	r3, r3, #6
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	bf02      	ittt	eq
 8005b6a:	68e5      	ldreq	r5, [r4, #12]
 8005b6c:	6833      	ldreq	r3, [r6, #0]
 8005b6e:	1aed      	subeq	r5, r5, r3
 8005b70:	68a3      	ldr	r3, [r4, #8]
 8005b72:	bf0c      	ite	eq
 8005b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b78:	2500      	movne	r5, #0
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	bfc4      	itt	gt
 8005b7e:	1a9b      	subgt	r3, r3, r2
 8005b80:	18ed      	addgt	r5, r5, r3
 8005b82:	2600      	movs	r6, #0
 8005b84:	341a      	adds	r4, #26
 8005b86:	42b5      	cmp	r5, r6
 8005b88:	d11a      	bne.n	8005bc0 <_printf_common+0xc8>
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e008      	b.n	8005ba0 <_printf_common+0xa8>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4652      	mov	r2, sl
 8005b92:	4641      	mov	r1, r8
 8005b94:	4638      	mov	r0, r7
 8005b96:	47c8      	blx	r9
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d103      	bne.n	8005ba4 <_printf_common+0xac>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	e7c6      	b.n	8005b36 <_printf_common+0x3e>
 8005ba8:	18e1      	adds	r1, r4, r3
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	2030      	movs	r0, #48	@ 0x30
 8005bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bb2:	4422      	add	r2, r4
 8005bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	e7c7      	b.n	8005b50 <_printf_common+0x58>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	47c8      	blx	r9
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d0e6      	beq.n	8005b9c <_printf_common+0xa4>
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7d9      	b.n	8005b86 <_printf_common+0x8e>
	...

08005bd4 <_printf_i>:
 8005bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	7e0f      	ldrb	r7, [r1, #24]
 8005bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bdc:	2f78      	cmp	r7, #120	@ 0x78
 8005bde:	4691      	mov	r9, r2
 8005be0:	4680      	mov	r8, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	469a      	mov	sl, r3
 8005be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bea:	d807      	bhi.n	8005bfc <_printf_i+0x28>
 8005bec:	2f62      	cmp	r7, #98	@ 0x62
 8005bee:	d80a      	bhi.n	8005c06 <_printf_i+0x32>
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	f000 80d1 	beq.w	8005d98 <_printf_i+0x1c4>
 8005bf6:	2f58      	cmp	r7, #88	@ 0x58
 8005bf8:	f000 80b8 	beq.w	8005d6c <_printf_i+0x198>
 8005bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c04:	e03a      	b.n	8005c7c <_printf_i+0xa8>
 8005c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c0a:	2b15      	cmp	r3, #21
 8005c0c:	d8f6      	bhi.n	8005bfc <_printf_i+0x28>
 8005c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c14 <_printf_i+0x40>)
 8005c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c14:	08005c6d 	.word	0x08005c6d
 8005c18:	08005c81 	.word	0x08005c81
 8005c1c:	08005bfd 	.word	0x08005bfd
 8005c20:	08005bfd 	.word	0x08005bfd
 8005c24:	08005bfd 	.word	0x08005bfd
 8005c28:	08005bfd 	.word	0x08005bfd
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005bfd 	.word	0x08005bfd
 8005c34:	08005bfd 	.word	0x08005bfd
 8005c38:	08005bfd 	.word	0x08005bfd
 8005c3c:	08005bfd 	.word	0x08005bfd
 8005c40:	08005d7f 	.word	0x08005d7f
 8005c44:	08005cab 	.word	0x08005cab
 8005c48:	08005d39 	.word	0x08005d39
 8005c4c:	08005bfd 	.word	0x08005bfd
 8005c50:	08005bfd 	.word	0x08005bfd
 8005c54:	08005da1 	.word	0x08005da1
 8005c58:	08005bfd 	.word	0x08005bfd
 8005c5c:	08005cab 	.word	0x08005cab
 8005c60:	08005bfd 	.word	0x08005bfd
 8005c64:	08005bfd 	.word	0x08005bfd
 8005c68:	08005d41 	.word	0x08005d41
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6032      	str	r2, [r6, #0]
 8005c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e09c      	b.n	8005dba <_printf_i+0x1e6>
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	1d19      	adds	r1, r3, #4
 8005c86:	6031      	str	r1, [r6, #0]
 8005c88:	0606      	lsls	r6, r0, #24
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0xbc>
 8005c8c:	681d      	ldr	r5, [r3, #0]
 8005c8e:	e003      	b.n	8005c98 <_printf_i+0xc4>
 8005c90:	0645      	lsls	r5, r0, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0xb8>
 8005c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	da03      	bge.n	8005ca4 <_printf_i+0xd0>
 8005c9c:	232d      	movs	r3, #45	@ 0x2d
 8005c9e:	426d      	negs	r5, r5
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ca4:	4858      	ldr	r0, [pc, #352]	@ (8005e08 <_printf_i+0x234>)
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	e011      	b.n	8005cce <_printf_i+0xfa>
 8005caa:	6821      	ldr	r1, [r4, #0]
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	0608      	lsls	r0, r1, #24
 8005cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cb4:	d402      	bmi.n	8005cbc <_printf_i+0xe8>
 8005cb6:	0649      	lsls	r1, r1, #25
 8005cb8:	bf48      	it	mi
 8005cba:	b2ad      	uxthmi	r5, r5
 8005cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cbe:	4852      	ldr	r0, [pc, #328]	@ (8005e08 <_printf_i+0x234>)
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	bf14      	ite	ne
 8005cc4:	230a      	movne	r3, #10
 8005cc6:	2308      	moveq	r3, #8
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cce:	6866      	ldr	r6, [r4, #4]
 8005cd0:	60a6      	str	r6, [r4, #8]
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	db05      	blt.n	8005ce2 <_printf_i+0x10e>
 8005cd6:	6821      	ldr	r1, [r4, #0]
 8005cd8:	432e      	orrs	r6, r5
 8005cda:	f021 0104 	bic.w	r1, r1, #4
 8005cde:	6021      	str	r1, [r4, #0]
 8005ce0:	d04b      	beq.n	8005d7a <_printf_i+0x1a6>
 8005ce2:	4616      	mov	r6, r2
 8005ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8005cec:	5dc7      	ldrb	r7, [r0, r7]
 8005cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cf2:	462f      	mov	r7, r5
 8005cf4:	42bb      	cmp	r3, r7
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	d9f4      	bls.n	8005ce4 <_printf_i+0x110>
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d10b      	bne.n	8005d16 <_printf_i+0x142>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	07df      	lsls	r7, r3, #31
 8005d02:	d508      	bpl.n	8005d16 <_printf_i+0x142>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	6861      	ldr	r1, [r4, #4]
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	bfde      	ittt	le
 8005d0c:	2330      	movle	r3, #48	@ 0x30
 8005d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d16:	1b92      	subs	r2, r2, r6
 8005d18:	6122      	str	r2, [r4, #16]
 8005d1a:	f8cd a000 	str.w	sl, [sp]
 8005d1e:	464b      	mov	r3, r9
 8005d20:	aa03      	add	r2, sp, #12
 8005d22:	4621      	mov	r1, r4
 8005d24:	4640      	mov	r0, r8
 8005d26:	f7ff fee7 	bl	8005af8 <_printf_common>
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d14a      	bne.n	8005dc4 <_printf_i+0x1f0>
 8005d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d32:	b004      	add	sp, #16
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	f043 0320 	orr.w	r3, r3, #32
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	4832      	ldr	r0, [pc, #200]	@ (8005e0c <_printf_i+0x238>)
 8005d42:	2778      	movs	r7, #120	@ 0x78
 8005d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	6831      	ldr	r1, [r6, #0]
 8005d4c:	061f      	lsls	r7, r3, #24
 8005d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d52:	d402      	bmi.n	8005d5a <_printf_i+0x186>
 8005d54:	065f      	lsls	r7, r3, #25
 8005d56:	bf48      	it	mi
 8005d58:	b2ad      	uxthmi	r5, r5
 8005d5a:	6031      	str	r1, [r6, #0]
 8005d5c:	07d9      	lsls	r1, r3, #31
 8005d5e:	bf44      	itt	mi
 8005d60:	f043 0320 	orrmi.w	r3, r3, #32
 8005d64:	6023      	strmi	r3, [r4, #0]
 8005d66:	b11d      	cbz	r5, 8005d70 <_printf_i+0x19c>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	e7ad      	b.n	8005cc8 <_printf_i+0xf4>
 8005d6c:	4826      	ldr	r0, [pc, #152]	@ (8005e08 <_printf_i+0x234>)
 8005d6e:	e7e9      	b.n	8005d44 <_printf_i+0x170>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	f023 0320 	bic.w	r3, r3, #32
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	e7f6      	b.n	8005d68 <_printf_i+0x194>
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	e7bd      	b.n	8005cfa <_printf_i+0x126>
 8005d7e:	6833      	ldr	r3, [r6, #0]
 8005d80:	6825      	ldr	r5, [r4, #0]
 8005d82:	6961      	ldr	r1, [r4, #20]
 8005d84:	1d18      	adds	r0, r3, #4
 8005d86:	6030      	str	r0, [r6, #0]
 8005d88:	062e      	lsls	r6, r5, #24
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	d501      	bpl.n	8005d92 <_printf_i+0x1be>
 8005d8e:	6019      	str	r1, [r3, #0]
 8005d90:	e002      	b.n	8005d98 <_printf_i+0x1c4>
 8005d92:	0668      	lsls	r0, r5, #25
 8005d94:	d5fb      	bpl.n	8005d8e <_printf_i+0x1ba>
 8005d96:	8019      	strh	r1, [r3, #0]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	e7bc      	b.n	8005d1a <_printf_i+0x146>
 8005da0:	6833      	ldr	r3, [r6, #0]
 8005da2:	1d1a      	adds	r2, r3, #4
 8005da4:	6032      	str	r2, [r6, #0]
 8005da6:	681e      	ldr	r6, [r3, #0]
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	2100      	movs	r1, #0
 8005dac:	4630      	mov	r0, r6
 8005dae:	f7fa fa37 	bl	8000220 <memchr>
 8005db2:	b108      	cbz	r0, 8005db8 <_printf_i+0x1e4>
 8005db4:	1b80      	subs	r0, r0, r6
 8005db6:	6060      	str	r0, [r4, #4]
 8005db8:	6863      	ldr	r3, [r4, #4]
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc2:	e7aa      	b.n	8005d1a <_printf_i+0x146>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4640      	mov	r0, r8
 8005dcc:	47d0      	blx	sl
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d0ad      	beq.n	8005d2e <_printf_i+0x15a>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	079b      	lsls	r3, r3, #30
 8005dd6:	d413      	bmi.n	8005e00 <_printf_i+0x22c>
 8005dd8:	68e0      	ldr	r0, [r4, #12]
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	bfb8      	it	lt
 8005de0:	4618      	movlt	r0, r3
 8005de2:	e7a6      	b.n	8005d32 <_printf_i+0x15e>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4632      	mov	r2, r6
 8005de8:	4649      	mov	r1, r9
 8005dea:	4640      	mov	r0, r8
 8005dec:	47d0      	blx	sl
 8005dee:	3001      	adds	r0, #1
 8005df0:	d09d      	beq.n	8005d2e <_printf_i+0x15a>
 8005df2:	3501      	adds	r5, #1
 8005df4:	68e3      	ldr	r3, [r4, #12]
 8005df6:	9903      	ldr	r1, [sp, #12]
 8005df8:	1a5b      	subs	r3, r3, r1
 8005dfa:	42ab      	cmp	r3, r5
 8005dfc:	dcf2      	bgt.n	8005de4 <_printf_i+0x210>
 8005dfe:	e7eb      	b.n	8005dd8 <_printf_i+0x204>
 8005e00:	2500      	movs	r5, #0
 8005e02:	f104 0619 	add.w	r6, r4, #25
 8005e06:	e7f5      	b.n	8005df4 <_printf_i+0x220>
 8005e08:	080060cd 	.word	0x080060cd
 8005e0c:	080060de 	.word	0x080060de

08005e10 <memmove>:
 8005e10:	4288      	cmp	r0, r1
 8005e12:	b510      	push	{r4, lr}
 8005e14:	eb01 0402 	add.w	r4, r1, r2
 8005e18:	d902      	bls.n	8005e20 <memmove+0x10>
 8005e1a:	4284      	cmp	r4, r0
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	d807      	bhi.n	8005e30 <memmove+0x20>
 8005e20:	1e43      	subs	r3, r0, #1
 8005e22:	42a1      	cmp	r1, r4
 8005e24:	d008      	beq.n	8005e38 <memmove+0x28>
 8005e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2e:	e7f8      	b.n	8005e22 <memmove+0x12>
 8005e30:	4402      	add	r2, r0
 8005e32:	4601      	mov	r1, r0
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d100      	bne.n	8005e3a <memmove+0x2a>
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e42:	e7f7      	b.n	8005e34 <memmove+0x24>

08005e44 <_sbrk_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	@ (8005e60 <_sbrk_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fa fe22 	bl	8000a98 <_sbrk>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_sbrk_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_sbrk_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	2000425c 	.word	0x2000425c

08005e64 <_realloc_r>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x16>
 8005e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4611      	mov	r1, r2
 8005e76:	f7ff bc5b 	b.w	8005730 <_malloc_r>
 8005e7a:	b92a      	cbnz	r2, 8005e88 <_realloc_r+0x24>
 8005e7c:	f7ff fbec 	bl	8005658 <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	f000 f81a 	bl	8005ec0 <_malloc_usable_size_r>
 8005e8c:	4284      	cmp	r4, r0
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d802      	bhi.n	8005e98 <_realloc_r+0x34>
 8005e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e96:	d8f4      	bhi.n	8005e82 <_realloc_r+0x1e>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f7ff fc48 	bl	8005730 <_malloc_r>
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	b908      	cbnz	r0, 8005ea8 <_realloc_r+0x44>
 8005ea4:	4645      	mov	r5, r8
 8005ea6:	e7ec      	b.n	8005e82 <_realloc_r+0x1e>
 8005ea8:	42b4      	cmp	r4, r6
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	bf28      	it	cs
 8005eb0:	4632      	movcs	r2, r6
 8005eb2:	f7ff fbc3 	bl	800563c <memcpy>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f7ff fbcd 	bl	8005658 <_free_r>
 8005ebe:	e7f1      	b.n	8005ea4 <_realloc_r+0x40>

08005ec0 <_malloc_usable_size_r>:
 8005ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec4:	1f18      	subs	r0, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bfbc      	itt	lt
 8005eca:	580b      	ldrlt	r3, [r1, r0]
 8005ecc:	18c0      	addlt	r0, r0, r3
 8005ece:	4770      	bx	lr

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
