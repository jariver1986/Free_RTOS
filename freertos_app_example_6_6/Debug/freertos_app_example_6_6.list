
freertos_app_example_6_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007984  08007984  000090d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800798c  0800798c  000090d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08007994  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004320  200000d8  08007a6c  000090d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043f8  08007a6c  000093f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165bd  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad0  00000000  00000000  0001f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00023198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6c  00000000  00000000  00024590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025713  00000000  00000000  000254fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c07  00000000  00000000  0004ac0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db028  00000000  00000000  00064816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f83e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  0013f884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001456d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007768 	.word	0x08007768

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08007768 	.word	0x08007768

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000f4 	.word	0x200000f4
 800061c:	20000158 	.word	0x20000158

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000624:	f005 fef4 	bl	8006410 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fb62 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f812 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f8f4 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f8c8 	bl	80007c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000638:	f000 f87a 	bl	8000730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <main+0x30>)
 800063e:	f001 fd3d 	bl	80020bc <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000642:	f005 fa3f 	bl	8005ac4 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 f88b 	bl	8003760 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x2a>
 800064e:	bf00      	nop
 8000650:	20000358 	.word	0x20000358

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	@ 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 f95f 	bl	8006926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	@ (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f9fc 	bl	8001ae0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 f939 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fe6a 	bl	80013e8 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 f923 	bl	8000964 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000762:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000776:	f001 fc51 	bl	800201c <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000780:	f000 f8f0 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000792:	f001 fdf3 	bl	800237c <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f8e2 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_TIM2_Init+0x94>)
 80007ae:	f002 f815 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f8d4 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000358 	.word	0x20000358

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f002 f87c 	bl	80028fc <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8ab 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200003a0 	.word	0x200003a0
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_GPIO_Init+0xd4>)
 80008a8:	f000 fd84 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_GPIO_Init+0xd8>)
 80008c4:	f000 fbca 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c8:	2320      	movs	r3, #32
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0xd4>)
 80008e0:	f000 fbbc 	bl	800105c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020800 	.word	0x40020800

080008f8 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <configureTimerForRunTimeStats+0x14>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	200003e8 	.word	0x200003e8

08000910 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <getRunTimeCounterValue+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200003e8 	.word	0x200003e8

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f9fb 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000946:	d104      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000950:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010000 	.word	0x40010000
 8000960:	200003e8 	.word	0x200003e8

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x54>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <HAL_MspInit+0x54>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x54>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <HAL_MspInit+0x54>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_MspInit+0x54>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f000 fa95 	bl	8000ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d8:	d115      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 fa72 	bl	8000ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a00:	201c      	movs	r0, #28
 8000a02:	f000 fa8b 	bl	8000f1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d133      	bne.n	8000a9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <HAL_UART_MspInit+0x9c>)
 8000a8a:	f000 fae7 	bl	800105c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2105      	movs	r1, #5
 8000a92:	2026      	movs	r0, #38	@ 0x26
 8000a94:	f000 fa26 	bl	8000ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a98:	2026      	movs	r0, #38	@ 0x26
 8000a9a:	f000 fa3f 	bl	8000f1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000acc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fd96 	bl	800161c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af0:	f000 fd80 	bl	80015f4 <HAL_RCC_GetPCLK2Freq>
 8000af4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af8:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <HAL_InitTick+0xd4>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b2a:	4818      	ldr	r0, [pc, #96]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b2c:	f001 fa76 	bl	800201c <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d11b      	bne.n	8000b76 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b40:	f001 fabc 	bl	80020bc <HAL_TIM_Base_Start_IT>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d111      	bne.n	8000b76 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b52:	2019      	movs	r0, #25
 8000b54:	f000 f9e2 	bl	8000f1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d808      	bhi.n	8000b70 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f9be 	bl	8000ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_InitTick+0xe0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e002      	b.n	8000b76 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3730      	adds	r7, #48	@ 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	200003ec 	.word	0x200003ec
 8000b90:	40010000 	.word	0x40010000
 8000b94:	20000004 	.word	0x20000004

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <NMI_Handler+0x4>

08000ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <MemManage_Handler+0x4>

08000bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bd6:	f001 fae1 	bl	800219c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200003ec 	.word	0x200003ec

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM2_IRQHandler+0x10>)
 8000bea:	f001 fad7 	bl	800219c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000358 	.word	0x20000358

08000bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <USART2_IRQHandler+0x10>)
 8000bfe:	f001 fecd 	bl	800299c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200003a0 	.word	0x200003a0

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f005 fec2 	bl	80069c4 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20020000 	.word	0x20020000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000434 	.word	0x20000434
 8000c74:	200043f8 	.word	0x200043f8

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca0:	f7ff ffea 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f005 fe81 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fca7 	bl	8000620 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000ce0:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 8000ce4:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000ce8:	200043f8 	.word	0x200043f8

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f8d8 	bl	8000ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f7ff fec8 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe24 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000438 	.word	0x20000438

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000438 	.word	0x20000438

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff4c 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff61 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb1 	bl	8000e68 <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff80 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff54 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f46:	f7ff ff09 	bl	8000d5c <HAL_GetTick>
 8000f4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d008      	beq.n	8000f6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e052      	b.n	8001010 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0216 	bic.w	r2, r2, #22
 8000f78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <HAL_DMA_Abort+0x62>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0208 	bic.w	r2, r2, #8
 8000fa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fba:	e013      	b.n	8000fe4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbc:	f7ff fece 	bl	8000d5c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d90c      	bls.n	8000fe4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e015      	b.n	8001010 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1e4      	bne.n	8000fbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff6:	223f      	movs	r2, #63	@ 0x3f
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d004      	beq.n	8001036 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00c      	b.n	8001050 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2205      	movs	r2, #5
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e165      	b.n	8001344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8154 	bne.w	800133e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80ae 	beq.w	800133e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b5d      	ldr	r3, [pc, #372]	@ (800135c <HAL_GPIO_Init+0x300>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a5c      	ldr	r2, [pc, #368]	@ (800135c <HAL_GPIO_Init+0x300>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b5a      	ldr	r3, [pc, #360]	@ (800135c <HAL_GPIO_Init+0x300>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a58      	ldr	r2, [pc, #352]	@ (8001360 <HAL_GPIO_Init+0x304>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	@ (8001364 <HAL_GPIO_Init+0x308>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	@ (8001368 <HAL_GPIO_Init+0x30c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	@ (800136c <HAL_GPIO_Init+0x310>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	@ (8001370 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4b      	ldr	r2, [pc, #300]	@ (8001374 <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x20a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4a      	ldr	r2, [pc, #296]	@ (8001378 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x206>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a49      	ldr	r2, [pc, #292]	@ (800137c <HAL_GPIO_Init+0x320>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x202>
 800125a:	2306      	movs	r3, #6
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 800125e:	2307      	movs	r3, #7
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x21c>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	@ (8001360 <HAL_GPIO_Init+0x304>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <HAL_GPIO_Init+0x324>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a31      	ldr	r2, [pc, #196]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a26      	ldr	r2, [pc, #152]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <HAL_GPIO_Init+0x324>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_GPIO_Init+0x324>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <HAL_GPIO_Init+0x324>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae96 	bls.w	8001078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e001      	b.n	80013a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0cc      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d90c      	bls.n	8001424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a58      	ldr	r2, [pc, #352]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800145e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d044      	beq.n	8001508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d119      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e06f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e067      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4934      	ldr	r1, [pc, #208]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fc40 	bl	8000d5c <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff fc3c 	bl	8000d5c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e04f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20c      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f887 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490a      	ldr	r1, [pc, #40]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fa90 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	08007918 	.word	0x08007918
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	4903      	ldr	r1, [pc, #12]	@ (80015f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08007928 	.word	0x08007928

080015f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f8:	f7ff ffdc 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0b5b      	lsrs	r3, r3, #13
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	@ (8001618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	08007928 	.word	0x08007928

0800161c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	220f      	movs	r2, #15
 800162a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_RCC_GetClockConfig+0x5c>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_RCC_GetClockConfig+0x5c>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_RCC_GetClockConfig+0x5c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_GetClockConfig+0x5c>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <HAL_RCC_GetClockConfig+0x60>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 020f 	and.w	r2, r3, #15
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b0ae      	sub	sp, #184	@ 0xb8
 8001686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a6:	4bcb      	ldr	r3, [pc, #812]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f200 8206 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x440>
 80016b4:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	08001ac1 	.word	0x08001ac1
 80016c4:	08001ac1 	.word	0x08001ac1
 80016c8:	08001ac1 	.word	0x08001ac1
 80016cc:	080016f9 	.word	0x080016f9
 80016d0:	08001ac1 	.word	0x08001ac1
 80016d4:	08001ac1 	.word	0x08001ac1
 80016d8:	08001ac1 	.word	0x08001ac1
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001ac1 	.word	0x08001ac1
 80016e4:	08001ac1 	.word	0x08001ac1
 80016e8:	08001ac1 	.word	0x08001ac1
 80016ec:	080018f1 	.word	0x080018f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4bb9      	ldr	r3, [pc, #740]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016f6:	e1e7      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f8:	4bb8      	ldr	r3, [pc, #736]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016fe:	e1e3      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	4bb4      	ldr	r3, [pc, #720]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170c:	4bb1      	ldr	r3, [pc, #708]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d071      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4bae      	ldr	r3, [pc, #696]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800172c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800173a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800173e:	4622      	mov	r2, r4
 8001740:	462b      	mov	r3, r5
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	0159      	lsls	r1, r3, #5
 800174c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001750:	0150      	lsls	r0, r2, #5
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4621      	mov	r1, r4
 8001758:	1a51      	subs	r1, r2, r1
 800175a:	6439      	str	r1, [r7, #64]	@ 0x40
 800175c:	4629      	mov	r1, r5
 800175e:	eb63 0301 	sbc.w	r3, r3, r1
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001770:	4649      	mov	r1, r9
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4641      	mov	r1, r8
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4641      	mov	r1, r8
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4641      	mov	r1, r8
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001784:	4649      	mov	r1, r9
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001798:	4649      	mov	r1, r9
 800179a:	00cb      	lsls	r3, r1, #3
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017a2:	4641      	mov	r1, r8
 80017a4:	00ca      	lsls	r2, r1, #3
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	4622      	mov	r2, r4
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b2:	462b      	mov	r3, r5
 80017b4:	460a      	mov	r2, r1
 80017b6:	eb42 0303 	adc.w	r3, r2, r3
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017c8:	4629      	mov	r1, r5
 80017ca:	024b      	lsls	r3, r1, #9
 80017cc:	4621      	mov	r1, r4
 80017ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017d2:	4621      	mov	r1, r4
 80017d4:	024a      	lsls	r2, r1, #9
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80017ec:	f7fe fd68 	bl	80002c0 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017fa:	e067      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4b75      	ldr	r3, [pc, #468]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001808:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800180c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001814:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001816:	2300      	movs	r3, #0
 8001818:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800181a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4621      	mov	r1, r4
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800183c:	4629      	mov	r1, r5
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001850:	4649      	mov	r1, r9
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	4641      	mov	r1, r8
 8001856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185a:	4641      	mov	r1, r8
 800185c:	018a      	lsls	r2, r1, #6
 800185e:	4641      	mov	r1, r8
 8001860:	ebb2 0a01 	subs.w	sl, r2, r1
 8001864:	4649      	mov	r1, r9
 8001866:	eb63 0b01 	sbc.w	fp, r3, r1
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001876:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800187a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800187e:	4692      	mov	sl, r2
 8001880:	469b      	mov	fp, r3
 8001882:	4623      	mov	r3, r4
 8001884:	eb1a 0303 	adds.w	r3, sl, r3
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	462b      	mov	r3, r5
 800188c:	eb4b 0303 	adc.w	r3, fp, r3
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800189e:	4629      	mov	r1, r5
 80018a0:	028b      	lsls	r3, r1, #10
 80018a2:	4621      	mov	r1, r4
 80018a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a8:	4621      	mov	r1, r4
 80018aa:	028a      	lsls	r2, r1, #10
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b4:	2200      	movs	r2, #0
 80018b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80018b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80018ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018be:	f7fe fcff 	bl	80002c0 <__aeabi_uldivmod>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4613      	mov	r3, r2
 80018c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018cc:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80018de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ee:	e0eb      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f0:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fc:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d06b      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001908:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	2200      	movs	r2, #0
 8001910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191a:	663b      	str	r3, [r7, #96]	@ 0x60
 800191c:	2300      	movs	r3, #0
 800191e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001920:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001924:	4622      	mov	r2, r4
 8001926:	462b      	mov	r3, r5
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	0159      	lsls	r1, r3, #5
 8001932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001936:	0150      	lsls	r0, r2, #5
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4621      	mov	r1, r4
 800193e:	1a51      	subs	r1, r2, r1
 8001940:	61b9      	str	r1, [r7, #24]
 8001942:	4629      	mov	r1, r5
 8001944:	eb63 0301 	sbc.w	r3, r3, r1
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001956:	4659      	mov	r1, fp
 8001958:	018b      	lsls	r3, r1, #6
 800195a:	4651      	mov	r1, sl
 800195c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001960:	4651      	mov	r1, sl
 8001962:	018a      	lsls	r2, r1, #6
 8001964:	4651      	mov	r1, sl
 8001966:	ebb2 0801 	subs.w	r8, r2, r1
 800196a:	4659      	mov	r1, fp
 800196c:	eb63 0901 	sbc.w	r9, r3, r1
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800197c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001984:	4690      	mov	r8, r2
 8001986:	4699      	mov	r9, r3
 8001988:	4623      	mov	r3, r4
 800198a:	eb18 0303 	adds.w	r3, r8, r3
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	462b      	mov	r3, r5
 8001992:	eb49 0303 	adc.w	r3, r9, r3
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019a4:	4629      	mov	r1, r5
 80019a6:	024b      	lsls	r3, r1, #9
 80019a8:	4621      	mov	r1, r4
 80019aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ae:	4621      	mov	r1, r4
 80019b0:	024a      	lsls	r2, r1, #9
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ba:	2200      	movs	r2, #0
 80019bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019c4:	f7fe fc7c 	bl	80002c0 <__aeabi_uldivmod>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4613      	mov	r3, r2
 80019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019d2:	e065      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x420>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	2200      	movs	r2, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	4611      	mov	r1, r2
 80019ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80019f2:	2300      	movs	r3, #0
 80019f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80019f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80019fa:	4642      	mov	r2, r8
 80019fc:	464b      	mov	r3, r9
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	0159      	lsls	r1, r3, #5
 8001a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0c:	0150      	lsls	r0, r2, #5
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4641      	mov	r1, r8
 8001a14:	1a51      	subs	r1, r2, r1
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	4649      	mov	r1, r9
 8001a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	018b      	lsls	r3, r1, #6
 8001a30:	4651      	mov	r1, sl
 8001a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a36:	4651      	mov	r1, sl
 8001a38:	018a      	lsls	r2, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	1a54      	subs	r4, r2, r1
 8001a3e:	4659      	mov	r1, fp
 8001a40:	eb63 0501 	sbc.w	r5, r3, r1
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	00eb      	lsls	r3, r5, #3
 8001a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a52:	00e2      	lsls	r2, r4, #3
 8001a54:	4614      	mov	r4, r2
 8001a56:	461d      	mov	r5, r3
 8001a58:	4643      	mov	r3, r8
 8001a5a:	18e3      	adds	r3, r4, r3
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	464b      	mov	r3, r9
 8001a60:	eb45 0303 	adc.w	r3, r5, r3
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a72:	4629      	mov	r1, r5
 8001a74:	028b      	lsls	r3, r1, #10
 8001a76:	4621      	mov	r1, r4
 8001a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	028a      	lsls	r2, r1, #10
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a88:	2200      	movs	r2, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a92:	f7fe fc15 	bl	80002c0 <__aeabi_uldivmod>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0f1b      	lsrs	r3, r3, #28
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001abe:	e003      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	37b8      	adds	r7, #184	@ 0xb8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400

08001ae0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e28d      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8083 	beq.w	8001c06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b00:	4b94      	ldr	r3, [pc, #592]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d019      	beq.n	8001b40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b0c:	4b91      	ldr	r3, [pc, #580]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b18:	4b8e      	ldr	r3, [pc, #568]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b24:	d00c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4b8b      	ldr	r3, [pc, #556]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b32:	4b88      	ldr	r3, [pc, #544]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4b84      	ldr	r3, [pc, #528]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x124>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e25a      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x90>
 8001b62:	4b7c      	ldr	r3, [pc, #496]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7b      	ldr	r2, [pc, #492]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xcc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xb4>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xcc>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f8d2 	bl	8000d5c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f8ce 	bl	8000d5c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e21f      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xdc>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8be 	bl	8000d5c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f8ba 	bl	8000d5c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e20b      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b57      	ldr	r3, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x104>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06f      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c12:	4b50      	ldr	r3, [pc, #320]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d017      	beq.n	8001c4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x186>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1d3      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4937      	ldr	r1, [pc, #220]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b34      	ldr	r3, [pc, #208]	@ (8001d58 <HAL_RCC_OscConfig+0x278>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f867 	bl	8000d5c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f863 	bl	8000d5c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1b4      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4925      	ldr	r1, [pc, #148]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <HAL_RCC_OscConfig+0x278>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f846 	bl	8000d5c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f842 	bl	8000d5c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e193      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d036      	beq.n	8001d6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d016      	beq.n	8001d34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f826 	bl	8000d5c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f822 	bl	8000d5c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e173      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x234>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_OscConfig+0x27c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f80f 	bl	8000d5c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e00e      	b.n	8001d60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff f80b 	bl	8000d5c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d907      	bls.n	8001d60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e15c      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b8a      	ldr	r3, [pc, #552]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ea      	bne.n	8001d42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8097 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b83      	ldr	r3, [pc, #524]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a7e      	ldr	r2, [pc, #504]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b79      	ldr	r3, [pc, #484]	@ (8001f90 <HAL_RCC_OscConfig+0x4b0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_RCC_OscConfig+0x4b0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	@ (8001f90 <HAL_RCC_OscConfig+0x4b0>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ffcb 	bl	8000d5c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7fe ffc7 	bl	8000d5c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e118      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <HAL_RCC_OscConfig+0x4b0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x31e>
 8001df0:	4b66      	ldr	r3, [pc, #408]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df4:	4a65      	ldr	r2, [pc, #404]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x358>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x340>
 8001e06:	4b61      	ldr	r3, [pc, #388]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0a:	4a60      	ldr	r2, [pc, #384]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e12:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	4a5d      	ldr	r2, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0x358>
 8001e20:	4b5a      	ldr	r3, [pc, #360]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a59      	ldr	r2, [pc, #356]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2c:	4b57      	ldr	r3, [pc, #348]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	4a56      	ldr	r2, [pc, #344]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	f023 0304 	bic.w	r3, r3, #4
 8001e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d015      	beq.n	8001e6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7fe ff8c 	bl	8000d5c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe ff88 	bl	8000d5c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0d7      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ee      	beq.n	8001e48 <HAL_RCC_OscConfig+0x368>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7fe ff76 	bl	8000d5c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7fe ff72 	bl	8000d5c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0c1      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	4b40      	ldr	r3, [pc, #256]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ee      	bne.n	8001e74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80ad 	beq.w	800200c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d060      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d145      	bne.n	8001f52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <HAL_RCC_OscConfig+0x4b4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ff46 	bl	8000d5c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe ff42 	bl	8000d5c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e093      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	041b      	lsls	r3, r3, #16
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	071b      	lsls	r3, r3, #28
 8001f1e:	491b      	ldr	r1, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x4b4>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7fe ff17 	bl	8000d5c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe ff13 	bl	8000d5c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e064      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x452>
 8001f50:	e05c      	b.n	800200c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <HAL_RCC_OscConfig+0x4b4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff00 	bl	8000d5c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fefc 	bl	8000d5c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e04d      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x480>
 8001f7e:	e045      	b.n	800200c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e040      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <HAL_RCC_OscConfig+0x538>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d030      	beq.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d129      	bne.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d122      	bne.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d119      	bne.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10f      	bne.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e041      	b.n	80020b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fcc0 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f000 fa7e 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04e      	b.n	8002172 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_TIM_Base_Start_IT+0xc4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d022      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fe:	d01d      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <HAL_TIM_Base_Start_IT+0xc8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d018      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1e      	ldr	r2, [pc, #120]	@ (8002188 <HAL_TIM_Base_Start_IT+0xcc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_TIM_Base_Start_IT+0xd0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00e      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <HAL_TIM_Base_Start_IT+0xd4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_TIM_Base_Start_IT+0xd8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x80>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_TIM_Base_Start_IT+0xdc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b06      	cmp	r3, #6
 800214c:	d010      	beq.n	8002170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215e:	e007      	b.n	8002170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40010400 	.word	0x40010400
 8002194:	40014000 	.word	0x40014000
 8002198:	40001800 	.word	0x40001800

0800219c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01b      	beq.n	8002200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0202 	mvn.w	r2, #2
 80021d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f999 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f98b 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f99c 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d020      	beq.n	800224c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0204 	mvn.w	r2, #4
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f973 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f965 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f976 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d020      	beq.n	8002298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0208 	mvn.w	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f94d 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f93f 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f950 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d020      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0210 	mvn.w	r2, #16
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2208      	movs	r2, #8
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f927 	bl	800251e <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f919 	bl	800250a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f92a 	bl	8002532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0201 	mvn.w	r2, #1
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fb10 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fade 	bl	80028e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8fb 	bl	8002546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0220 	mvn.w	r2, #32
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fab0 	bl	80028d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_TIM_ConfigClockSource+0x1c>
 8002394:	2302      	movs	r3, #2
 8002396:	e0b4      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x186>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d0:	d03e      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0xd4>
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d6:	f200 8087 	bhi.w	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023de:	f000 8086 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x172>
 80023e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e6:	d87f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b70      	cmp	r3, #112	@ 0x70
 80023ea:	d01a      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xa6>
 80023ec:	2b70      	cmp	r3, #112	@ 0x70
 80023ee:	d87b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b60      	cmp	r3, #96	@ 0x60
 80023f2:	d050      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x11a>
 80023f4:	2b60      	cmp	r3, #96	@ 0x60
 80023f6:	d877      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b50      	cmp	r3, #80	@ 0x50
 80023fa:	d03c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0xfa>
 80023fc:	2b50      	cmp	r3, #80	@ 0x50
 80023fe:	d873      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d058      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d86f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b30      	cmp	r3, #48	@ 0x30
 800240a:	d064      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	2b30      	cmp	r3, #48	@ 0x30
 800240e:	d86b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d060      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d867      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800241c:	2b10      	cmp	r3, #16
 800241e:	d05a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002420:	e062      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002432:	f000 f9b3 	bl	800279c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
      break;
 800244e:	e04f      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002460:	f000 f99c 	bl	800279c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002472:	609a      	str	r2, [r3, #8]
      break;
 8002474:	e03c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002482:	461a      	mov	r2, r3
 8002484:	f000 f910 	bl	80026a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2150      	movs	r1, #80	@ 0x50
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f969 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 8002494:	e02c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 f92f 	bl	8002706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2160      	movs	r1, #96	@ 0x60
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f959 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 80024b4:	e01c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 f8f0 	bl	80026a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	@ 0x40
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f949 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 80024d4:	e00c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f000 f940 	bl	8002766 <TIM_ITRx_SetConfig>
      break;
 80024e6:	e003      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e000      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a43      	ldr	r2, [pc, #268]	@ (800267c <TIM_Base_SetConfig+0x120>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d00f      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a40      	ldr	r2, [pc, #256]	@ (8002680 <TIM_Base_SetConfig+0x124>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3f      	ldr	r2, [pc, #252]	@ (8002684 <TIM_Base_SetConfig+0x128>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <TIM_Base_SetConfig+0x12c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3d      	ldr	r2, [pc, #244]	@ (800268c <TIM_Base_SetConfig+0x130>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a32      	ldr	r2, [pc, #200]	@ (800267c <TIM_Base_SetConfig+0x120>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d027      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <TIM_Base_SetConfig+0x124>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d023      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <TIM_Base_SetConfig+0x128>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <TIM_Base_SetConfig+0x12c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <TIM_Base_SetConfig+0x130>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d017      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <TIM_Base_SetConfig+0x134>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <TIM_Base_SetConfig+0x138>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <TIM_Base_SetConfig+0x13c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a28      	ldr	r2, [pc, #160]	@ (800269c <TIM_Base_SetConfig+0x140>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a27      	ldr	r2, [pc, #156]	@ (80026a0 <TIM_Base_SetConfig+0x144>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a26      	ldr	r2, [pc, #152]	@ (80026a4 <TIM_Base_SetConfig+0x148>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <TIM_Base_SetConfig+0x120>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0xf2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a10      	ldr	r2, [pc, #64]	@ (800268c <TIM_Base_SetConfig+0x130>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d103      	bne.n	8002656 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f043 0204 	orr.w	r2, r3, #4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	40010400 	.word	0x40010400
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	40001800 	.word	0x40001800
 80026a0:	40001c00 	.word	0x40001c00
 80026a4:	40002000 	.word	0x40002000

080026a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 030a 	bic.w	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002706:	b480      	push	{r7}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f023 0210 	bic.w	r2, r3, #16
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	031b      	lsls	r3, r3, #12
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	621a      	str	r2, [r3, #32]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	f043 0307 	orr.w	r3, r3, #7
 8002788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	431a      	orrs	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e05a      	b.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d022      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002840:	d01d      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1d      	ldr	r2, [pc, #116]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10c      	bne.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4313      	orrs	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40010400 	.word	0x40010400
 80028cc:	40014000 	.word	0x40014000
 80028d0:	40001800 	.word	0x40001800

080028d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e042      	b.n	8002994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f876 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	@ 0x24
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800293e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fc99 	bl	8003278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0ba      	sub	sp, #232	@ 0xe8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x66>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fb7e 	bl	80030fc <UART_Receive_IT>
      return;
 8002a00:	e273      	b.n	8002eea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80de 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x22c>
 8002a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80d1 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_UART_IRQHandler+0xae>
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_UART_IRQHandler+0xd2>
 8002a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_UART_IRQHandler+0xf6>
 8002a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x126>
 8002a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f043 0208 	orr.w	r2, r3, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 820a 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_UART_IRQHandler+0x14e>
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fb09 	bl	80030fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af4:	2b40      	cmp	r3, #64	@ 0x40
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_UART_IRQHandler+0x17a>
 8002b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04f      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa14 	bl	8002f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d141      	bne.n	8002bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3314      	adds	r3, #20
 8002b30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1d9      	bne.n	8002b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	4a8a      	ldr	r2, [pc, #552]	@ (8002dac <HAL_UART_IRQHandler+0x410>)
 8002b84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa44 	bl	8001018 <HAL_DMA_Abort_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	e00e      	b.n	8002bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f9b6 	bl	8002f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	e00a      	b.n	8002bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9b2 	bl	8002f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	e006      	b.n	8002bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9ae 	bl	8002f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002bc2:	e18d      	b.n	8002ee0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	bf00      	nop
    return;
 8002bc6:	e18b      	b.n	8002ee0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 8167 	bne.w	8002ea0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8160 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8159 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	f040 80ce 	bne.w	8002db0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a9 	beq.w	8002d7c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c32:	429a      	cmp	r2, r3
 8002c34:	f080 80a2 	bcs.w	8002d7c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4a:	f000 8088 	beq.w	8002d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1d9      	bne.n	8002c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002caa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e1      	bne.n	8002c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e3      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d2e:	f023 0310 	bic.w	r3, r3, #16
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e3      	bne.n	8002d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f8ed 	bl	8000f38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8d9 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d7a:	e0b3      	b.n	8002ee4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 80ad 	bne.w	8002ee4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d94:	f040 80a6 	bne.w	8002ee4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8c1 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
      return;
 8002daa:	e09b      	b.n	8002ee4 <HAL_UART_IRQHandler+0x548>
 8002dac:	0800300b 	.word	0x0800300b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 808e 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8089 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002dfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002dfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e32:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	617b      	str	r3, [r7, #20]
   return(result);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e3      	bne.n	8002e54 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f847 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9e:	e023      	b.n	8002ee8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x524>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8b7 	bl	800302c <UART_Transmit_IT>
    return;
 8002ebe:	e014      	b.n	8002eea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <HAL_UART_IRQHandler+0x54e>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f8f7 	bl	80030cc <UART_EndTransmit_IT>
    return;
 8002ede:	e004      	b.n	8002eea <HAL_UART_IRQHandler+0x54e>
    return;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <HAL_UART_IRQHandler+0x54e>
      return;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_UART_IRQHandler+0x54e>
      return;
 8002ee8:	bf00      	nop
  }
}
 8002eea:	37e8      	adds	r7, #232	@ 0xe8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b095      	sub	sp, #84	@ 0x54
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e5      	bne.n	8002f80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d119      	bne.n	8002ff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 0310 	bic.w	r3, r3, #16
 8002fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fdc:	61ba      	str	r2, [r7, #24]
 8002fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ffe:	bf00      	nop
 8003000:	3754      	adds	r7, #84	@ 0x54
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff ff7a 	bl	8002f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b21      	cmp	r3, #33	@ 0x21
 800303e:	d13e      	bne.n	80030be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003048:	d114      	bne.n	8003074 <UART_Transmit_IT+0x48>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d110      	bne.n	8003074 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003066:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	1c9a      	adds	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	621a      	str	r2, [r3, #32]
 8003072:	e008      	b.n	8003086 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	1c59      	adds	r1, r3, #1
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6211      	str	r1, [r2, #32]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4619      	mov	r1, r3
 8003094:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff feff 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	@ 0x30
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b22      	cmp	r3, #34	@ 0x22
 8003116:	f040 80aa 	bne.w	800326e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003122:	d115      	bne.n	8003150 <UART_Receive_IT+0x54>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	b29a      	uxth	r2, r3
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
 800314e:	e024      	b.n	800319a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315e:	d007      	beq.n	8003170 <UART_Receive_IT+0x74>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <UART_Receive_IT+0x82>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e008      	b.n	8003190 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800318a:	b2da      	uxtb	r2, r3
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d15d      	bne.n	800326a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0220 	bic.w	r2, r2, #32
 80031bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d135      	bne.n	8003260 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321a:	623a      	str	r2, [r7, #32]
 800321c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	69f9      	ldr	r1, [r7, #28]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	61bb      	str	r3, [r7, #24]
   return(result);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d10a      	bne.n	8003252 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fe67 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
 800325e:	e002      	b.n	8003266 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fe4f 	bl	8002f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e002      	b.n	8003270 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3730      	adds	r7, #48	@ 0x30
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0c0      	sub	sp, #256	@ 0x100
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	ea40 0301 	orr.w	r3, r0, r1
 80032a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032d0:	f021 010c 	bic.w	r1, r1, #12
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032de:	430b      	orrs	r3, r1
 80032e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	6999      	ldr	r1, [r3, #24]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	ea40 0301 	orr.w	r3, r0, r1
 80032fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8f      	ldr	r3, [pc, #572]	@ (8003544 <UART_SetConfig+0x2cc>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d005      	beq.n	8003318 <UART_SetConfig+0xa0>
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b8d      	ldr	r3, [pc, #564]	@ (8003548 <UART_SetConfig+0x2d0>)
 8003314:	429a      	cmp	r2, r3
 8003316:	d104      	bne.n	8003322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7fe f96c 	bl	80015f4 <HAL_RCC_GetPCLK2Freq>
 800331c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003320:	e003      	b.n	800332a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7fe f953 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8003326:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003334:	f040 810c 	bne.w	8003550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003342:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003352:	415b      	adcs	r3, r3
 8003354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800335a:	4621      	mov	r1, r4
 800335c:	eb12 0801 	adds.w	r8, r2, r1
 8003360:	4629      	mov	r1, r5
 8003362:	eb43 0901 	adc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003388:	462b      	mov	r3, r5
 800338a:	eb49 0303 	adc.w	r3, r9, r3
 800338e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800339e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033a6:	460b      	mov	r3, r1
 80033a8:	18db      	adds	r3, r3, r3
 80033aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ac:	4613      	mov	r3, r2
 80033ae:	eb42 0303 	adc.w	r3, r2, r3
 80033b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033bc:	f7fc ff80 	bl	80002c0 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4b61      	ldr	r3, [pc, #388]	@ (800354c <UART_SetConfig+0x2d4>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	011c      	lsls	r4, r3, #4
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033e8:	415b      	adcs	r3, r3
 80033ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033f0:	4641      	mov	r1, r8
 80033f2:	eb12 0a01 	adds.w	sl, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb43 0b01 	adc.w	fp, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800340c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003410:	4692      	mov	sl, r2
 8003412:	469b      	mov	fp, r3
 8003414:	4643      	mov	r3, r8
 8003416:	eb1a 0303 	adds.w	r3, sl, r3
 800341a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800341e:	464b      	mov	r3, r9
 8003420:	eb4b 0303 	adc.w	r3, fp, r3
 8003424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003434:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800343c:	460b      	mov	r3, r1
 800343e:	18db      	adds	r3, r3, r3
 8003440:	643b      	str	r3, [r7, #64]	@ 0x40
 8003442:	4613      	mov	r3, r2
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800344e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003452:	f7fc ff35 	bl	80002c0 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4611      	mov	r1, r2
 800345c:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <UART_SetConfig+0x2d4>)
 800345e:	fba3 2301 	umull	r2, r3, r3, r1
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2264      	movs	r2, #100	@ 0x64
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	1acb      	subs	r3, r1, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <UART_SetConfig+0x2d4>)
 8003474:	fba3 2302 	umull	r2, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003480:	441c      	add	r4, r3
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800348c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	1891      	adds	r1, r2, r2
 800349a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800349c:	415b      	adcs	r3, r3
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034a4:	4641      	mov	r1, r8
 80034a6:	1851      	adds	r1, r2, r1
 80034a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80034aa:	4649      	mov	r1, r9
 80034ac:	414b      	adcs	r3, r1
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034bc:	4659      	mov	r1, fp
 80034be:	00cb      	lsls	r3, r1, #3
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c6:	4651      	mov	r1, sl
 80034c8:	00ca      	lsls	r2, r1, #3
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	4642      	mov	r2, r8
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034d8:	464b      	mov	r3, r9
 80034da:	460a      	mov	r2, r1
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034f8:	460b      	mov	r3, r1
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fe:	4613      	mov	r3, r2
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800350a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800350e:	f7fc fed7 	bl	80002c0 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <UART_SetConfig+0x2d4>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	@ 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3332      	adds	r3, #50	@ 0x32
 800352a:	4a08      	ldr	r2, [pc, #32]	@ (800354c <UART_SetConfig+0x2d4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f003 0207 	and.w	r2, r3, #7
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4422      	add	r2, r4
 800353e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003540:	e106      	b.n	8003750 <UART_SetConfig+0x4d8>
 8003542:	bf00      	nop
 8003544:	40011000 	.word	0x40011000
 8003548:	40011400 	.word	0x40011400
 800354c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800355a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800355e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	6239      	str	r1, [r7, #32]
 800356a:	415b      	adcs	r3, r3
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003572:	4641      	mov	r1, r8
 8003574:	1854      	adds	r4, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb43 0501 	adc.w	r5, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	00eb      	lsls	r3, r5, #3
 8003586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358a:	00e2      	lsls	r2, r4, #3
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	4643      	mov	r3, r8
 8003592:	18e3      	adds	r3, r4, r3
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003598:	464b      	mov	r3, r9
 800359a:	eb45 0303 	adc.w	r3, r5, r3
 800359e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035be:	4629      	mov	r1, r5
 80035c0:	008b      	lsls	r3, r1, #2
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c8:	4621      	mov	r1, r4
 80035ca:	008a      	lsls	r2, r1, #2
 80035cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035d0:	f7fc fe76 	bl	80002c0 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4b60      	ldr	r3, [pc, #384]	@ (800375c <UART_SetConfig+0x4e4>)
 80035da:	fba3 2302 	umull	r2, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011c      	lsls	r4, r3, #4
 80035e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	61b9      	str	r1, [r7, #24]
 80035fc:	415b      	adcs	r3, r3
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003604:	4641      	mov	r1, r8
 8003606:	1851      	adds	r1, r2, r1
 8003608:	6139      	str	r1, [r7, #16]
 800360a:	4649      	mov	r1, r9
 800360c:	414b      	adcs	r3, r1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800361c:	4659      	mov	r1, fp
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4651      	mov	r1, sl
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4642      	mov	r2, r8
 8003632:	189b      	adds	r3, r3, r2
 8003634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003638:	464b      	mov	r3, r9
 800363a:	460a      	mov	r2, r1
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800364e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800365c:	4649      	mov	r1, r9
 800365e:	008b      	lsls	r3, r1, #2
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003666:	4641      	mov	r1, r8
 8003668:	008a      	lsls	r2, r1, #2
 800366a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800366e:	f7fc fe27 	bl	80002c0 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4611      	mov	r1, r2
 8003678:	4b38      	ldr	r3, [pc, #224]	@ (800375c <UART_SetConfig+0x4e4>)
 800367a:	fba3 2301 	umull	r2, r3, r3, r1
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2264      	movs	r2, #100	@ 0x64
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	1acb      	subs	r3, r1, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	@ 0x32
 800368c:	4a33      	ldr	r2, [pc, #204]	@ (800375c <UART_SetConfig+0x4e4>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	441c      	add	r4, r3
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80036a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	1891      	adds	r1, r2, r2
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	415b      	adcs	r3, r3
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b8:	4641      	mov	r1, r8
 80036ba:	1851      	adds	r1, r2, r1
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	4649      	mov	r1, r9
 80036c0:	414b      	adcs	r3, r1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036d0:	4659      	mov	r1, fp
 80036d2:	00cb      	lsls	r3, r1, #3
 80036d4:	4651      	mov	r1, sl
 80036d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036da:	4651      	mov	r1, sl
 80036dc:	00ca      	lsls	r2, r1, #3
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	4642      	mov	r2, r8
 80036e6:	189b      	adds	r3, r3, r2
 80036e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ea:	464b      	mov	r3, r9
 80036ec:	460a      	mov	r2, r1
 80036ee:	eb42 0303 	adc.w	r3, r2, r3
 80036f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80036fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800370c:	4649      	mov	r1, r9
 800370e:	008b      	lsls	r3, r1, #2
 8003710:	4641      	mov	r1, r8
 8003712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003716:	4641      	mov	r1, r8
 8003718:	008a      	lsls	r2, r1, #2
 800371a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800371e:	f7fc fdcf 	bl	80002c0 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <UART_SetConfig+0x4e4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	@ 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	@ 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <UART_SetConfig+0x4e4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4422      	add	r2, r4
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003764:	f000 ff26 	bl	80045b4 <vTaskStartScheduler>
  
  return osOK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	bd80      	pop	{r7, pc}

0800376e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 0208 	add.w	r2, r3, #8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 0208 	add.w	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f103 0208 	add.w	r2, r3, #8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d103      	bne.n	8003830 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e00c      	b.n	800384a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3308      	adds	r3, #8
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e002      	b.n	800383e <vListInsert+0x2e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d2f6      	bcs.n	8003838 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6892      	ldr	r2, [r2, #8]
 8003898:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6852      	ldr	r2, [r2, #4]
 80038a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d103      	bne.n	80038b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003904:	f001 fe10 	bl	8005528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	441a      	add	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	3b01      	subs	r3, #1
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	441a      	add	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	@ 0xff
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	22ff      	movs	r2, #255	@ 0xff
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01a      	beq.n	8003998 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3310      	adds	r3, #16
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f8c2 	bl	8004af0 <xTaskRemoveFromEventList>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <xQueueGenericReset+0xd0>)
 8003974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	e009      	b.n	8003998 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fef0 	bl	800376e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3324      	adds	r3, #36	@ 0x24
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff feeb 	bl	800376e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003998:	f001 fdf8 	bl	800558c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800399c:	2301      	movs	r3, #1
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	613b      	str	r3, [r7, #16]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3350      	adds	r3, #80	@ 0x50
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fe7e 	bl	80056e8 <pvPortMalloc>
 80039ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d011      	beq.n	8003a18 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3350      	adds	r3, #80	@ 0x50
 80039fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a06:	79fa      	ldrb	r2, [r7, #7]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f805 	bl	8003a22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a18:	69bb      	ldr	r3, [r7, #24]
	}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e002      	b.n	8003a44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a50:	2101      	movs	r1, #1
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	f7ff ff40 	bl	80038d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f81c 	bl	8003acc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6939      	ldr	r1, [r7, #16]
 8003ab4:	6978      	ldr	r0, [r7, #20]
 8003ab6:	f7ff ff79 	bl	80039ac <xQueueGenericCreate>
 8003aba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff ffd3 	bl	8003a68 <prvInitialiseMutex>

		return xNewQueue;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	@ 0x38
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ada:	2300      	movs	r3, #0
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <xQueueGenericSend+0x34>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueGenericSend+0x42>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <xQueueGenericSend+0x46>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueGenericSend+0x48>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSend+0x64>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x72>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x76>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x78>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xQueueGenericSend+0x94>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b60:	f001 f988 	bl	8004e74 <xTaskGetSchedulerState>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <xQueueGenericSend+0xa4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <xQueueGenericSend+0xa8>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <xQueueGenericSend+0xaa>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <xQueueGenericSend+0xc6>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	61fb      	str	r3, [r7, #28]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b92:	f001 fcc9 	bl	8005528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <xQueueGenericSend+0xdc>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d129      	bne.n	8003bfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bae:	f000 f9b7 	bl	8003f20 <prvCopyDataToQueue>
 8003bb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d010      	beq.n	8003bde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	3324      	adds	r3, #36	@ 0x24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ff95 	bl	8004af0 <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d013      	beq.n	8003bf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <xQueueGenericSend+0x200>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	e00a      	b.n	8003bf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003be4:	4b39      	ldr	r3, [pc, #228]	@ (8003ccc <xQueueGenericSend+0x200>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bf4:	f001 fcca 	bl	800558c <vPortExitCritical>
				return pdPASS;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e063      	b.n	8003cc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c02:	f001 fcc3 	bl	800558c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e05c      	b.n	8003cc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ffcf 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c1e:	f001 fcb5 	bl	800558c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c22:	f000 fd2b 	bl	800467c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c26:	f001 fc7f 	bl	8005528 <vPortEnterCritical>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d103      	bne.n	8003c40 <xQueueGenericSend+0x174>
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c46:	b25b      	sxtb	r3, r3
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSend+0x18a>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c56:	f001 fc99 	bl	800558c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c5a:	1d3a      	adds	r2, r7, #4
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 ffbe 	bl	8004be4 <xTaskCheckForTimeOut>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d124      	bne.n	8003cb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c70:	f000 fa28 	bl	80040c4 <prvIsQueueFull>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff0e 	bl	8004aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c8a:	f000 f9b3 	bl	8003ff4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c8e:	f000 fd03 	bl	8004698 <xTaskResumeAll>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f af7c 	bne.w	8003b92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <xQueueGenericSend+0x200>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	e772      	b.n	8003b92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cae:	f000 f9a1 	bl	8003ff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cb2:	f000 fcf1 	bl	8004698 <xTaskResumeAll>
 8003cb6:	e76c      	b.n	8003b92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cba:	f000 f99b 	bl	8003ff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cbe:	f000 fceb 	bl	8004698 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3738      	adds	r7, #56	@ 0x38
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	@ 0x38
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	623b      	str	r3, [r7, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	61fb      	str	r3, [r7, #28]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d24:	f001 f8a6 	bl	8004e74 <xTaskGetSchedulerState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <xQueueSemaphoreTake+0x64>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <xQueueSemaphoreTake+0x68>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <xQueueSemaphoreTake+0x6a>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61bb      	str	r3, [r7, #24]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d56:	f001 fbe7 	bl	8005528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d76:	f001 fa29 	bl	80051cc <pvTaskIncrementMutexHeldCount>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00f      	beq.n	8003da8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	3310      	adds	r3, #16
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 feaf 	bl	8004af0 <xTaskRemoveFromEventList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d98:	4b54      	ldr	r3, [pc, #336]	@ (8003eec <xQueueSemaphoreTake+0x21c>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003da8:	f001 fbf0 	bl	800558c <vPortExitCritical>
				return pdPASS;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e098      	b.n	8003ee2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d112      	bne.n	8003ddc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	617b      	str	r3, [r7, #20]
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	e7fd      	b.n	8003dd0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003dd4:	f001 fbda 	bl	800558c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e082      	b.n	8003ee2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de2:	f107 030c 	add.w	r3, r7, #12
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fee6 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df0:	f001 fbcc 	bl	800558c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003df4:	f000 fc42 	bl	800467c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003df8:	f001 fb96 	bl	8005528 <vPortEnterCritical>
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d103      	bne.n	8003e12 <xQueueSemaphoreTake+0x142>
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d103      	bne.n	8003e28 <xQueueSemaphoreTake+0x158>
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e28:	f001 fbb0 	bl	800558c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fed5 	bl	8004be4 <xTaskCheckForTimeOut>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d132      	bne.n	8003ea6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e42:	f000 f929 	bl	8004098 <prvIsQueueEmpty>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d026      	beq.n	8003e9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003e54:	f001 fb68 	bl	8005528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 f827 	bl	8004eb0 <xTaskPriorityInherit>
 8003e62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003e64:	f001 fb92 	bl	800558c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	3324      	adds	r3, #36	@ 0x24
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fe17 	bl	8004aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e78:	f000 f8bc 	bl	8003ff4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e7c:	f000 fc0c 	bl	8004698 <xTaskResumeAll>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f47f af67 	bne.w	8003d56 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003e88:	4b18      	ldr	r3, [pc, #96]	@ (8003eec <xQueueSemaphoreTake+0x21c>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	e75d      	b.n	8003d56 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e9c:	f000 f8aa 	bl	8003ff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ea0:	f000 fbfa 	bl	8004698 <xTaskResumeAll>
 8003ea4:	e757      	b.n	8003d56 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ea6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea8:	f000 f8a4 	bl	8003ff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eac:	f000 fbf4 	bl	8004698 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eb2:	f000 f8f1 	bl	8004098 <prvIsQueueEmpty>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f43f af4c 	beq.w	8003d56 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ec4:	f001 fb30 	bl	8005528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eca:	f000 f811 	bl	8003ef0 <prvGetDisinheritPriorityAfterTimeout>
 8003ece:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 f8e8 	bl	80050ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003edc:	f001 fb56 	bl	800558c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3738      	adds	r7, #56	@ 0x38
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1c3 0307 	rsb	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e001      	b.n	8003f12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f12:	68fb      	ldr	r3, [r7, #12]
	}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d14d      	bne.n	8003fe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f826 	bl	8004f9c <xTaskPriorityDisinherit>
 8003f50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	e043      	b.n	8003fe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d119      	bne.n	8003f94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6858      	ldr	r0, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	f002 fd57 	bl	8006a1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	441a      	add	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d32b      	bcc.n	8003fe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e026      	b.n	8003fe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68d8      	ldr	r0, [r3, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	f002 fd3d 	bl	8006a1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	425b      	negs	r3, r3
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d207      	bcs.n	8003fd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	425b      	negs	r3, r3
 8003fca:	441a      	add	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d105      	bne.n	8003fe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fea:	697b      	ldr	r3, [r7, #20]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ffc:	f001 fa94 	bl	8005528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004006:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004008:	e011      	b.n	800402e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	@ 0x24
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fd6a 	bl	8004af0 <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004022:	f000 fe43 	bl	8004cac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	3b01      	subs	r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800402e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	dce9      	bgt.n	800400a <prvUnlockQueue+0x16>
 8004036:	e000      	b.n	800403a <prvUnlockQueue+0x46>
					break;
 8004038:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	22ff      	movs	r2, #255	@ 0xff
 800403e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004042:	f001 faa3 	bl	800558c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004046:	f001 fa6f 	bl	8005528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004050:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004052:	e011      	b.n	8004078 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d012      	beq.n	8004082 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3310      	adds	r3, #16
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fd45 	bl	8004af0 <xTaskRemoveFromEventList>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800406c:	f000 fe1e 	bl	8004cac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	3b01      	subs	r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800407c:	2b00      	cmp	r3, #0
 800407e:	dce9      	bgt.n	8004054 <prvUnlockQueue+0x60>
 8004080:	e000      	b.n	8004084 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004082:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	22ff      	movs	r2, #255	@ 0xff
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800408c:	f001 fa7e 	bl	800558c <vPortExitCritical>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a0:	f001 fa42 	bl	8005528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e001      	b.n	80040b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040b6:	f001 fa69 	bl	800558c <vPortExitCritical>

	return xReturn;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040cc:	f001 fa2c 	bl	8005528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d102      	bne.n	80040e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e001      	b.n	80040e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040e6:	f001 fa51 	bl	800558c <vPortExitCritical>

	return xReturn;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	@ 0x38
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	623b      	str	r3, [r7, #32]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	61fb      	str	r3, [r7, #28]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800413e:	2364      	movs	r3, #100	@ 0x64
 8004140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b64      	cmp	r3, #100	@ 0x64
 8004146:	d00b      	beq.n	8004160 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	61bb      	str	r3, [r7, #24]
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004160:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01e      	beq.n	80041a6 <xTaskCreateStatic+0xb2>
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01b      	beq.n	80041a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004180:	2300      	movs	r3, #0
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f850 	bl	800423e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800419e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041a0:	f000 f8e4 	bl	800436c <prvAddNewTaskToReadyList>
 80041a4:	e001      	b.n	80041aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041aa:	697b      	ldr	r3, [r7, #20]
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	@ 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	@ 0x30
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fa8d 	bl	80056e8 <pvPortMalloc>
 80041ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041d6:	2064      	movs	r0, #100	@ 0x64
 80041d8:	f001 fa86 	bl	80056e8 <pvPortMalloc>
 80041dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ea:	e005      	b.n	80041f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ec:	6978      	ldr	r0, [r7, #20]
 80041ee:	f001 fb49 	bl	8005884 <vPortFree>
 80041f2:	e001      	b.n	80041f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d017      	beq.n	800422e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	2300      	movs	r3, #0
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f80e 	bl	800423e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004222:	69f8      	ldr	r0, [r7, #28]
 8004224:	f000 f8a2 	bl	800436c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004228:	2301      	movs	r3, #1
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	e002      	b.n	8004234 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295
 8004232:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004234:	69bb      	ldr	r3, [r7, #24]
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	461a      	mov	r2, r3
 8004256:	21a5      	movs	r1, #165	@ 0xa5
 8004258:	f002 fb65 	bl	8006926 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004266:	3b01      	subs	r3, #1
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	617b      	str	r3, [r7, #20]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01f      	beq.n	80042e4 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e012      	b.n	80042d0 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	7819      	ldrb	r1, [r3, #0]
 80042b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	3334      	adds	r3, #52	@ 0x34
 80042ba:	460a      	mov	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d006      	beq.n	80042d8 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3301      	adds	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b0f      	cmp	r3, #15
 80042d4:	d9e9      	bls.n	80042aa <prvInitialiseNewTask+0x6c>
 80042d6:	e000      	b.n	80042da <prvInitialiseNewTask+0x9c>
			{
				break;
 80042d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042e2:	e003      	b.n	80042ec <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d901      	bls.n	80042f6 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042f2:	2306      	movs	r3, #6
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004300:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fa4e 	bl	80037ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	3318      	adds	r3, #24
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fa49 	bl	80037ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004320:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	f1c3 0207 	rsb	r2, r3, #7
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	2200      	movs	r2, #0
 800433c:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	69b8      	ldr	r0, [r7, #24]
 800434c:	f000 ffb8 	bl	80052c0 <pxPortInitialiseStack>
 8004350:	4602      	mov	r2, r0
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004362:	bf00      	nop
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004374:	f001 f8d8 	bl	8005528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004378:	4b2c      	ldr	r3, [pc, #176]	@ (800442c <prvAddNewTaskToReadyList+0xc0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <prvAddNewTaskToReadyList+0xc0>)
 8004380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004382:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <prvAddNewTaskToReadyList+0xc4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800438a:	4a29      	ldr	r2, [pc, #164]	@ (8004430 <prvAddNewTaskToReadyList+0xc4>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004390:	4b26      	ldr	r3, [pc, #152]	@ (800442c <prvAddNewTaskToReadyList+0xc0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d110      	bne.n	80043ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004398:	f000 fcae 	bl	8004cf8 <prvInitialiseTaskLists>
 800439c:	e00d      	b.n	80043ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800439e:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <prvAddNewTaskToReadyList+0xc8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043a6:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <prvAddNewTaskToReadyList+0xc4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d802      	bhi.n	80043ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <prvAddNewTaskToReadyList+0xc4>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <prvAddNewTaskToReadyList+0xcc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <prvAddNewTaskToReadyList+0xcc>)
 80043c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <prvAddNewTaskToReadyList+0xcc>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <prvAddNewTaskToReadyList+0xd0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a18      	ldr	r2, [pc, #96]	@ (800443c <prvAddNewTaskToReadyList+0xd0>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a15      	ldr	r2, [pc, #84]	@ (8004440 <prvAddNewTaskToReadyList+0xd4>)
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7ff f9e7 	bl	80037c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043fa:	f001 f8c7 	bl	800558c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <prvAddNewTaskToReadyList+0xc8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <prvAddNewTaskToReadyList+0xc4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	429a      	cmp	r2, r3
 8004412:	d207      	bcs.n	8004424 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <prvAddNewTaskToReadyList+0xd8>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	2000053c 	.word	0x2000053c
 8004430:	2000043c 	.word	0x2000043c
 8004434:	20000548 	.word	0x20000548
 8004438:	20000558 	.word	0x20000558
 800443c:	20000544 	.word	0x20000544
 8004440:	20000440 	.word	0x20000440
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <vTaskDelayUntil+0x2c>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	617b      	str	r3, [r7, #20]
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	e7fd      	b.n	8004470 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <vTaskDelayUntil+0x4a>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	613b      	str	r3, [r7, #16]
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004492:	4b2a      	ldr	r3, [pc, #168]	@ (800453c <vTaskDelayUntil+0xf4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <vTaskDelayUntil+0x6a>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60fb      	str	r3, [r7, #12]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80044b2:	f000 f8e3 	bl	800467c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80044b6:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <vTaskDelayUntil+0xf8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d20b      	bcs.n	80044e8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d211      	bcs.n	80044fe <vTaskDelayUntil+0xb6>
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d90d      	bls.n	80044fe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	e00a      	b.n	80044fe <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d303      	bcc.n	80044fa <vTaskDelayUntil+0xb2>
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d901      	bls.n	80044fe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fe6e 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004518:	f000 f8be 	bl	8004698 <xTaskResumeAll>
 800451c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <vTaskDelayUntil+0xfc>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004534:	bf00      	nop
 8004536:	3728      	adds	r7, #40	@ 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000564 	.word	0x20000564
 8004540:	20000540 	.word	0x20000540
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d018      	beq.n	800458c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800455a:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <vTaskDelay+0x64>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <vTaskDelay+0x32>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	60bb      	str	r3, [r7, #8]
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	e7fd      	b.n	8004576 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800457a:	f000 f87f 	bl	800467c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800457e:	2100      	movs	r1, #0
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fe37 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004586:	f000 f887 	bl	8004698 <xTaskResumeAll>
 800458a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d107      	bne.n	80045a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <vTaskDelay+0x68>)
 8004594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000564 	.word	0x20000564
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	@ 0x28
 80045b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045c2:	463a      	mov	r2, r7
 80045c4:	1d39      	adds	r1, r7, #4
 80045c6:	f107 0308 	add.w	r3, r7, #8
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc f80e 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	9202      	str	r2, [sp, #8]
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	2300      	movs	r3, #0
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2300      	movs	r3, #0
 80045e0:	460a      	mov	r2, r1
 80045e2:	4920      	ldr	r1, [pc, #128]	@ (8004664 <vTaskStartScheduler+0xb0>)
 80045e4:	4820      	ldr	r0, [pc, #128]	@ (8004668 <vTaskStartScheduler+0xb4>)
 80045e6:	f7ff fd85 	bl	80040f4 <xTaskCreateStatic>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a1f      	ldr	r2, [pc, #124]	@ (800466c <vTaskStartScheduler+0xb8>)
 80045ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045f0:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <vTaskStartScheduler+0xb8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e001      	b.n	8004602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d118      	bne.n	800463a <vTaskStartScheduler+0x86>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	613b      	str	r3, [r7, #16]
}
 800461a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800461c:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <vTaskStartScheduler+0xbc>)
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004624:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <vTaskStartScheduler+0xc0>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800462a:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <vTaskStartScheduler+0xc4>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004630:	f7fc f962 	bl	80008f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004634:	f000 fed4 	bl	80053e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004638:	e00f      	b.n	800465a <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d10b      	bne.n	800465a <vTaskStartScheduler+0xa6>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60fb      	str	r3, [r7, #12]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskStartScheduler+0xa2>
}
 800465a:	bf00      	nop
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	08007780 	.word	0x08007780
 8004668:	08004cc5 	.word	0x08004cc5
 800466c:	20000560 	.word	0x20000560
 8004670:	2000055c 	.word	0x2000055c
 8004674:	20000548 	.word	0x20000548
 8004678:	20000540 	.word	0x20000540

0800467c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004680:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <vTaskSuspendAll+0x18>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a03      	ldr	r2, [pc, #12]	@ (8004694 <vTaskSuspendAll+0x18>)
 8004688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	20000564 	.word	0x20000564

08004698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046a6:	4b42      	ldr	r3, [pc, #264]	@ (80047b0 <xTaskResumeAll+0x118>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	603b      	str	r3, [r7, #0]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046c6:	f000 ff2f 	bl	8005528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <xTaskResumeAll+0x118>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <xTaskResumeAll+0x118>)
 80046d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d4:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <xTaskResumeAll+0x118>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d161      	bne.n	80047a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046dc:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <xTaskResumeAll+0x11c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05d      	beq.n	80047a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e4:	e02e      	b.n	8004744 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e6:	4b34      	ldr	r3, [pc, #208]	@ (80047b8 <xTaskResumeAll+0x120>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3318      	adds	r3, #24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f8c5 	bl	8003882 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff f8c0 	bl	8003882 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <xTaskResumeAll+0x124>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	4a2a      	ldr	r2, [pc, #168]	@ (80047bc <xTaskResumeAll+0x124>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a27      	ldr	r2, [pc, #156]	@ (80047c0 <xTaskResumeAll+0x128>)
 8004722:	441a      	add	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7ff f84c 	bl	80037c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004734:	4b23      	ldr	r3, [pc, #140]	@ (80047c4 <xTaskResumeAll+0x12c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <xTaskResumeAll+0x130>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004744:	4b1c      	ldr	r3, [pc, #112]	@ (80047b8 <xTaskResumeAll+0x120>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1cc      	bne.n	80046e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004752:	f000 fb6f 	bl	8004e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <xTaskResumeAll+0x134>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004762:	f000 f86d 	bl	8004840 <xTaskIncrementTick>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800476c:	4b16      	ldr	r3, [pc, #88]	@ (80047c8 <xTaskResumeAll+0x130>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f1      	bne.n	8004762 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800477e:	4b13      	ldr	r3, [pc, #76]	@ (80047cc <xTaskResumeAll+0x134>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <xTaskResumeAll+0x130>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004790:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <xTaskResumeAll+0x138>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a0:	f000 fef4 	bl	800558c <vPortExitCritical>

	return xAlreadyYielded;
 80047a4:	68bb      	ldr	r3, [r7, #8]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000564 	.word	0x20000564
 80047b4:	2000053c 	.word	0x2000053c
 80047b8:	200004fc 	.word	0x200004fc
 80047bc:	20000544 	.word	0x20000544
 80047c0:	20000440 	.word	0x20000440
 80047c4:	2000043c 	.word	0x2000043c
 80047c8:	20000550 	.word	0x20000550
 80047cc:	2000054c 	.word	0x2000054c
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047da:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <xTaskGetTickCount+0x1c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047e0:	687b      	ldr	r3, [r7, #4]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000540 	.word	0x20000540

080047f4 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <pcTaskGetName+0x14>
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <pcTaskGetName+0x48>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	e000      	b.n	800480a <pcTaskGetName+0x16>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <pcTaskGetName+0x36>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60bb      	str	r3, [r7, #8]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3334      	adds	r3, #52	@ 0x34
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000043c 	.word	0x2000043c

08004840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484a:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <xTaskIncrementTick+0x148>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 808f 	bne.w	8004972 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004854:	4b4d      	ldr	r3, [pc, #308]	@ (800498c <xTaskIncrementTick+0x14c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800485c:	4a4b      	ldr	r2, [pc, #300]	@ (800498c <xTaskIncrementTick+0x14c>)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d121      	bne.n	80048ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004868:	4b49      	ldr	r3, [pc, #292]	@ (8004990 <xTaskIncrementTick+0x150>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	603b      	str	r3, [r7, #0]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <xTaskIncrementTick+0x46>
 800488a:	4b41      	ldr	r3, [pc, #260]	@ (8004990 <xTaskIncrementTick+0x150>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <xTaskIncrementTick+0x154>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a3e      	ldr	r2, [pc, #248]	@ (8004990 <xTaskIncrementTick+0x150>)
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4a3e      	ldr	r2, [pc, #248]	@ (8004994 <xTaskIncrementTick+0x154>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b3e      	ldr	r3, [pc, #248]	@ (8004998 <xTaskIncrementTick+0x158>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004998 <xTaskIncrementTick+0x158>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	f000 fac4 	bl	8004e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ac:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <xTaskIncrementTick+0x15c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d348      	bcc.n	8004948 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b6:	4b36      	ldr	r3, [pc, #216]	@ (8004990 <xTaskIncrementTick+0x150>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c0:	4b36      	ldr	r3, [pc, #216]	@ (800499c <xTaskIncrementTick+0x15c>)
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	601a      	str	r2, [r3, #0]
					break;
 80048c8:	e03e      	b.n	8004948 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4b31      	ldr	r3, [pc, #196]	@ (8004990 <xTaskIncrementTick+0x150>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d203      	bcs.n	80048ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048e2:	4a2e      	ldr	r2, [pc, #184]	@ (800499c <xTaskIncrementTick+0x15c>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048e8:	e02e      	b.n	8004948 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe ffc7 	bl	8003882 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3318      	adds	r3, #24
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe ffbe 	bl	8003882 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490a:	2201      	movs	r2, #1
 800490c:	409a      	lsls	r2, r3
 800490e:	4b24      	ldr	r3, [pc, #144]	@ (80049a0 <xTaskIncrementTick+0x160>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	4a22      	ldr	r2, [pc, #136]	@ (80049a0 <xTaskIncrementTick+0x160>)
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4a1f      	ldr	r2, [pc, #124]	@ (80049a4 <xTaskIncrementTick+0x164>)
 8004926:	441a      	add	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7fe ff4a 	bl	80037c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <xTaskIncrementTick+0x168>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	429a      	cmp	r2, r3
 8004940:	d3b9      	bcc.n	80048b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004946:	e7b6      	b.n	80048b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <xTaskIncrementTick+0x168>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	4915      	ldr	r1, [pc, #84]	@ (80049a4 <xTaskIncrementTick+0x164>)
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d901      	bls.n	8004964 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004964:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <xTaskIncrementTick+0x16c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e004      	b.n	800497c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004972:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <xTaskIncrementTick+0x170>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	4a0d      	ldr	r2, [pc, #52]	@ (80049b0 <xTaskIncrementTick+0x170>)
 800497a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800497c:	697b      	ldr	r3, [r7, #20]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000564 	.word	0x20000564
 800498c:	20000540 	.word	0x20000540
 8004990:	200004f4 	.word	0x200004f4
 8004994:	200004f8 	.word	0x200004f8
 8004998:	20000554 	.word	0x20000554
 800499c:	2000055c 	.word	0x2000055c
 80049a0:	20000544 	.word	0x20000544
 80049a4:	20000440 	.word	0x20000440
 80049a8:	2000043c 	.word	0x2000043c
 80049ac:	20000550 	.word	0x20000550
 80049b0:	2000054c 	.word	0x2000054c

080049b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ba:	4b33      	ldr	r3, [pc, #204]	@ (8004a88 <vTaskSwitchContext+0xd4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049c2:	4b32      	ldr	r3, [pc, #200]	@ (8004a8c <vTaskSwitchContext+0xd8>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c8:	e059      	b.n	8004a7e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80049ca:	4b30      	ldr	r3, [pc, #192]	@ (8004a8c <vTaskSwitchContext+0xd8>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80049d0:	f7fb ff9e 	bl	8000910 <getRunTimeCounterValue>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a90 <vTaskSwitchContext+0xdc>)
 80049d8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80049da:	4b2d      	ldr	r3, [pc, #180]	@ (8004a90 <vTaskSwitchContext+0xdc>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b2d      	ldr	r3, [pc, #180]	@ (8004a94 <vTaskSwitchContext+0xe0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d909      	bls.n	80049fa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80049e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a98 <vTaskSwitchContext+0xe4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80049ec:	4a28      	ldr	r2, [pc, #160]	@ (8004a90 <vTaskSwitchContext+0xdc>)
 80049ee:	6810      	ldr	r0, [r2, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <vTaskSwitchContext+0xe0>)
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	1a82      	subs	r2, r0, r2
 80049f6:	440a      	add	r2, r1
 80049f8:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80049fa:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <vTaskSwitchContext+0xdc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a25      	ldr	r2, [pc, #148]	@ (8004a94 <vTaskSwitchContext+0xe0>)
 8004a00:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <vTaskSwitchContext+0xe8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	f1c3 031f 	rsb	r3, r3, #31
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	4921      	ldr	r1, [pc, #132]	@ (8004aa0 <vTaskSwitchContext+0xec>)
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <vTaskSwitchContext+0x90>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	607b      	str	r3, [r7, #4]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <vTaskSwitchContext+0x8c>
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4a14      	ldr	r2, [pc, #80]	@ (8004aa0 <vTaskSwitchContext+0xec>)
 8004a50:	4413      	add	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3308      	adds	r3, #8
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d104      	bne.n	8004a74 <vTaskSwitchContext+0xc0>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4a07      	ldr	r2, [pc, #28]	@ (8004a98 <vTaskSwitchContext+0xe4>)
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000564 	.word	0x20000564
 8004a8c:	20000550 	.word	0x20000550
 8004a90:	2000056c 	.word	0x2000056c
 8004a94:	20000568 	.word	0x20000568
 8004a98:	2000043c 	.word	0x2000043c
 8004a9c:	20000544 	.word	0x20000544
 8004aa0:	20000440 	.word	0x20000440

08004aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <vTaskPlaceOnEventList+0x48>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fe fe9b 	bl	8003810 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ada:	2101      	movs	r1, #1
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f000 fb89 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2000043c 	.word	0x2000043c

08004af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3318      	adds	r3, #24
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fead 	bl	8003882 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11c      	bne.n	8004b6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fea4 	bl	8003882 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	4a16      	ldr	r2, [pc, #88]	@ (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a13      	ldr	r2, [pc, #76]	@ (8004ba8 <xTaskRemoveFromEventList+0xb8>)
 8004b5a:	441a      	add	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7fe fe30 	bl	80037c8 <vListInsertEnd>
 8004b68:	e005      	b.n	8004b76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	4619      	mov	r1, r3
 8004b70:	480e      	ldr	r0, [pc, #56]	@ (8004bac <xTaskRemoveFromEventList+0xbc>)
 8004b72:	f7fe fe29 	bl	80037c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <xTaskRemoveFromEventList+0xc0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d905      	bls.n	8004b90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <xTaskRemoveFromEventList+0xc4>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e001      	b.n	8004b94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b94:	697b      	ldr	r3, [r7, #20]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000564 	.word	0x20000564
 8004ba4:	20000544 	.word	0x20000544
 8004ba8:	20000440 	.word	0x20000440
 8004bac:	200004fc 	.word	0x200004fc
 8004bb0:	2000043c 	.word	0x2000043c
 8004bb4:	20000550 	.word	0x20000550

08004bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <vTaskInternalSetTimeOutState+0x24>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <vTaskInternalSetTimeOutState+0x28>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	605a      	str	r2, [r3, #4]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000554 	.word	0x20000554
 8004be0:	20000540 	.word	0x20000540

08004be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	613b      	str	r3, [r7, #16]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c2a:	f000 fc7d 	bl	8005528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <xTaskCheckForTimeOut+0xc0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d102      	bne.n	8004c4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	e023      	b.n	8004c96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b15      	ldr	r3, [pc, #84]	@ (8004ca8 <xTaskCheckForTimeOut+0xc4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d007      	beq.n	8004c6a <xTaskCheckForTimeOut+0x86>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e015      	b.n	8004c96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d20b      	bcs.n	8004c8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ff99 	bl	8004bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e004      	b.n	8004c96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c96:	f000 fc79 	bl	800558c <vPortExitCritical>

	return xReturn;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000540 	.word	0x20000540
 8004ca8:	20000554 	.word	0x20000554

08004cac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	@ (8004cc0 <vTaskMissedYield+0x14>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000550 	.word	0x20000550

08004cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ccc:	f000 f854 	bl	8004d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cd0:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <prvIdleTask+0x2c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d907      	bls.n	8004ce8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004cd8:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <prvIdleTask+0x30>)
 8004cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004ce8:	f001 f856 	bl	8005d98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004cec:	e7ee      	b.n	8004ccc <prvIdleTask+0x8>
 8004cee:	bf00      	nop
 8004cf0:	20000440 	.word	0x20000440
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	e00c      	b.n	8004d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4a12      	ldr	r2, [pc, #72]	@ (8004d58 <prvInitialiseTaskLists+0x60>)
 8004d10:	4413      	add	r3, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fd2b 	bl	800376e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d9ef      	bls.n	8004d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d24:	480d      	ldr	r0, [pc, #52]	@ (8004d5c <prvInitialiseTaskLists+0x64>)
 8004d26:	f7fe fd22 	bl	800376e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d2a:	480d      	ldr	r0, [pc, #52]	@ (8004d60 <prvInitialiseTaskLists+0x68>)
 8004d2c:	f7fe fd1f 	bl	800376e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d30:	480c      	ldr	r0, [pc, #48]	@ (8004d64 <prvInitialiseTaskLists+0x6c>)
 8004d32:	f7fe fd1c 	bl	800376e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d36:	480c      	ldr	r0, [pc, #48]	@ (8004d68 <prvInitialiseTaskLists+0x70>)
 8004d38:	f7fe fd19 	bl	800376e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d3c:	480b      	ldr	r0, [pc, #44]	@ (8004d6c <prvInitialiseTaskLists+0x74>)
 8004d3e:	f7fe fd16 	bl	800376e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <prvInitialiseTaskLists+0x78>)
 8004d44:	4a05      	ldr	r2, [pc, #20]	@ (8004d5c <prvInitialiseTaskLists+0x64>)
 8004d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <prvInitialiseTaskLists+0x7c>)
 8004d4a:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <prvInitialiseTaskLists+0x68>)
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000440 	.word	0x20000440
 8004d5c:	200004cc 	.word	0x200004cc
 8004d60:	200004e0 	.word	0x200004e0
 8004d64:	200004fc 	.word	0x200004fc
 8004d68:	20000510 	.word	0x20000510
 8004d6c:	20000528 	.word	0x20000528
 8004d70:	200004f4 	.word	0x200004f4
 8004d74:	200004f8 	.word	0x200004f8

08004d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d7e:	e019      	b.n	8004db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d80:	f000 fbd2 	bl	8005528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d84:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <prvCheckTasksWaitingTermination+0x50>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fd76 	bl	8003882 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <prvCheckTasksWaitingTermination+0x54>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8004dcc <prvCheckTasksWaitingTermination+0x54>)
 8004d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004daa:	f000 fbef 	bl	800558c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f810 	bl	8004dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e1      	bne.n	8004d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000510 	.word	0x20000510
 8004dcc:	2000053c 	.word	0x2000053c
 8004dd0:	20000524 	.word	0x20000524

08004dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd4a 	bl	8005884 <vPortFree>
				vPortFree( pxTCB );
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fd47 	bl	8005884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004df6:	e019      	b.n	8004e2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d103      	bne.n	8004e0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fd3e 	bl	8005884 <vPortFree>
	}
 8004e08:	e010      	b.n	8004e2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d00b      	beq.n	8004e2c <prvDeleteTCB+0x58>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <prvDeleteTCB+0x54>
	}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <prvResetNextTaskUnblockTime+0x38>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <prvResetNextTaskUnblockTime+0x3c>)
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e4c:	e008      	b.n	8004e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4e:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <prvResetNextTaskUnblockTime+0x38>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	200004f4 	.word	0x200004f4
 8004e70:	2000055c 	.word	0x2000055c

08004e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <xTaskGetSchedulerState+0x34>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e82:	2301      	movs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e008      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e88:	4b08      	ldr	r3, [pc, #32]	@ (8004eac <xTaskGetSchedulerState+0x38>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e90:	2302      	movs	r3, #2
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	e001      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e9a:	687b      	ldr	r3, [r7, #4]
	}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000548 	.word	0x20000548
 8004eac:	20000564 	.word	0x20000564

08004eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d05e      	beq.n	8004f84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eca:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <xTaskPriorityInherit+0xe0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d24e      	bcs.n	8004f72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db06      	blt.n	8004eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004edc:	4b2c      	ldr	r3, [pc, #176]	@ (8004f90 <xTaskPriorityInherit+0xe0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f1c3 0207 	rsb	r2, r3, #7
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4a26      	ldr	r2, [pc, #152]	@ (8004f94 <xTaskPriorityInherit+0xe4>)
 8004efc:	4413      	add	r3, r2
 8004efe:	4299      	cmp	r1, r3
 8004f00:	d12f      	bne.n	8004f62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fcbb 	bl	8003882 <uxListRemove>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	2201      	movs	r2, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <xTaskPriorityInherit+0xe8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4013      	ands	r3, r2
 8004f24:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <xTaskPriorityInherit+0xe8>)
 8004f26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f28:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <xTaskPriorityInherit+0xe0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	2201      	movs	r2, #1
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <xTaskPriorityInherit+0xe8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <xTaskPriorityInherit+0xe8>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a10      	ldr	r2, [pc, #64]	@ (8004f94 <xTaskPriorityInherit+0xe4>)
 8004f52:	441a      	add	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fc34 	bl	80037c8 <vListInsertEnd>
 8004f60:	e004      	b.n	8004f6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f62:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <xTaskPriorityInherit+0xe0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e008      	b.n	8004f84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f76:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <xTaskPriorityInherit+0xe0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d201      	bcs.n	8004f84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f84:	68fb      	ldr	r3, [r7, #12]
	}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000043c 	.word	0x2000043c
 8004f94:	20000440 	.word	0x20000440
 8004f98:	20000544 	.word	0x20000544

08004f9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d070      	beq.n	8005094 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80050a0 <xTaskPriorityDisinherit+0x104>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d00b      	beq.n	8004fd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60bb      	str	r3, [r7, #8]
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	1e5a      	subs	r2, r3, #1
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005006:	429a      	cmp	r2, r3
 8005008:	d044      	beq.n	8005094 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	2b00      	cmp	r3, #0
 8005010:	d140      	bne.n	8005094 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3304      	adds	r3, #4
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fc33 	bl	8003882 <uxListRemove>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d115      	bne.n	800504e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	491f      	ldr	r1, [pc, #124]	@ (80050a4 <xTaskPriorityDisinherit+0x108>)
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xTaskPriorityDisinherit+0xb2>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43da      	mvns	r2, r3
 8005044:	4b18      	ldr	r3, [pc, #96]	@ (80050a8 <xTaskPriorityDisinherit+0x10c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4013      	ands	r3, r2
 800504a:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <xTaskPriorityDisinherit+0x10c>)
 800504c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	f1c3 0207 	rsb	r2, r3, #7
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <xTaskPriorityDisinherit+0x10c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	4a0d      	ldr	r2, [pc, #52]	@ (80050a8 <xTaskPriorityDisinherit+0x10c>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <xTaskPriorityDisinherit+0x108>)
 8005082:	441a      	add	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fe fb9c 	bl	80037c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005094:	697b      	ldr	r3, [r7, #20]
	}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2000043c 	.word	0x2000043c
 80050a4:	20000440 	.word	0x20000440
 80050a8:	20000544 	.word	0x20000544

080050ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d079      	beq.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60fb      	str	r3, [r7, #12]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e002      	b.n	80050fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	429a      	cmp	r2, r3
 8005102:	d059      	beq.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	429a      	cmp	r2, r3
 800510c:	d154      	bne.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800510e:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d10b      	bne.n	8005130 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60bb      	str	r3, [r7, #8]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db04      	blt.n	800514e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f1c3 0207 	rsb	r2, r3, #7
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a19      	ldr	r2, [pc, #100]	@ (80051c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800515e:	4413      	add	r3, r2
 8005160:	4299      	cmp	r1, r3
 8005162:	d129      	bne.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fb8a 	bl	8003882 <uxListRemove>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	2201      	movs	r2, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43da      	mvns	r2, r3
 8005180:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4013      	ands	r3, r2
 8005186:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005188:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	2201      	movs	r2, #1
 8005190:	409a      	lsls	r2, r3
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	4a0b      	ldr	r2, [pc, #44]	@ (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4a06      	ldr	r2, [pc, #24]	@ (80051c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051aa:	441a      	add	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fe fb08 	bl	80037c8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2000043c 	.word	0x2000043c
 80051c4:	20000440 	.word	0x20000440
 80051c8:	20000544 	.word	0x20000544

080051cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051d8:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051de:	3201      	adds	r2, #1
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80051e2:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80051e4:	681b      	ldr	r3, [r3, #0]
	}
 80051e6:	4618      	mov	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000043c 	.word	0x2000043c

080051f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051fe:	4b29      	ldr	r3, [pc, #164]	@ (80052a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005204:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fb39 	bl	8003882 <uxListRemove>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005216:	4b24      	ldr	r3, [pc, #144]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	2201      	movs	r2, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43da      	mvns	r2, r3
 8005224:	4b21      	ldr	r3, [pc, #132]	@ (80052ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4013      	ands	r3, r2
 800522a:	4a20      	ldr	r2, [pc, #128]	@ (80052ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800522c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d10a      	bne.n	800524c <prvAddCurrentTaskToDelayedList+0x58>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	481a      	ldr	r0, [pc, #104]	@ (80052b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005246:	f7fe fabf 	bl	80037c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800524a:	e026      	b.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005254:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	429a      	cmp	r2, r3
 8005262:	d209      	bcs.n	8005278 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe facd 	bl	8003810 <vListInsert>
}
 8005276:	e010      	b.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005278:	4b0f      	ldr	r3, [pc, #60]	@ (80052b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7fe fac3 	bl	8003810 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800528a:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d202      	bcs.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005294:	4a09      	ldr	r2, [pc, #36]	@ (80052bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6013      	str	r3, [r2, #0]
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000540 	.word	0x20000540
 80052a8:	2000043c 	.word	0x2000043c
 80052ac:	20000544 	.word	0x20000544
 80052b0:	20000528 	.word	0x20000528
 80052b4:	200004f8 	.word	0x200004f8
 80052b8:	200004f4 	.word	0x200004f4
 80052bc:	2000055c 	.word	0x2000055c

080052c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b04      	subs	r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b04      	subs	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005324 <pxPortInitialiseStack+0x64>)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b14      	subs	r3, #20
 80052fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b04      	subs	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f06f 0202 	mvn.w	r2, #2
 800530e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b20      	subs	r3, #32
 8005314:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	08005329 	.word	0x08005329

08005328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005332:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <prvTaskExitError+0x58>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d00b      	beq.n	8005354 <prvTaskExitError+0x2c>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	e7fd      	b.n	8005350 <prvTaskExitError+0x28>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60bb      	str	r3, [r7, #8]
}
 8005366:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005368:	bf00      	nop
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0fc      	beq.n	800536a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	2000000c 	.word	0x2000000c
	...

08005390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005390:	4b07      	ldr	r3, [pc, #28]	@ (80053b0 <pxCurrentTCBConst2>)
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	f380 8809 	msr	PSP, r0
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	4770      	bx	lr
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst2>:
 80053b0:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053b8:	4808      	ldr	r0, [pc, #32]	@ (80053dc <prvPortStartFirstTask+0x24>)
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f380 8808 	msr	MSP, r0
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8814 	msr	CONTROL, r0
 80053ca:	b662      	cpsie	i
 80053cc:	b661      	cpsie	f
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	df00      	svc	0
 80053d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053da:	bf00      	nop
 80053dc:	e000ed08 	.word	0xe000ed08

080053e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053e6:	4b47      	ldr	r3, [pc, #284]	@ (8005504 <xPortStartScheduler+0x124>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a47      	ldr	r2, [pc, #284]	@ (8005508 <xPortStartScheduler+0x128>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10b      	bne.n	8005408 <xPortStartScheduler+0x28>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005408:	4b3e      	ldr	r3, [pc, #248]	@ (8005504 <xPortStartScheduler+0x124>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a3f      	ldr	r2, [pc, #252]	@ (800550c <xPortStartScheduler+0x12c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10b      	bne.n	800542a <xPortStartScheduler+0x4a>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	613b      	str	r3, [r7, #16]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800542a:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <xPortStartScheduler+0x130>)
 800542c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	22ff      	movs	r2, #255	@ 0xff
 800543a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4b31      	ldr	r3, [pc, #196]	@ (8005514 <xPortStartScheduler+0x134>)
 8005450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005452:	4b31      	ldr	r3, [pc, #196]	@ (8005518 <xPortStartScheduler+0x138>)
 8005454:	2207      	movs	r2, #7
 8005456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005458:	e009      	b.n	800546e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800545a:	4b2f      	ldr	r3, [pc, #188]	@ (8005518 <xPortStartScheduler+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3b01      	subs	r3, #1
 8005460:	4a2d      	ldr	r2, [pc, #180]	@ (8005518 <xPortStartScheduler+0x138>)
 8005462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005476:	2b80      	cmp	r3, #128	@ 0x80
 8005478:	d0ef      	beq.n	800545a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800547a:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <xPortStartScheduler+0x138>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1c3 0307 	rsb	r3, r3, #7
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00b      	beq.n	800549e <xPortStartScheduler+0xbe>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60bb      	str	r3, [r7, #8]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800549e:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <xPortStartScheduler+0x138>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005518 <xPortStartScheduler+0x138>)
 80054a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <xPortStartScheduler+0x138>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b0:	4a19      	ldr	r2, [pc, #100]	@ (8005518 <xPortStartScheduler+0x138>)
 80054b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054bc:	4b17      	ldr	r3, [pc, #92]	@ (800551c <xPortStartScheduler+0x13c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a16      	ldr	r2, [pc, #88]	@ (800551c <xPortStartScheduler+0x13c>)
 80054c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054c8:	4b14      	ldr	r3, [pc, #80]	@ (800551c <xPortStartScheduler+0x13c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a13      	ldr	r2, [pc, #76]	@ (800551c <xPortStartScheduler+0x13c>)
 80054ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054d4:	f000 f8da 	bl	800568c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054d8:	4b11      	ldr	r3, [pc, #68]	@ (8005520 <xPortStartScheduler+0x140>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054de:	f000 f8f9 	bl	80056d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054e2:	4b10      	ldr	r3, [pc, #64]	@ (8005524 <xPortStartScheduler+0x144>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005524 <xPortStartScheduler+0x144>)
 80054e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054ee:	f7ff ff63 	bl	80053b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054f2:	f7ff fa5f 	bl	80049b4 <vTaskSwitchContext>
	prvTaskExitError();
 80054f6:	f7ff ff17 	bl	8005328 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	e000ed00 	.word	0xe000ed00
 8005508:	410fc271 	.word	0x410fc271
 800550c:	410fc270 	.word	0x410fc270
 8005510:	e000e400 	.word	0xe000e400
 8005514:	20000570 	.word	0x20000570
 8005518:	20000574 	.word	0x20000574
 800551c:	e000ed20 	.word	0xe000ed20
 8005520:	2000000c 	.word	0x2000000c
 8005524:	e000ef34 	.word	0xe000ef34

08005528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
}
 8005540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005542:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <vPortEnterCritical+0x5c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	4a0e      	ldr	r2, [pc, #56]	@ (8005584 <vPortEnterCritical+0x5c>)
 800554a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <vPortEnterCritical+0x5c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d110      	bne.n	8005576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <vPortEnterCritical+0x60>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <vPortEnterCritical+0x4e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	603b      	str	r3, [r7, #0]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <vPortEnterCritical+0x4a>
	}
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005592:	4b12      	ldr	r3, [pc, #72]	@ (80055dc <vPortExitCritical+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <vPortExitCritical+0x26>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	607b      	str	r3, [r7, #4]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055b2:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <vPortExitCritical+0x50>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <vPortExitCritical+0x50>)
 80055ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055bc:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <vPortExitCritical+0x50>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <vPortExitCritical+0x44>
 80055c4:	2300      	movs	r3, #0
 80055c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	2000000c 	.word	0x2000000c

080055e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055e0:	f3ef 8009 	mrs	r0, PSP
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <pxCurrentTCBConst>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	f01e 0f10 	tst.w	lr, #16
 80055f0:	bf08      	it	eq
 80055f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fa:	6010      	str	r0, [r2, #0]
 80055fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005604:	f380 8811 	msr	BASEPRI, r0
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f7ff f9d0 	bl	80049b4 <vTaskSwitchContext>
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f380 8811 	msr	BASEPRI, r0
 800561c:	bc09      	pop	{r0, r3}
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	6808      	ldr	r0, [r1, #0]
 8005622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005626:	f01e 0f10 	tst.w	lr, #16
 800562a:	bf08      	it	eq
 800562c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005630:	f380 8809 	msr	PSP, r0
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst>:
 8005640:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005662:	f7ff f8ed 	bl	8004840 <xTaskIncrementTick>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <SysTick_Handler+0x40>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <vPortSetupTimerInterrupt+0x34>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <vPortSetupTimerInterrupt+0x38>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800569c:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <vPortSetupTimerInterrupt+0x3c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	@ (80056cc <vPortSetupTimerInterrupt+0x40>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <vPortSetupTimerInterrupt+0x44>)
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ae:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <vPortSetupTimerInterrupt+0x34>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000e010 	.word	0xe000e010
 80056c4:	e000e018 	.word	0xe000e018
 80056c8:	20000000 	.word	0x20000000
 80056cc:	10624dd3 	.word	0x10624dd3
 80056d0:	e000e014 	.word	0xe000e014

080056d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056e4 <vPortEnableVFP+0x10>
 80056d8:	6801      	ldr	r1, [r0, #0]
 80056da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056de:	6001      	str	r1, [r0, #0]
 80056e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056e2:	bf00      	nop
 80056e4:	e000ed88 	.word	0xe000ed88

080056e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	@ 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056f4:	f7fe ffc2 	bl	800467c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056f8:	4b5c      	ldr	r3, [pc, #368]	@ (800586c <pvPortMalloc+0x184>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005700:	f000 f924 	bl	800594c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005704:	4b5a      	ldr	r3, [pc, #360]	@ (8005870 <pvPortMalloc+0x188>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 8095 	bne.w	800583c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01e      	beq.n	8005756 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005718:	2208      	movs	r2, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d015      	beq.n	8005756 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	3308      	adds	r3, #8
 8005732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <pvPortMalloc+0x6e>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	617b      	str	r3, [r7, #20]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d06f      	beq.n	800583c <pvPortMalloc+0x154>
 800575c:	4b45      	ldr	r3, [pc, #276]	@ (8005874 <pvPortMalloc+0x18c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d86a      	bhi.n	800583c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005766:	4b44      	ldr	r3, [pc, #272]	@ (8005878 <pvPortMalloc+0x190>)
 8005768:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800576a:	4b43      	ldr	r3, [pc, #268]	@ (8005878 <pvPortMalloc+0x190>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005770:	e004      	b.n	800577c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d903      	bls.n	800578e <pvPortMalloc+0xa6>
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f1      	bne.n	8005772 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800578e:	4b37      	ldr	r3, [pc, #220]	@ (800586c <pvPortMalloc+0x184>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	429a      	cmp	r2, r3
 8005796:	d051      	beq.n	800583c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	4413      	add	r3, r2
 80057a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	2308      	movs	r3, #8
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d920      	bls.n	80057fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4413      	add	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <pvPortMalloc+0xfc>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	613b      	str	r3, [r7, #16]
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057f6:	69b8      	ldr	r0, [r7, #24]
 80057f8:	f000 f90a 	bl	8005a10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <pvPortMalloc+0x18c>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <pvPortMalloc+0x18c>)
 8005808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800580a:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <pvPortMalloc+0x18c>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <pvPortMalloc+0x194>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d203      	bcs.n	800581e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005816:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <pvPortMalloc+0x18c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <pvPortMalloc+0x194>)
 800581c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b13      	ldr	r3, [pc, #76]	@ (8005870 <pvPortMalloc+0x188>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	431a      	orrs	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005832:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <pvPortMalloc+0x198>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	4a11      	ldr	r2, [pc, #68]	@ (8005880 <pvPortMalloc+0x198>)
 800583a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800583c:	f7fe ff2c 	bl	8004698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <pvPortMalloc+0x17a>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60fb      	str	r3, [r7, #12]
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <pvPortMalloc+0x176>
	return pvReturn;
 8005862:	69fb      	ldr	r3, [r7, #28]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3728      	adds	r7, #40	@ 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20004180 	.word	0x20004180
 8005870:	20004194 	.word	0x20004194
 8005874:	20004184 	.word	0x20004184
 8005878:	20004178 	.word	0x20004178
 800587c:	20004188 	.word	0x20004188
 8005880:	2000418c 	.word	0x2000418c

08005884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04f      	beq.n	8005936 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005896:	2308      	movs	r3, #8
 8005898:	425b      	negs	r3, r3
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <vPortFree+0xbc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <vPortFree+0x46>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <vPortFree+0x66>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60bb      	str	r3, [r7, #8]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	4b14      	ldr	r3, [pc, #80]	@ (8005940 <vPortFree+0xbc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01e      	beq.n	8005936 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11a      	bne.n	8005936 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	4b0e      	ldr	r3, [pc, #56]	@ (8005940 <vPortFree+0xbc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	43db      	mvns	r3, r3
 800590a:	401a      	ands	r2, r3
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005910:	f7fe feb4 	bl	800467c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <vPortFree+0xc0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4413      	add	r3, r2
 800591e:	4a09      	ldr	r2, [pc, #36]	@ (8005944 <vPortFree+0xc0>)
 8005920:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005922:	6938      	ldr	r0, [r7, #16]
 8005924:	f000 f874 	bl	8005a10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005928:	4b07      	ldr	r3, [pc, #28]	@ (8005948 <vPortFree+0xc4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	4a06      	ldr	r2, [pc, #24]	@ (8005948 <vPortFree+0xc4>)
 8005930:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005932:	f7fe feb1 	bl	8004698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20004194 	.word	0x20004194
 8005944:	20004184 	.word	0x20004184
 8005948:	20004190 	.word	0x20004190

0800594c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005952:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005956:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005958:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <prvHeapInit+0xac>)
 800595a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3307      	adds	r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <prvHeapInit+0xac>)
 800597c:	4413      	add	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005984:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <prvHeapInit+0xb0>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800598a:	4b1c      	ldr	r3, [pc, #112]	@ (80059fc <prvHeapInit+0xb0>)
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4413      	add	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005998:	2208      	movs	r2, #8
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <prvHeapInit+0xb4>)
 80059ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ae:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <prvHeapInit+0xb4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059b6:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <prvHeapInit+0xb4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	1ad2      	subs	r2, r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <prvHeapInit+0xb4>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005a04 <prvHeapInit+0xb8>)
 80059da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <prvHeapInit+0xbc>)
 80059e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059e4:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <prvHeapInit+0xc0>)
 80059e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80059ea:	601a      	str	r2, [r3, #0]
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000578 	.word	0x20000578
 80059fc:	20004178 	.word	0x20004178
 8005a00:	20004180 	.word	0x20004180
 8005a04:	20004188 	.word	0x20004188
 8005a08:	20004184 	.word	0x20004184
 8005a0c:	20004194 	.word	0x20004194

08005a10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a18:	4b28      	ldr	r3, [pc, #160]	@ (8005abc <prvInsertBlockIntoFreeList+0xac>)
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e002      	b.n	8005a24 <prvInsertBlockIntoFreeList+0x14>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d8f7      	bhi.n	8005a1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d108      	bne.n	8005a52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	441a      	add	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d118      	bne.n	8005a98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d00d      	beq.n	8005a8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e008      	b.n	8005aa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e003      	b.n	8005aa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d002      	beq.n	8005aae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20004178 	.word	0x20004178
 8005ac0:	20004180 	.word	0x20004180

08005ac4 <app_init>:
TaskHandle_t h_task_c;
TaskHandle_t h_task_cc;

/********************** external functions definition ************************/
void app_init(void)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b08d      	sub	sp, #52	@ 0x34
 8005ac8:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8005aca:	f7ff fd2d 	bl	8005528 <vPortEnterCritical>
 8005ace:	4b94      	ldr	r3, [pc, #592]	@ (8005d20 <app_init+0x25c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a94      	ldr	r2, [pc, #592]	@ (8005d24 <app_init+0x260>)
 8005ad4:	213f      	movs	r1, #63	@ 0x3f
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 feac 	bl	8006834 <sniprintf>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4a92      	ldr	r2, [pc, #584]	@ (8005d28 <app_init+0x264>)
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8005d20 <app_init+0x25c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f95e 	bl	8005da8 <logger_log_print_>
 8005aec:	f7ff fd4e 	bl	800558c <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8005af0:	f7ff fd1a 	bl	8005528 <vPortEnterCritical>
 8005af4:	4b8a      	ldr	r3, [pc, #552]	@ (8005d20 <app_init+0x25c>)
 8005af6:	681c      	ldr	r4, [r3, #0]
 8005af8:	f7fe fe6c 	bl	80047d4 <xTaskGetTickCount>
 8005afc:	4603      	mov	r3, r0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4b8a      	ldr	r3, [pc, #552]	@ (8005d2c <app_init+0x268>)
 8005b02:	4a8b      	ldr	r2, [pc, #556]	@ (8005d30 <app_init+0x26c>)
 8005b04:	213f      	movs	r1, #63	@ 0x3f
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 fe94 	bl	8006834 <sniprintf>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4a86      	ldr	r2, [pc, #536]	@ (8005d28 <app_init+0x264>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4b83      	ldr	r3, [pc, #524]	@ (8005d20 <app_init+0x25c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f946 	bl	8005da8 <logger_log_print_>
 8005b1c:	f7ff fd36 	bl	800558c <vPortExitCritical>

	LOGGER_LOG(p_sys);
 8005b20:	f7ff fd02 	bl	8005528 <vPortEnterCritical>
 8005b24:	4b7e      	ldr	r3, [pc, #504]	@ (8005d20 <app_init+0x25c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a82      	ldr	r2, [pc, #520]	@ (8005d34 <app_init+0x270>)
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	213f      	movs	r1, #63	@ 0x3f
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fe80 	bl	8006834 <sniprintf>
 8005b34:	4603      	mov	r3, r0
 8005b36:	4a7c      	ldr	r2, [pc, #496]	@ (8005d28 <app_init+0x264>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b79      	ldr	r3, [pc, #484]	@ (8005d20 <app_init+0x25c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f932 	bl	8005da8 <logger_log_print_>
 8005b44:	f7ff fd22 	bl	800558c <vPortExitCritical>
	LOGGER_LOG(p_app);
 8005b48:	f7ff fcee 	bl	8005528 <vPortEnterCritical>
 8005b4c:	4b74      	ldr	r3, [pc, #464]	@ (8005d20 <app_init+0x25c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a79      	ldr	r2, [pc, #484]	@ (8005d38 <app_init+0x274>)
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	213f      	movs	r1, #63	@ 0x3f
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fe6c 	bl	8006834 <sniprintf>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4a72      	ldr	r2, [pc, #456]	@ (8005d28 <app_init+0x264>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b6f      	ldr	r3, [pc, #444]	@ (8005d20 <app_init+0x25c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f91e 	bl	8005da8 <logger_log_print_>
 8005b6c:	f7ff fd0e 	bl	800558c <vPortExitCritical>

    /* Before a queue or semaphore (binary or counting) or mutex is used it must 
     * be explicitly created */
	h_mutex = xSemaphoreCreateMutex();
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fd ff93 	bl	8003a9c <xQueueCreateMutex>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a70      	ldr	r2, [pc, #448]	@ (8005d3c <app_init+0x278>)
 8005b7a:	6013      	str	r3, [r2, #0]

    /* Check the queue or semaphore (binary or counting) or mutex was created 
     * successfully. */
	configASSERT(h_mutex != NULL);
 8005b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d3c <app_init+0x278>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <app_init+0xd8>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	61bb      	str	r3, [r7, #24]
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <app_init+0xd4>
	/* Add threads, ... */
	led_config_t* p_led_config;
	btn_config_t* p_btn_config;
    BaseType_t ret;

    p_led_config = &led_config[0];
 8005b9c:	4b68      	ldr	r3, [pc, #416]	@ (8005d40 <app_init+0x27c>)
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    p_btn_config = &btn_config[0];
 8005ba0:	4b68      	ldr	r3, [pc, #416]	@ (8005d44 <app_init+0x280>)
 8005ba2:	623b      	str	r3, [r7, #32]
    /* Task A thread at priority 1 */
    ret = xTaskCreate(task_led,						/* Pointer to the function thats implement the task. */
 8005ba4:	4b68      	ldr	r3, [pc, #416]	@ (8005d48 <app_init+0x284>)
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb2:	4966      	ldr	r1, [pc, #408]	@ (8005d4c <app_init+0x288>)
 8005bb4:	4866      	ldr	r0, [pc, #408]	@ (8005d50 <app_init+0x28c>)
 8005bb6:	f7fe fafd 	bl	80041b4 <xTaskCreate>
 8005bba:	61f8      	str	r0, [r7, #28]
				  (void*)p_led_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_a);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d00b      	beq.n	8005bda <app_init+0x116>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	617b      	str	r3, [r7, #20]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <app_init+0x112>

    /* Task AA thread at priority 1 */
    ret = xTaskCreate(task_button,					/* Pointer to the function thats implement the task. */
 8005bda:	4b5e      	ldr	r3, [pc, #376]	@ (8005d54 <app_init+0x290>)
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	2301      	movs	r3, #1
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be8:	495b      	ldr	r1, [pc, #364]	@ (8005d58 <app_init+0x294>)
 8005bea:	485c      	ldr	r0, [pc, #368]	@ (8005d5c <app_init+0x298>)
 8005bec:	f7fe fae2 	bl	80041b4 <xTaskCreate>
 8005bf0:	61f8      	str	r0, [r7, #28]
				  (void*)p_btn_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_aa);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d00b      	beq.n	8005c10 <app_init+0x14c>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	613b      	str	r3, [r7, #16]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <app_init+0x148>

    p_led_config = &led_config[1];
 8005c10:	4b53      	ldr	r3, [pc, #332]	@ (8005d60 <app_init+0x29c>)
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
    p_btn_config = &btn_config[1];
 8005c14:	4b53      	ldr	r3, [pc, #332]	@ (8005d64 <app_init+0x2a0>)
 8005c16:	623b      	str	r3, [r7, #32]
    /* Task B thread at priority 1 */
    ret = xTaskCreate(task_led,						/* Pointer to the function thats implement the task. */
 8005c18:	4b53      	ldr	r3, [pc, #332]	@ (8005d68 <app_init+0x2a4>)
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c26:	4951      	ldr	r1, [pc, #324]	@ (8005d6c <app_init+0x2a8>)
 8005c28:	4849      	ldr	r0, [pc, #292]	@ (8005d50 <app_init+0x28c>)
 8005c2a:	f7fe fac3 	bl	80041b4 <xTaskCreate>
 8005c2e:	61f8      	str	r0, [r7, #28]
				  (void*)p_led_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_b);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d00b      	beq.n	8005c4e <app_init+0x18a>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60fb      	str	r3, [r7, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <app_init+0x186>

    /* Task BB thread at priority 1 */
    ret = xTaskCreate(task_button,					/* Pointer to the function thats implement the task. */
 8005c4e:	4b48      	ldr	r3, [pc, #288]	@ (8005d70 <app_init+0x2ac>)
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	2301      	movs	r3, #1
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c5c:	4945      	ldr	r1, [pc, #276]	@ (8005d74 <app_init+0x2b0>)
 8005c5e:	483f      	ldr	r0, [pc, #252]	@ (8005d5c <app_init+0x298>)
 8005c60:	f7fe faa8 	bl	80041b4 <xTaskCreate>
 8005c64:	61f8      	str	r0, [r7, #28]
				  (void*)p_btn_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_bb);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d00b      	beq.n	8005c84 <app_init+0x1c0>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60bb      	str	r3, [r7, #8]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <app_init+0x1bc>

    p_led_config = &led_config[2];
 8005c84:	4b3c      	ldr	r3, [pc, #240]	@ (8005d78 <app_init+0x2b4>)
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
    p_btn_config = &btn_config[2];
 8005c88:	4b3c      	ldr	r3, [pc, #240]	@ (8005d7c <app_init+0x2b8>)
 8005c8a:	623b      	str	r3, [r7, #32]
    /* Task C thread at priority 1 */
    ret = xTaskCreate(task_led,						/* Pointer to the function thats implement the task. */
 8005c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d80 <app_init+0x2bc>)
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	2301      	movs	r3, #1
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c9a:	493a      	ldr	r1, [pc, #232]	@ (8005d84 <app_init+0x2c0>)
 8005c9c:	482c      	ldr	r0, [pc, #176]	@ (8005d50 <app_init+0x28c>)
 8005c9e:	f7fe fa89 	bl	80041b4 <xTaskCreate>
 8005ca2:	61f8      	str	r0, [r7, #28]
				  (void*)p_led_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_c);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00b      	beq.n	8005cc2 <app_init+0x1fe>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	607b      	str	r3, [r7, #4]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <app_init+0x1fa>

    /* Task CC thread at priority 1 */
    ret = xTaskCreate(task_button,					/* Pointer to the function thats implement the task. */
 8005cc2:	4b31      	ldr	r3, [pc, #196]	@ (8005d88 <app_init+0x2c4>)
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd0:	492e      	ldr	r1, [pc, #184]	@ (8005d8c <app_init+0x2c8>)
 8005cd2:	4822      	ldr	r0, [pc, #136]	@ (8005d5c <app_init+0x298>)
 8005cd4:	f7fe fa6e 	bl	80041b4 <xTaskCreate>
 8005cd8:	61f8      	str	r0, [r7, #28]
				  (void*)p_btn_config,			/* Pass the pointer as the task parameter. */
				  (tskIDLE_PRIORITY + 1ul),		/* This task will run at priority 1. */
				  &h_task_cc);					/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d00b      	beq.n	8005cf8 <app_init+0x234>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	603b      	str	r3, [r7, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <app_init+0x230>

    cycle_counter_init();
 8005cf8:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <app_init+0x2cc>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a24      	ldr	r2, [pc, #144]	@ (8005d90 <app_init+0x2cc>)
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	60d3      	str	r3, [r2, #12]
 8005d04:	4b23      	ldr	r3, [pc, #140]	@ (8005d94 <app_init+0x2d0>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	4b22      	ldr	r3, [pc, #136]	@ (8005d94 <app_init+0x2d0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	@ (8005d94 <app_init+0x2d0>)
 8005d10:	f043 0301 	orr.w	r3, r3, #1
 8005d14:	6013      	str	r3, [r2, #0]
}
 8005d16:	bf00      	nop
 8005d18:	372c      	adds	r7, #44	@ 0x2c
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	08007930 	.word	0x08007930
 8005d24:	08007800 	.word	0x08007800
 8005d28:	200041f4 	.word	0x200041f4
 8005d2c:	08007804 	.word	0x08007804
 8005d30:	08007810 	.word	0x08007810
 8005d34:	20000010 	.word	0x20000010
 8005d38:	20000014 	.word	0x20000014
 8005d3c:	20004198 	.word	0x20004198
 8005d40:	20000050 	.word	0x20000050
 8005d44:	20000028 	.word	0x20000028
 8005d48:	2000419c 	.word	0x2000419c
 8005d4c:	08007834 	.word	0x08007834
 8005d50:	08005f01 	.word	0x08005f01
 8005d54:	200041a0 	.word	0x200041a0
 8005d58:	0800783c 	.word	0x0800783c
 8005d5c:	08005dd1 	.word	0x08005dd1
 8005d60:	2000005c 	.word	0x2000005c
 8005d64:	20000034 	.word	0x20000034
 8005d68:	200041a4 	.word	0x200041a4
 8005d6c:	08007844 	.word	0x08007844
 8005d70:	200041a8 	.word	0x200041a8
 8005d74:	0800784c 	.word	0x0800784c
 8005d78:	20000068 	.word	0x20000068
 8005d7c:	20000040 	.word	0x20000040
 8005d80:	200041ac 	.word	0x200041ac
 8005d84:	08007854 	.word	0x08007854
 8005d88:	200041b0 	.word	0x200041b0
 8005d8c:	0800785c 	.word	0x0800785c
 8005d90:	e000edf0 	.word	0xe000edf0
 8005d94:	e0001000 	.word	0xe0001000

08005d98 <vApplicationIdleHook>:
/********************** external data declaration *****************************/

/********************** external functions definition ************************/
/* Hook Functions */
void vApplicationIdleHook(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
	   https://www.freertos.org/a00016.html
	   The idle hook is called repeatedly as long as the idle task is running. It
	   is paramount that the idle hook function does not call any API functions
	   that could cause it to block.*/
	//LOGGER_LOG("  +\r\n");
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	printf(msg);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fd2d 	bl	8006810 <iprintf>
	fflush(stdout);
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <logger_log_print_+0x24>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fc51 	bl	8006664 <fflush>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000088 	.word	0x20000088

08005dd0 <task_button>:
 * variable 'led_blinking_flag'. The variable is updated by task_button and
 * read by task_led. Mutex ensures data consistency and avoids race conditions.
 */

void task_button(void *parameters)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	g_task_btn_cnt = G_TASK_BTN_CNT_INI;
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed8 <task_button+0x108>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	btn_config_t *p_btn_config = (btn_config_t *)parameters;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]

	char *p_task_name = (char *)pcTaskGetTaskName(NULL);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fe fd06 	bl	80047f4 <pcTaskGetName>
 8005de8:	60b8      	str	r0, [r7, #8]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_button);
 8005dea:	f7ff fb9d 	bl	8005528 <vPortEnterCritical>
 8005dee:	4b3b      	ldr	r3, [pc, #236]	@ (8005edc <task_button+0x10c>)
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee0 <task_button+0x110>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8005ee4 <task_button+0x114>)
 8005dfc:	213f      	movs	r1, #63	@ 0x3f
 8005dfe:	f000 fd19 	bl	8006834 <sniprintf>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4a38      	ldr	r2, [pc, #224]	@ (8005ee8 <task_button+0x118>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4b34      	ldr	r3, [pc, #208]	@ (8005edc <task_button+0x10c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ffcb 	bl	8005da8 <logger_log_print_>
 8005e12:	f7ff fbbb 	bl	800558c <vPortExitCritical>
	for (;;)
	{
		#if (TEST_X == TEST_0)

		/* Update Task A Counter */
		g_task_btn_cnt++;
 8005e16:	4b30      	ldr	r3, [pc, #192]	@ (8005ed8 <task_button+0x108>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed8 <task_button+0x108>)
 8005e1e:	6013      	str	r3, [r2, #0]

		/* Check HW Button State */
		p_btn_config->btn_state = HAL_GPIO_ReadPin(p_btn_config->btn_gpio_port, p_btn_config->btn_pin);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	889b      	ldrh	r3, [r3, #4]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fb faaa 	bl	8001384 <HAL_GPIO_ReadPin>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	719a      	strb	r2, [r3, #6]
		if (BTN_PRESSED == p_btn_config->btn_state)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	799b      	ldrb	r3, [r3, #6]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d147      	bne.n	8005ed0 <task_button+0x100>
		{
			//Take the mutex/
			if (xSemaphoreTake(h_mutex, portMAX_DELAY) == pdTRUE)
 8005e40:	4b2a      	ldr	r3, [pc, #168]	@ (8005eec <task_button+0x11c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f04f 31ff 	mov.w	r1, #4294967295
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fd ff41 	bl	8003cd0 <xQueueSemaphoreTake>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d13d      	bne.n	8005ed0 <task_button+0x100>
			{
				if (NOT_BLINKING == led_blinking_flag)
 8005e54:	4b26      	ldr	r3, [pc, #152]	@ (8005ef0 <task_button+0x120>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d119      	bne.n	8005e90 <task_button+0xc0>
				{
					led_blinking_flag = BLINKING;
 8005e5c:	4b24      	ldr	r3, [pc, #144]	@ (8005ef0 <task_button+0x120>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
					LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_blinking_on);
 8005e62:	f7ff fb61 	bl	8005528 <vPortEnterCritical>
 8005e66:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <task_button+0x10c>)
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	4b22      	ldr	r3, [pc, #136]	@ (8005ef4 <task_button+0x124>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a21      	ldr	r2, [pc, #132]	@ (8005ef8 <task_button+0x128>)
 8005e74:	213f      	movs	r1, #63	@ 0x3f
 8005e76:	f000 fcdd 	bl	8006834 <sniprintf>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <task_button+0x118>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b16      	ldr	r3, [pc, #88]	@ (8005edc <task_button+0x10c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff8f 	bl	8005da8 <logger_log_print_>
 8005e8a:	f7ff fb7f 	bl	800558c <vPortExitCritical>
 8005e8e:	e018      	b.n	8005ec2 <task_button+0xf2>
				}
				else
				{
					led_blinking_flag = NOT_BLINKING;
 8005e90:	4b17      	ldr	r3, [pc, #92]	@ (8005ef0 <task_button+0x120>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
					LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_blinking_off);
 8005e96:	f7ff fb47 	bl	8005528 <vPortEnterCritical>
 8005e9a:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <task_button+0x10c>)
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	4b17      	ldr	r3, [pc, #92]	@ (8005efc <task_button+0x12c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a14      	ldr	r2, [pc, #80]	@ (8005ef8 <task_button+0x128>)
 8005ea8:	213f      	movs	r1, #63	@ 0x3f
 8005eaa:	f000 fcc3 	bl	8006834 <sniprintf>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <task_button+0x118>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <task_button+0x10c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ff75 	bl	8005da8 <logger_log_print_>
 8005ebe:	f7ff fb65 	bl	800558c <vPortExitCritical>
				}
				//Release the mutex
				xSemaphoreGive(h_mutex);
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <task_button+0x11c>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2100      	movs	r1, #0
 8005ecc:	f7fd fdfe 	bl	8003acc <xQueueGenericSend>
			}
		}

		/* We want this task to execute every 250 milliseconds. */
		vTaskDelay(BTN_TICK_DEL_MAX);
 8005ed0:	20fa      	movs	r0, #250	@ 0xfa
 8005ed2:	f7fe fb39 	bl	8004548 <vTaskDelay>
		g_task_btn_cnt++;
 8005ed6:	e79e      	b.n	8005e16 <task_button+0x46>
 8005ed8:	200041f8 	.word	0x200041f8
 8005edc:	08007930 	.word	0x08007930
 8005ee0:	2000001c 	.word	0x2000001c
 8005ee4:	080078a4 	.word	0x080078a4
 8005ee8:	200041f4 	.word	0x200041f4
 8005eec:	20004198 	.word	0x20004198
 8005ef0:	20000018 	.word	0x20000018
 8005ef4:	20000020 	.word	0x20000020
 8005ef8:	080078bc 	.word	0x080078bc
 8005efc:	20000024 	.word	0x20000024

08005f00 <task_led>:
 * variable 'led_blinking_flag'. The variable is updated by task_button and
 * read by task_led. Mutex ensures data consistency and avoids race conditions.
 */

void task_led(void *parameters)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)
	g_task_led_cnt = G_TASK_LED_CNT_INI;
 8005f08:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb8 <task_led+0xb8>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	led_config_t *p_led_config = (led_config_t *)parameters;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	617b      	str	r3, [r7, #20]

	TickType_t last_wake_time;

	/* The xLastWakeTime variable needs to be initialized with the current tick count. */
	last_wake_time = xTaskGetTickCount();
 8005f12:	f7fe fc5f 	bl	80047d4 <xTaskGetTickCount>
 8005f16:	4603      	mov	r3, r0
 8005f18:	60fb      	str	r3, [r7, #12]

	char *p_task_name = (char *)pcTaskGetName(NULL);
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7fe fc6a 	bl	80047f4 <pcTaskGetName>
 8005f20:	6138      	str	r0, [r7, #16]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_led);
 8005f22:	f7ff fb01 	bl	8005528 <vPortEnterCritical>
 8005f26:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <task_led+0xbc>)
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <task_led+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4a24      	ldr	r2, [pc, #144]	@ (8005fc4 <task_led+0xc4>)
 8005f34:	213f      	movs	r1, #63	@ 0x3f
 8005f36:	f000 fc7d 	bl	8006834 <sniprintf>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4a22      	ldr	r2, [pc, #136]	@ (8005fc8 <task_led+0xc8>)
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b1e      	ldr	r3, [pc, #120]	@ (8005fbc <task_led+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff2f 	bl	8005da8 <logger_log_print_>
 8005f4a:	f7ff fb1f 	bl	800558c <vPortExitCritical>
	for (;;)
	{
		#if (TEST_X == TEST_0)

		/* Update Task Led Counter */
		g_task_led_cnt++;
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb8 <task_led+0xb8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <task_led+0xb8>)
 8005f56:	6013      	str	r3, [r2, #0]

		//Take the mutex
		if (xSemaphoreTake(h_mutex, portMAX_DELAY) == pdTRUE)
 8005f58:	4b1c      	ldr	r3, [pc, #112]	@ (8005fcc <task_led+0xcc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd feb5 	bl	8003cd0 <xQueueSemaphoreTake>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d11e      	bne.n	8005faa <task_led+0xaa>
		{
			if (BLINKING == led_blinking_flag)
 8005f6c:	4b18      	ldr	r3, [pc, #96]	@ (8005fd0 <task_led+0xd0>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d113      	bne.n	8005f9c <task_led+0x9c>
			{
				//Toggle the led
				if (GPIO_PIN_RESET == (p_led_config->led_state))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	799b      	ldrb	r3, [r3, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <task_led+0x84>
				{
					p_led_config->led_state = GPIO_PIN_SET;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	719a      	strb	r2, [r3, #6]
 8005f82:	e002      	b.n	8005f8a <task_led+0x8a>
					//LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_led_t_on);
				}
				else
				{
					p_led_config->led_state = GPIO_PIN_RESET;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2200      	movs	r2, #0
 8005f88:	719a      	strb	r2, [r3, #6]
					//LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_led_t_off);
				}

				/* Update HW Led State */
				HAL_GPIO_WritePin(p_led_config->led_gpio_port, p_led_config->led_pin, p_led_config->led_state);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	8899      	ldrh	r1, [r3, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	799b      	ldrb	r3, [r3, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fb fa0c 	bl	80013b4 <HAL_GPIO_WritePin>
			}
			//Release the mutex
			xSemaphoreGive(h_mutex);
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <task_led+0xcc>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f7fd fd91 	bl	8003acc <xQueueGenericSend>
		}

		/* We want this task to execute exactly every 250 milliseconds. */
		vTaskDelayUntil(&last_wake_time, LED_TICK_DEL_MAX);
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	21fa      	movs	r1, #250	@ 0xfa
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fa49 	bl	8004448 <vTaskDelayUntil>
		g_task_led_cnt++;
 8005fb6:	e7ca      	b.n	8005f4e <task_led+0x4e>
 8005fb8:	200041fc 	.word	0x200041fc
 8005fbc:	08007930 	.word	0x08007930
 8005fc0:	2000004c 	.word	0x2000004c
 8005fc4:	08007900 	.word	0x08007900
 8005fc8:	200041f4 	.word	0x200041f4
 8005fcc:	20004198 	.word	0x20004198
 8005fd0:	20000018 	.word	0x20000018

08005fd4 <findslot>:
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <findslot+0x2c>)
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	4604      	mov	r4, r0
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	b118      	cbz	r0, 8005fe6 <findslot+0x12>
 8005fde:	6a03      	ldr	r3, [r0, #32]
 8005fe0:	b90b      	cbnz	r3, 8005fe6 <findslot+0x12>
 8005fe2:	f000 fbdf 	bl	80067a4 <__sinit>
 8005fe6:	2c13      	cmp	r4, #19
 8005fe8:	d807      	bhi.n	8005ffa <findslot+0x26>
 8005fea:	4806      	ldr	r0, [pc, #24]	@ (8006004 <findslot+0x30>)
 8005fec:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005ff0:	3201      	adds	r2, #1
 8005ff2:	d002      	beq.n	8005ffa <findslot+0x26>
 8005ff4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e7fc      	b.n	8005ff8 <findslot+0x24>
 8005ffe:	bf00      	nop
 8006000:	20000088 	.word	0x20000088
 8006004:	2000420c 	.word	0x2000420c

08006008 <error>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4604      	mov	r4, r0
 800600c:	f000 fcda 	bl	80069c4 <__errno>
 8006010:	2613      	movs	r6, #19
 8006012:	4605      	mov	r5, r0
 8006014:	2700      	movs	r7, #0
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	beab      	bkpt	0x00ab
 800601c:	4606      	mov	r6, r0
 800601e:	602e      	str	r6, [r5, #0]
 8006020:	4620      	mov	r0, r4
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006024 <checkerror>:
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d101      	bne.n	800602c <checkerror+0x8>
 8006028:	f7ff bfee 	b.w	8006008 <error>
 800602c:	4770      	bx	lr

0800602e <_swiread>:
 800602e:	b530      	push	{r4, r5, lr}
 8006030:	b085      	sub	sp, #20
 8006032:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006036:	9203      	str	r2, [sp, #12]
 8006038:	2406      	movs	r4, #6
 800603a:	ad01      	add	r5, sp, #4
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	beab      	bkpt	0x00ab
 8006042:	4604      	mov	r4, r0
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff ffed 	bl	8006024 <checkerror>
 800604a:	b005      	add	sp, #20
 800604c:	bd30      	pop	{r4, r5, pc}

0800604e <_read>:
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	460e      	mov	r6, r1
 8006052:	4614      	mov	r4, r2
 8006054:	f7ff ffbe 	bl	8005fd4 <findslot>
 8006058:	4605      	mov	r5, r0
 800605a:	b930      	cbnz	r0, 800606a <_read+0x1c>
 800605c:	f000 fcb2 	bl	80069c4 <__errno>
 8006060:	2309      	movs	r3, #9
 8006062:	6003      	str	r3, [r0, #0]
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	4622      	mov	r2, r4
 800606e:	4631      	mov	r1, r6
 8006070:	f7ff ffdd 	bl	800602e <_swiread>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d0f5      	beq.n	8006064 <_read+0x16>
 8006078:	686b      	ldr	r3, [r5, #4]
 800607a:	1a20      	subs	r0, r4, r0
 800607c:	4403      	add	r3, r0
 800607e:	606b      	str	r3, [r5, #4]
 8006080:	e7f2      	b.n	8006068 <_read+0x1a>

08006082 <_swilseek>:
 8006082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	4616      	mov	r6, r2
 8006088:	f7ff ffa4 	bl	8005fd4 <findslot>
 800608c:	4605      	mov	r5, r0
 800608e:	b940      	cbnz	r0, 80060a2 <_swilseek+0x20>
 8006090:	f000 fc98 	bl	80069c4 <__errno>
 8006094:	2309      	movs	r3, #9
 8006096:	6003      	str	r3, [r0, #0]
 8006098:	f04f 34ff 	mov.w	r4, #4294967295
 800609c:	4620      	mov	r0, r4
 800609e:	b003      	add	sp, #12
 80060a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a2:	2e02      	cmp	r6, #2
 80060a4:	d903      	bls.n	80060ae <_swilseek+0x2c>
 80060a6:	f000 fc8d 	bl	80069c4 <__errno>
 80060aa:	2316      	movs	r3, #22
 80060ac:	e7f3      	b.n	8006096 <_swilseek+0x14>
 80060ae:	2e01      	cmp	r6, #1
 80060b0:	d112      	bne.n	80060d8 <_swilseek+0x56>
 80060b2:	6843      	ldr	r3, [r0, #4]
 80060b4:	18e4      	adds	r4, r4, r3
 80060b6:	d4f6      	bmi.n	80060a6 <_swilseek+0x24>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	260a      	movs	r6, #10
 80060bc:	e9cd 3400 	strd	r3, r4, [sp]
 80060c0:	466f      	mov	r7, sp
 80060c2:	4630      	mov	r0, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	beab      	bkpt	0x00ab
 80060c8:	4606      	mov	r6, r0
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ffaa 	bl	8006024 <checkerror>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	dbe1      	blt.n	8006098 <_swilseek+0x16>
 80060d4:	606c      	str	r4, [r5, #4]
 80060d6:	e7e1      	b.n	800609c <_swilseek+0x1a>
 80060d8:	2e02      	cmp	r6, #2
 80060da:	6803      	ldr	r3, [r0, #0]
 80060dc:	d1ec      	bne.n	80060b8 <_swilseek+0x36>
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	260c      	movs	r6, #12
 80060e2:	466f      	mov	r7, sp
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	beab      	bkpt	0x00ab
 80060ea:	4606      	mov	r6, r0
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff ff99 	bl	8006024 <checkerror>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d0d0      	beq.n	8006098 <_swilseek+0x16>
 80060f6:	4404      	add	r4, r0
 80060f8:	e7de      	b.n	80060b8 <_swilseek+0x36>

080060fa <_lseek>:
 80060fa:	f7ff bfc2 	b.w	8006082 <_swilseek>

080060fe <_swiwrite>:
 80060fe:	b530      	push	{r4, r5, lr}
 8006100:	b085      	sub	sp, #20
 8006102:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006106:	9203      	str	r2, [sp, #12]
 8006108:	2405      	movs	r4, #5
 800610a:	ad01      	add	r5, sp, #4
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	beab      	bkpt	0x00ab
 8006112:	4604      	mov	r4, r0
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff ff85 	bl	8006024 <checkerror>
 800611a:	b005      	add	sp, #20
 800611c:	bd30      	pop	{r4, r5, pc}

0800611e <_write>:
 800611e:	b570      	push	{r4, r5, r6, lr}
 8006120:	460e      	mov	r6, r1
 8006122:	4615      	mov	r5, r2
 8006124:	f7ff ff56 	bl	8005fd4 <findslot>
 8006128:	4604      	mov	r4, r0
 800612a:	b930      	cbnz	r0, 800613a <_write+0x1c>
 800612c:	f000 fc4a 	bl	80069c4 <__errno>
 8006130:	2309      	movs	r3, #9
 8006132:	6003      	str	r3, [r0, #0]
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	462a      	mov	r2, r5
 800613e:	4631      	mov	r1, r6
 8006140:	f7ff ffdd 	bl	80060fe <_swiwrite>
 8006144:	1e03      	subs	r3, r0, #0
 8006146:	dbf5      	blt.n	8006134 <_write+0x16>
 8006148:	6862      	ldr	r2, [r4, #4]
 800614a:	1ae8      	subs	r0, r5, r3
 800614c:	4402      	add	r2, r0
 800614e:	42ab      	cmp	r3, r5
 8006150:	6062      	str	r2, [r4, #4]
 8006152:	d1f1      	bne.n	8006138 <_write+0x1a>
 8006154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006158:	2000      	movs	r0, #0
 800615a:	f7ff bf55 	b.w	8006008 <error>

0800615e <_swiclose>:
 800615e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006160:	2402      	movs	r4, #2
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	ad01      	add	r5, sp, #4
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	beab      	bkpt	0x00ab
 800616c:	4604      	mov	r4, r0
 800616e:	4620      	mov	r0, r4
 8006170:	f7ff ff58 	bl	8006024 <checkerror>
 8006174:	b003      	add	sp, #12
 8006176:	bd30      	pop	{r4, r5, pc}

08006178 <_close>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4605      	mov	r5, r0
 800617c:	f7ff ff2a 	bl	8005fd4 <findslot>
 8006180:	4604      	mov	r4, r0
 8006182:	b930      	cbnz	r0, 8006192 <_close+0x1a>
 8006184:	f000 fc1e 	bl	80069c4 <__errno>
 8006188:	2309      	movs	r3, #9
 800618a:	6003      	str	r3, [r0, #0]
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	3d01      	subs	r5, #1
 8006194:	2d01      	cmp	r5, #1
 8006196:	d809      	bhi.n	80061ac <_close+0x34>
 8006198:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <_close+0x48>)
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d104      	bne.n	80061ac <_close+0x34>
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	6003      	str	r3, [r0, #0]
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7f1      	b.n	8006190 <_close+0x18>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	f7ff ffd6 	bl	800615e <_swiclose>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d1ec      	bne.n	8006190 <_close+0x18>
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	e7e8      	b.n	8006190 <_close+0x18>
 80061be:	bf00      	nop
 80061c0:	2000420c 	.word	0x2000420c

080061c4 <_swistat>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	460c      	mov	r4, r1
 80061c8:	f7ff ff04 	bl	8005fd4 <findslot>
 80061cc:	4605      	mov	r5, r0
 80061ce:	b930      	cbnz	r0, 80061de <_swistat+0x1a>
 80061d0:	f000 fbf8 	bl	80069c4 <__errno>
 80061d4:	2309      	movs	r3, #9
 80061d6:	6003      	str	r3, [r0, #0]
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061ea:	64a3      	str	r3, [r4, #72]	@ 0x48
 80061ec:	260c      	movs	r6, #12
 80061ee:	4630      	mov	r0, r6
 80061f0:	4629      	mov	r1, r5
 80061f2:	beab      	bkpt	0x00ab
 80061f4:	4605      	mov	r5, r0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7ff ff14 	bl	8006024 <checkerror>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d0eb      	beq.n	80061d8 <_swistat+0x14>
 8006200:	6120      	str	r0, [r4, #16]
 8006202:	2000      	movs	r0, #0
 8006204:	e7ea      	b.n	80061dc <_swistat+0x18>

08006206 <_fstat>:
 8006206:	460b      	mov	r3, r1
 8006208:	b510      	push	{r4, lr}
 800620a:	2100      	movs	r1, #0
 800620c:	4604      	mov	r4, r0
 800620e:	2258      	movs	r2, #88	@ 0x58
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fb88 	bl	8006926 <memset>
 8006216:	4601      	mov	r1, r0
 8006218:	4620      	mov	r0, r4
 800621a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621e:	f7ff bfd1 	b.w	80061c4 <_swistat>

08006222 <_stat>:
 8006222:	b538      	push	{r3, r4, r5, lr}
 8006224:	460d      	mov	r5, r1
 8006226:	4604      	mov	r4, r0
 8006228:	2258      	movs	r2, #88	@ 0x58
 800622a:	2100      	movs	r1, #0
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fb7a 	bl	8006926 <memset>
 8006232:	4620      	mov	r0, r4
 8006234:	2100      	movs	r1, #0
 8006236:	f000 f811 	bl	800625c <_swiopen>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	4604      	mov	r4, r0
 800623e:	d00b      	beq.n	8006258 <_stat+0x36>
 8006240:	686b      	ldr	r3, [r5, #4]
 8006242:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006246:	606b      	str	r3, [r5, #4]
 8006248:	4629      	mov	r1, r5
 800624a:	f7ff ffbb 	bl	80061c4 <_swistat>
 800624e:	4605      	mov	r5, r0
 8006250:	4620      	mov	r0, r4
 8006252:	f7ff ff91 	bl	8006178 <_close>
 8006256:	462c      	mov	r4, r5
 8006258:	4620      	mov	r0, r4
 800625a:	bd38      	pop	{r3, r4, r5, pc}

0800625c <_swiopen>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800630c <_swiopen+0xb0>
 8006264:	b096      	sub	sp, #88	@ 0x58
 8006266:	4607      	mov	r7, r0
 8006268:	460e      	mov	r6, r1
 800626a:	2400      	movs	r4, #0
 800626c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006270:	3301      	adds	r3, #1
 8006272:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006276:	d032      	beq.n	80062de <_swiopen+0x82>
 8006278:	3401      	adds	r4, #1
 800627a:	2c14      	cmp	r4, #20
 800627c:	d1f6      	bne.n	800626c <_swiopen+0x10>
 800627e:	f000 fba1 	bl	80069c4 <__errno>
 8006282:	2318      	movs	r3, #24
 8006284:	e03a      	b.n	80062fc <_swiopen+0xa0>
 8006286:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800628a:	f240 6301 	movw	r3, #1537	@ 0x601
 800628e:	07b2      	lsls	r2, r6, #30
 8006290:	bf48      	it	mi
 8006292:	f045 0502 	orrmi.w	r5, r5, #2
 8006296:	421e      	tst	r6, r3
 8006298:	bf18      	it	ne
 800629a:	f045 0504 	orrne.w	r5, r5, #4
 800629e:	0733      	lsls	r3, r6, #28
 80062a0:	bf48      	it	mi
 80062a2:	f025 0504 	bicmi.w	r5, r5, #4
 80062a6:	4638      	mov	r0, r7
 80062a8:	bf48      	it	mi
 80062aa:	f045 0508 	orrmi.w	r5, r5, #8
 80062ae:	9700      	str	r7, [sp, #0]
 80062b0:	f7f9 ffae 	bl	8000210 <strlen>
 80062b4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80062b8:	2501      	movs	r5, #1
 80062ba:	4628      	mov	r0, r5
 80062bc:	4651      	mov	r1, sl
 80062be:	beab      	bkpt	0x00ab
 80062c0:	4605      	mov	r5, r0
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	db06      	blt.n	80062d4 <_swiopen+0x78>
 80062c6:	44c8      	add	r8, r9
 80062c8:	2300      	movs	r3, #0
 80062ca:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80062ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80062d2:	e016      	b.n	8006302 <_swiopen+0xa6>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff fe97 	bl	8006008 <error>
 80062da:	4604      	mov	r4, r0
 80062dc:	e011      	b.n	8006302 <_swiopen+0xa6>
 80062de:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80062e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062e6:	46ea      	mov	sl, sp
 80062e8:	d1cd      	bne.n	8006286 <_swiopen+0x2a>
 80062ea:	4651      	mov	r1, sl
 80062ec:	4638      	mov	r0, r7
 80062ee:	f7ff ff98 	bl	8006222 <_stat>
 80062f2:	3001      	adds	r0, #1
 80062f4:	d0c7      	beq.n	8006286 <_swiopen+0x2a>
 80062f6:	f000 fb65 	bl	80069c4 <__errno>
 80062fa:	2311      	movs	r3, #17
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006302:	4620      	mov	r0, r4
 8006304:	b016      	add	sp, #88	@ 0x58
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	bf00      	nop
 800630c:	2000420c 	.word	0x2000420c

08006310 <_get_semihosting_exts>:
 8006310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	4829      	ldr	r0, [pc, #164]	@ (80063c0 <_get_semihosting_exts+0xb0>)
 800631a:	2100      	movs	r1, #0
 800631c:	4615      	mov	r5, r2
 800631e:	f7ff ff9d 	bl	800625c <_swiopen>
 8006322:	462a      	mov	r2, r5
 8006324:	4604      	mov	r4, r0
 8006326:	2100      	movs	r1, #0
 8006328:	4630      	mov	r0, r6
 800632a:	f000 fafc 	bl	8006926 <memset>
 800632e:	1c63      	adds	r3, r4, #1
 8006330:	d014      	beq.n	800635c <_get_semihosting_exts+0x4c>
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fe4e 	bl	8005fd4 <findslot>
 8006338:	f04f 080c 	mov.w	r8, #12
 800633c:	4681      	mov	r9, r0
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	beab      	bkpt	0x00ab
 8006344:	4680      	mov	r8, r0
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff fe6c 	bl	8006024 <checkerror>
 800634c:	2803      	cmp	r0, #3
 800634e:	dd02      	ble.n	8006356 <_get_semihosting_exts+0x46>
 8006350:	1ec3      	subs	r3, r0, #3
 8006352:	42ab      	cmp	r3, r5
 8006354:	dc07      	bgt.n	8006366 <_get_semihosting_exts+0x56>
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff ff0e 	bl	8006178 <_close>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	b003      	add	sp, #12
 8006362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006366:	2204      	movs	r2, #4
 8006368:	eb0d 0102 	add.w	r1, sp, r2
 800636c:	4620      	mov	r0, r4
 800636e:	f7ff fe6e 	bl	800604e <_read>
 8006372:	2803      	cmp	r0, #3
 8006374:	ddef      	ble.n	8006356 <_get_semihosting_exts+0x46>
 8006376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800637a:	2b53      	cmp	r3, #83	@ 0x53
 800637c:	d1eb      	bne.n	8006356 <_get_semihosting_exts+0x46>
 800637e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006382:	2b48      	cmp	r3, #72	@ 0x48
 8006384:	d1e7      	bne.n	8006356 <_get_semihosting_exts+0x46>
 8006386:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800638a:	2b46      	cmp	r3, #70	@ 0x46
 800638c:	d1e3      	bne.n	8006356 <_get_semihosting_exts+0x46>
 800638e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006392:	2b42      	cmp	r3, #66	@ 0x42
 8006394:	d1df      	bne.n	8006356 <_get_semihosting_exts+0x46>
 8006396:	2201      	movs	r2, #1
 8006398:	4639      	mov	r1, r7
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff fe71 	bl	8006082 <_swilseek>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbd8      	blt.n	8006356 <_get_semihosting_exts+0x46>
 80063a4:	462a      	mov	r2, r5
 80063a6:	4631      	mov	r1, r6
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7ff fe50 	bl	800604e <_read>
 80063ae:	4605      	mov	r5, r0
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fee1 	bl	8006178 <_close>
 80063b6:	4628      	mov	r0, r5
 80063b8:	f7ff fe34 	bl	8006024 <checkerror>
 80063bc:	e7d0      	b.n	8006360 <_get_semihosting_exts+0x50>
 80063be:	bf00      	nop
 80063c0:	08007934 	.word	0x08007934

080063c4 <initialise_semihosting_exts>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	4d0a      	ldr	r5, [pc, #40]	@ (80063f0 <initialise_semihosting_exts+0x2c>)
 80063c8:	4c0a      	ldr	r4, [pc, #40]	@ (80063f4 <initialise_semihosting_exts+0x30>)
 80063ca:	2100      	movs	r1, #0
 80063cc:	2201      	movs	r2, #1
 80063ce:	a801      	add	r0, sp, #4
 80063d0:	6029      	str	r1, [r5, #0]
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	f7ff ff9c 	bl	8006310 <_get_semihosting_exts>
 80063d8:	2800      	cmp	r0, #0
 80063da:	dd07      	ble.n	80063ec <initialise_semihosting_exts+0x28>
 80063dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80063e0:	f003 0201 	and.w	r2, r3, #1
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	b003      	add	sp, #12
 80063ee:	bd30      	pop	{r4, r5, pc}
 80063f0:	20000078 	.word	0x20000078
 80063f4:	20000074 	.word	0x20000074

080063f8 <_has_ext_stdout_stderr>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4c04      	ldr	r4, [pc, #16]	@ (800640c <_has_ext_stdout_stderr+0x14>)
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da01      	bge.n	8006406 <_has_ext_stdout_stderr+0xe>
 8006402:	f7ff ffdf 	bl	80063c4 <initialise_semihosting_exts>
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	bd10      	pop	{r4, pc}
 800640a:	bf00      	nop
 800640c:	20000074 	.word	0x20000074

08006410 <initialise_monitor_handles>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b085      	sub	sp, #20
 8006416:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80064c8 <initialise_monitor_handles+0xb8>
 800641a:	f8cd 9004 	str.w	r9, [sp, #4]
 800641e:	2303      	movs	r3, #3
 8006420:	2400      	movs	r4, #0
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	af01      	add	r7, sp, #4
 8006426:	9402      	str	r4, [sp, #8]
 8006428:	2501      	movs	r5, #1
 800642a:	4628      	mov	r0, r5
 800642c:	4639      	mov	r1, r7
 800642e:	beab      	bkpt	0x00ab
 8006430:	4605      	mov	r5, r0
 8006432:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80064cc <initialise_monitor_handles+0xbc>
 8006436:	4623      	mov	r3, r4
 8006438:	4c20      	ldr	r4, [pc, #128]	@ (80064bc <initialise_monitor_handles+0xac>)
 800643a:	f8c8 5000 	str.w	r5, [r8]
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006446:	3301      	adds	r3, #1
 8006448:	2b14      	cmp	r3, #20
 800644a:	d1fa      	bne.n	8006442 <initialise_monitor_handles+0x32>
 800644c:	f7ff ffd4 	bl	80063f8 <_has_ext_stdout_stderr>
 8006450:	4d1b      	ldr	r5, [pc, #108]	@ (80064c0 <initialise_monitor_handles+0xb0>)
 8006452:	b1d0      	cbz	r0, 800648a <initialise_monitor_handles+0x7a>
 8006454:	f04f 0a03 	mov.w	sl, #3
 8006458:	2304      	movs	r3, #4
 800645a:	f8cd 9004 	str.w	r9, [sp, #4]
 800645e:	2601      	movs	r6, #1
 8006460:	f8cd a00c 	str.w	sl, [sp, #12]
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	beab      	bkpt	0x00ab
 800646c:	4683      	mov	fp, r0
 800646e:	4b15      	ldr	r3, [pc, #84]	@ (80064c4 <initialise_monitor_handles+0xb4>)
 8006470:	f8cd 9004 	str.w	r9, [sp, #4]
 8006474:	f8c3 b000 	str.w	fp, [r3]
 8006478:	2308      	movs	r3, #8
 800647a:	f8cd a00c 	str.w	sl, [sp, #12]
 800647e:	9302      	str	r3, [sp, #8]
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	beab      	bkpt	0x00ab
 8006486:	4606      	mov	r6, r0
 8006488:	602e      	str	r6, [r5, #0]
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	bf02      	ittt	eq
 8006490:	4b0c      	ldreq	r3, [pc, #48]	@ (80064c4 <initialise_monitor_handles+0xb4>)
 8006492:	681b      	ldreq	r3, [r3, #0]
 8006494:	602b      	streq	r3, [r5, #0]
 8006496:	2600      	movs	r6, #0
 8006498:	f8d8 3000 	ldr.w	r3, [r8]
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	6066      	str	r6, [r4, #4]
 80064a0:	f7ff ffaa 	bl	80063f8 <_has_ext_stdout_stderr>
 80064a4:	b130      	cbz	r0, 80064b4 <initialise_monitor_handles+0xa4>
 80064a6:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <initialise_monitor_handles+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80064b4:	b005      	add	sp, #20
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	bf00      	nop
 80064bc:	2000420c 	.word	0x2000420c
 80064c0:	20004200 	.word	0x20004200
 80064c4:	20004204 	.word	0x20004204
 80064c8:	0800794a 	.word	0x0800794a
 80064cc:	20004208 	.word	0x20004208

080064d0 <_isatty>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	f7ff fd7f 	bl	8005fd4 <findslot>
 80064d6:	2409      	movs	r4, #9
 80064d8:	4605      	mov	r5, r0
 80064da:	b920      	cbnz	r0, 80064e6 <_isatty+0x16>
 80064dc:	f000 fa72 	bl	80069c4 <__errno>
 80064e0:	6004      	str	r4, [r0, #0]
 80064e2:	2000      	movs	r0, #0
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	beab      	bkpt	0x00ab
 80064ec:	4604      	mov	r4, r0
 80064ee:	2c01      	cmp	r4, #1
 80064f0:	4620      	mov	r0, r4
 80064f2:	d0f7      	beq.n	80064e4 <_isatty+0x14>
 80064f4:	f000 fa66 	bl	80069c4 <__errno>
 80064f8:	2513      	movs	r5, #19
 80064fa:	4604      	mov	r4, r0
 80064fc:	2600      	movs	r6, #0
 80064fe:	4628      	mov	r0, r5
 8006500:	4631      	mov	r1, r6
 8006502:	beab      	bkpt	0x00ab
 8006504:	4605      	mov	r5, r0
 8006506:	6025      	str	r5, [r4, #0]
 8006508:	e7eb      	b.n	80064e2 <_isatty+0x12>
	...

0800650c <__sflush_r>:
 800650c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	0716      	lsls	r6, r2, #28
 8006516:	4605      	mov	r5, r0
 8006518:	460c      	mov	r4, r1
 800651a:	d454      	bmi.n	80065c6 <__sflush_r+0xba>
 800651c:	684b      	ldr	r3, [r1, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dc02      	bgt.n	8006528 <__sflush_r+0x1c>
 8006522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	dd48      	ble.n	80065ba <__sflush_r+0xae>
 8006528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800652a:	2e00      	cmp	r6, #0
 800652c:	d045      	beq.n	80065ba <__sflush_r+0xae>
 800652e:	2300      	movs	r3, #0
 8006530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006534:	682f      	ldr	r7, [r5, #0]
 8006536:	6a21      	ldr	r1, [r4, #32]
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	d030      	beq.n	800659e <__sflush_r+0x92>
 800653c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	0759      	lsls	r1, r3, #29
 8006542:	d505      	bpl.n	8006550 <__sflush_r+0x44>
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800654a:	b10b      	cbz	r3, 8006550 <__sflush_r+0x44>
 800654c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	2300      	movs	r3, #0
 8006552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006554:	6a21      	ldr	r1, [r4, #32]
 8006556:	4628      	mov	r0, r5
 8006558:	47b0      	blx	r6
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	d106      	bne.n	800656e <__sflush_r+0x62>
 8006560:	6829      	ldr	r1, [r5, #0]
 8006562:	291d      	cmp	r1, #29
 8006564:	d82b      	bhi.n	80065be <__sflush_r+0xb2>
 8006566:	4a2a      	ldr	r2, [pc, #168]	@ (8006610 <__sflush_r+0x104>)
 8006568:	40ca      	lsrs	r2, r1
 800656a:	07d6      	lsls	r6, r2, #31
 800656c:	d527      	bpl.n	80065be <__sflush_r+0xb2>
 800656e:	2200      	movs	r2, #0
 8006570:	6062      	str	r2, [r4, #4]
 8006572:	04d9      	lsls	r1, r3, #19
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	6022      	str	r2, [r4, #0]
 8006578:	d504      	bpl.n	8006584 <__sflush_r+0x78>
 800657a:	1c42      	adds	r2, r0, #1
 800657c:	d101      	bne.n	8006582 <__sflush_r+0x76>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	b903      	cbnz	r3, 8006584 <__sflush_r+0x78>
 8006582:	6560      	str	r0, [r4, #84]	@ 0x54
 8006584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006586:	602f      	str	r7, [r5, #0]
 8006588:	b1b9      	cbz	r1, 80065ba <__sflush_r+0xae>
 800658a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800658e:	4299      	cmp	r1, r3
 8006590:	d002      	beq.n	8006598 <__sflush_r+0x8c>
 8006592:	4628      	mov	r0, r5
 8006594:	f000 fa52 	bl	8006a3c <_free_r>
 8006598:	2300      	movs	r3, #0
 800659a:	6363      	str	r3, [r4, #52]	@ 0x34
 800659c:	e00d      	b.n	80065ba <__sflush_r+0xae>
 800659e:	2301      	movs	r3, #1
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b0      	blx	r6
 80065a4:	4602      	mov	r2, r0
 80065a6:	1c50      	adds	r0, r2, #1
 80065a8:	d1c9      	bne.n	800653e <__sflush_r+0x32>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0c6      	beq.n	800653e <__sflush_r+0x32>
 80065b0:	2b1d      	cmp	r3, #29
 80065b2:	d001      	beq.n	80065b8 <__sflush_r+0xac>
 80065b4:	2b16      	cmp	r3, #22
 80065b6:	d11e      	bne.n	80065f6 <__sflush_r+0xea>
 80065b8:	602f      	str	r7, [r5, #0]
 80065ba:	2000      	movs	r0, #0
 80065bc:	e022      	b.n	8006604 <__sflush_r+0xf8>
 80065be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c2:	b21b      	sxth	r3, r3
 80065c4:	e01b      	b.n	80065fe <__sflush_r+0xf2>
 80065c6:	690f      	ldr	r7, [r1, #16]
 80065c8:	2f00      	cmp	r7, #0
 80065ca:	d0f6      	beq.n	80065ba <__sflush_r+0xae>
 80065cc:	0793      	lsls	r3, r2, #30
 80065ce:	680e      	ldr	r6, [r1, #0]
 80065d0:	bf08      	it	eq
 80065d2:	694b      	ldreq	r3, [r1, #20]
 80065d4:	600f      	str	r7, [r1, #0]
 80065d6:	bf18      	it	ne
 80065d8:	2300      	movne	r3, #0
 80065da:	eba6 0807 	sub.w	r8, r6, r7
 80065de:	608b      	str	r3, [r1, #8]
 80065e0:	f1b8 0f00 	cmp.w	r8, #0
 80065e4:	dde9      	ble.n	80065ba <__sflush_r+0xae>
 80065e6:	6a21      	ldr	r1, [r4, #32]
 80065e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ea:	4643      	mov	r3, r8
 80065ec:	463a      	mov	r2, r7
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b0      	blx	r6
 80065f2:	2800      	cmp	r0, #0
 80065f4:	dc08      	bgt.n	8006608 <__sflush_r+0xfc>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006608:	4407      	add	r7, r0
 800660a:	eba8 0800 	sub.w	r8, r8, r0
 800660e:	e7e7      	b.n	80065e0 <__sflush_r+0xd4>
 8006610:	20400001 	.word	0x20400001

08006614 <_fflush_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	690b      	ldr	r3, [r1, #16]
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b913      	cbnz	r3, 8006624 <_fflush_r+0x10>
 800661e:	2500      	movs	r5, #0
 8006620:	4628      	mov	r0, r5
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	b118      	cbz	r0, 800662e <_fflush_r+0x1a>
 8006626:	6a03      	ldr	r3, [r0, #32]
 8006628:	b90b      	cbnz	r3, 800662e <_fflush_r+0x1a>
 800662a:	f000 f8bb 	bl	80067a4 <__sinit>
 800662e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f3      	beq.n	800661e <_fflush_r+0xa>
 8006636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006638:	07d0      	lsls	r0, r2, #31
 800663a:	d404      	bmi.n	8006646 <_fflush_r+0x32>
 800663c:	0599      	lsls	r1, r3, #22
 800663e:	d402      	bmi.n	8006646 <_fflush_r+0x32>
 8006640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006642:	f000 f9ea 	bl	8006a1a <__retarget_lock_acquire_recursive>
 8006646:	4628      	mov	r0, r5
 8006648:	4621      	mov	r1, r4
 800664a:	f7ff ff5f 	bl	800650c <__sflush_r>
 800664e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006650:	07da      	lsls	r2, r3, #31
 8006652:	4605      	mov	r5, r0
 8006654:	d4e4      	bmi.n	8006620 <_fflush_r+0xc>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	059b      	lsls	r3, r3, #22
 800665a:	d4e1      	bmi.n	8006620 <_fflush_r+0xc>
 800665c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665e:	f000 f9dd 	bl	8006a1c <__retarget_lock_release_recursive>
 8006662:	e7dd      	b.n	8006620 <_fflush_r+0xc>

08006664 <fflush>:
 8006664:	4601      	mov	r1, r0
 8006666:	b920      	cbnz	r0, 8006672 <fflush+0xe>
 8006668:	4a04      	ldr	r2, [pc, #16]	@ (800667c <fflush+0x18>)
 800666a:	4905      	ldr	r1, [pc, #20]	@ (8006680 <fflush+0x1c>)
 800666c:	4805      	ldr	r0, [pc, #20]	@ (8006684 <fflush+0x20>)
 800666e:	f000 b8b1 	b.w	80067d4 <_fwalk_sglue>
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <fflush+0x24>)
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f7ff bfcd 	b.w	8006614 <_fflush_r>
 800667a:	bf00      	nop
 800667c:	2000007c 	.word	0x2000007c
 8006680:	08006615 	.word	0x08006615
 8006684:	2000008c 	.word	0x2000008c
 8006688:	20000088 	.word	0x20000088

0800668c <std>:
 800668c:	2300      	movs	r3, #0
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
 8006692:	e9c0 3300 	strd	r3, r3, [r0]
 8006696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669a:	6083      	str	r3, [r0, #8]
 800669c:	8181      	strh	r1, [r0, #12]
 800669e:	6643      	str	r3, [r0, #100]	@ 0x64
 80066a0:	81c2      	strh	r2, [r0, #14]
 80066a2:	6183      	str	r3, [r0, #24]
 80066a4:	4619      	mov	r1, r3
 80066a6:	2208      	movs	r2, #8
 80066a8:	305c      	adds	r0, #92	@ 0x5c
 80066aa:	f000 f93c 	bl	8006926 <memset>
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <std+0x58>)
 80066b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80066b2:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <std+0x5c>)
 80066b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066b6:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <std+0x60>)
 80066b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <std+0x64>)
 80066bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <std+0x68>)
 80066c0:	6224      	str	r4, [r4, #32]
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d006      	beq.n	80066d4 <std+0x48>
 80066c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066ca:	4294      	cmp	r4, r2
 80066cc:	d002      	beq.n	80066d4 <std+0x48>
 80066ce:	33d0      	adds	r3, #208	@ 0xd0
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d105      	bne.n	80066e0 <std+0x54>
 80066d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	f000 b99c 	b.w	8006a18 <__retarget_lock_init_recursive>
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	bf00      	nop
 80066e4:	080068a1 	.word	0x080068a1
 80066e8:	080068c3 	.word	0x080068c3
 80066ec:	080068fb 	.word	0x080068fb
 80066f0:	0800691f 	.word	0x0800691f
 80066f4:	200042ac 	.word	0x200042ac

080066f8 <stdio_exit_handler>:
 80066f8:	4a02      	ldr	r2, [pc, #8]	@ (8006704 <stdio_exit_handler+0xc>)
 80066fa:	4903      	ldr	r1, [pc, #12]	@ (8006708 <stdio_exit_handler+0x10>)
 80066fc:	4803      	ldr	r0, [pc, #12]	@ (800670c <stdio_exit_handler+0x14>)
 80066fe:	f000 b869 	b.w	80067d4 <_fwalk_sglue>
 8006702:	bf00      	nop
 8006704:	2000007c 	.word	0x2000007c
 8006708:	08006615 	.word	0x08006615
 800670c:	2000008c 	.word	0x2000008c

08006710 <cleanup_stdio>:
 8006710:	6841      	ldr	r1, [r0, #4]
 8006712:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <cleanup_stdio+0x34>)
 8006714:	4299      	cmp	r1, r3
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	d001      	beq.n	8006720 <cleanup_stdio+0x10>
 800671c:	f7ff ff7a 	bl	8006614 <_fflush_r>
 8006720:	68a1      	ldr	r1, [r4, #8]
 8006722:	4b09      	ldr	r3, [pc, #36]	@ (8006748 <cleanup_stdio+0x38>)
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <cleanup_stdio+0x1e>
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff ff73 	bl	8006614 <_fflush_r>
 800672e:	68e1      	ldr	r1, [r4, #12]
 8006730:	4b06      	ldr	r3, [pc, #24]	@ (800674c <cleanup_stdio+0x3c>)
 8006732:	4299      	cmp	r1, r3
 8006734:	d004      	beq.n	8006740 <cleanup_stdio+0x30>
 8006736:	4620      	mov	r0, r4
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f7ff bf6a 	b.w	8006614 <_fflush_r>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	200042ac 	.word	0x200042ac
 8006748:	20004314 	.word	0x20004314
 800674c:	2000437c 	.word	0x2000437c

08006750 <global_stdio_init.part.0>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <global_stdio_init.part.0+0x30>)
 8006754:	4c0b      	ldr	r4, [pc, #44]	@ (8006784 <global_stdio_init.part.0+0x34>)
 8006756:	4a0c      	ldr	r2, [pc, #48]	@ (8006788 <global_stdio_init.part.0+0x38>)
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	4620      	mov	r0, r4
 800675c:	2200      	movs	r2, #0
 800675e:	2104      	movs	r1, #4
 8006760:	f7ff ff94 	bl	800668c <std>
 8006764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006768:	2201      	movs	r2, #1
 800676a:	2109      	movs	r1, #9
 800676c:	f7ff ff8e 	bl	800668c <std>
 8006770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006774:	2202      	movs	r2, #2
 8006776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677a:	2112      	movs	r1, #18
 800677c:	f7ff bf86 	b.w	800668c <std>
 8006780:	200043e4 	.word	0x200043e4
 8006784:	200042ac 	.word	0x200042ac
 8006788:	080066f9 	.word	0x080066f9

0800678c <__sfp_lock_acquire>:
 800678c:	4801      	ldr	r0, [pc, #4]	@ (8006794 <__sfp_lock_acquire+0x8>)
 800678e:	f000 b944 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8006792:	bf00      	nop
 8006794:	200043ed 	.word	0x200043ed

08006798 <__sfp_lock_release>:
 8006798:	4801      	ldr	r0, [pc, #4]	@ (80067a0 <__sfp_lock_release+0x8>)
 800679a:	f000 b93f 	b.w	8006a1c <__retarget_lock_release_recursive>
 800679e:	bf00      	nop
 80067a0:	200043ed 	.word	0x200043ed

080067a4 <__sinit>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	f7ff fff0 	bl	800678c <__sfp_lock_acquire>
 80067ac:	6a23      	ldr	r3, [r4, #32]
 80067ae:	b11b      	cbz	r3, 80067b8 <__sinit+0x14>
 80067b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b4:	f7ff bff0 	b.w	8006798 <__sfp_lock_release>
 80067b8:	4b04      	ldr	r3, [pc, #16]	@ (80067cc <__sinit+0x28>)
 80067ba:	6223      	str	r3, [r4, #32]
 80067bc:	4b04      	ldr	r3, [pc, #16]	@ (80067d0 <__sinit+0x2c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f5      	bne.n	80067b0 <__sinit+0xc>
 80067c4:	f7ff ffc4 	bl	8006750 <global_stdio_init.part.0>
 80067c8:	e7f2      	b.n	80067b0 <__sinit+0xc>
 80067ca:	bf00      	nop
 80067cc:	08006711 	.word	0x08006711
 80067d0:	200043e4 	.word	0x200043e4

080067d4 <_fwalk_sglue>:
 80067d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d8:	4607      	mov	r7, r0
 80067da:	4688      	mov	r8, r1
 80067dc:	4614      	mov	r4, r2
 80067de:	2600      	movs	r6, #0
 80067e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e4:	f1b9 0901 	subs.w	r9, r9, #1
 80067e8:	d505      	bpl.n	80067f6 <_fwalk_sglue+0x22>
 80067ea:	6824      	ldr	r4, [r4, #0]
 80067ec:	2c00      	cmp	r4, #0
 80067ee:	d1f7      	bne.n	80067e0 <_fwalk_sglue+0xc>
 80067f0:	4630      	mov	r0, r6
 80067f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f6:	89ab      	ldrh	r3, [r5, #12]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d907      	bls.n	800680c <_fwalk_sglue+0x38>
 80067fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006800:	3301      	adds	r3, #1
 8006802:	d003      	beq.n	800680c <_fwalk_sglue+0x38>
 8006804:	4629      	mov	r1, r5
 8006806:	4638      	mov	r0, r7
 8006808:	47c0      	blx	r8
 800680a:	4306      	orrs	r6, r0
 800680c:	3568      	adds	r5, #104	@ 0x68
 800680e:	e7e9      	b.n	80067e4 <_fwalk_sglue+0x10>

08006810 <iprintf>:
 8006810:	b40f      	push	{r0, r1, r2, r3}
 8006812:	b507      	push	{r0, r1, r2, lr}
 8006814:	4906      	ldr	r1, [pc, #24]	@ (8006830 <iprintf+0x20>)
 8006816:	ab04      	add	r3, sp, #16
 8006818:	6808      	ldr	r0, [r1, #0]
 800681a:	f853 2b04 	ldr.w	r2, [r3], #4
 800681e:	6881      	ldr	r1, [r0, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	f000 fb85 	bl	8006f30 <_vfiprintf_r>
 8006826:	b003      	add	sp, #12
 8006828:	f85d eb04 	ldr.w	lr, [sp], #4
 800682c:	b004      	add	sp, #16
 800682e:	4770      	bx	lr
 8006830:	20000088 	.word	0x20000088

08006834 <sniprintf>:
 8006834:	b40c      	push	{r2, r3}
 8006836:	b530      	push	{r4, r5, lr}
 8006838:	4b18      	ldr	r3, [pc, #96]	@ (800689c <sniprintf+0x68>)
 800683a:	1e0c      	subs	r4, r1, #0
 800683c:	681d      	ldr	r5, [r3, #0]
 800683e:	b09d      	sub	sp, #116	@ 0x74
 8006840:	da08      	bge.n	8006854 <sniprintf+0x20>
 8006842:	238b      	movs	r3, #139	@ 0x8b
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	f04f 30ff 	mov.w	r0, #4294967295
 800684a:	b01d      	add	sp, #116	@ 0x74
 800684c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006850:	b002      	add	sp, #8
 8006852:	4770      	bx	lr
 8006854:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006858:	f8ad 3014 	strh.w	r3, [sp, #20]
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006862:	bf14      	ite	ne
 8006864:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006868:	4623      	moveq	r3, r4
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	9307      	str	r3, [sp, #28]
 800686e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006872:	9002      	str	r0, [sp, #8]
 8006874:	9006      	str	r0, [sp, #24]
 8006876:	f8ad 3016 	strh.w	r3, [sp, #22]
 800687a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800687c:	ab21      	add	r3, sp, #132	@ 0x84
 800687e:	a902      	add	r1, sp, #8
 8006880:	4628      	mov	r0, r5
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f000 fa2e 	bl	8006ce4 <_svfiprintf_r>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	bfbc      	itt	lt
 800688c:	238b      	movlt	r3, #139	@ 0x8b
 800688e:	602b      	strlt	r3, [r5, #0]
 8006890:	2c00      	cmp	r4, #0
 8006892:	d0da      	beq.n	800684a <sniprintf+0x16>
 8006894:	9b02      	ldr	r3, [sp, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e7d6      	b.n	800684a <sniprintf+0x16>
 800689c:	20000088 	.word	0x20000088

080068a0 <__sread>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	f000 f868 	bl	800697c <_read_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	bfab      	itete	ge
 80068b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068b2:	89a3      	ldrhlt	r3, [r4, #12]
 80068b4:	181b      	addge	r3, r3, r0
 80068b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ba:	bfac      	ite	ge
 80068bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068be:	81a3      	strhlt	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__swrite>:
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	461f      	mov	r7, r3
 80068c8:	898b      	ldrh	r3, [r1, #12]
 80068ca:	05db      	lsls	r3, r3, #23
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	4616      	mov	r6, r2
 80068d2:	d505      	bpl.n	80068e0 <__swrite+0x1e>
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	2302      	movs	r3, #2
 80068da:	2200      	movs	r2, #0
 80068dc:	f000 f83c 	bl	8006958 <_lseek_r>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	4632      	mov	r2, r6
 80068ee:	463b      	mov	r3, r7
 80068f0:	4628      	mov	r0, r5
 80068f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	f000 b853 	b.w	80069a0 <_write_r>

080068fa <__sseek>:
 80068fa:	b510      	push	{r4, lr}
 80068fc:	460c      	mov	r4, r1
 80068fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006902:	f000 f829 	bl	8006958 <_lseek_r>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	bf15      	itete	ne
 800690c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800690e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006912:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006916:	81a3      	strheq	r3, [r4, #12]
 8006918:	bf18      	it	ne
 800691a:	81a3      	strhne	r3, [r4, #12]
 800691c:	bd10      	pop	{r4, pc}

0800691e <__sclose>:
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 b809 	b.w	8006938 <_close_r>

08006926 <memset>:
 8006926:	4402      	add	r2, r0
 8006928:	4603      	mov	r3, r0
 800692a:	4293      	cmp	r3, r2
 800692c:	d100      	bne.n	8006930 <memset+0xa>
 800692e:	4770      	bx	lr
 8006930:	f803 1b01 	strb.w	r1, [r3], #1
 8006934:	e7f9      	b.n	800692a <memset+0x4>
	...

08006938 <_close_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d06      	ldr	r5, [pc, #24]	@ (8006954 <_close_r+0x1c>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7ff fc18 	bl	8006178 <_close>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_close_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_close_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	200043e8 	.word	0x200043e8

08006958 <_lseek_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d07      	ldr	r5, [pc, #28]	@ (8006978 <_lseek_r+0x20>)
 800695c:	4604      	mov	r4, r0
 800695e:	4608      	mov	r0, r1
 8006960:	4611      	mov	r1, r2
 8006962:	2200      	movs	r2, #0
 8006964:	602a      	str	r2, [r5, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7ff fbc7 	bl	80060fa <_lseek>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_lseek_r+0x1e>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_lseek_r+0x1e>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	200043e8 	.word	0x200043e8

0800697c <_read_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	@ (800699c <_read_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7ff fb5f 	bl	800604e <_read>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_read_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_read_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	200043e8 	.word	0x200043e8

080069a0 <_write_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d07      	ldr	r5, [pc, #28]	@ (80069c0 <_write_r+0x20>)
 80069a4:	4604      	mov	r4, r0
 80069a6:	4608      	mov	r0, r1
 80069a8:	4611      	mov	r1, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7ff fbb5 	bl	800611e <_write>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_write_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_write_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	200043e8 	.word	0x200043e8

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	@ (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000088 	.word	0x20000088

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a08 <__libc_init_array+0x38>)
 80069d4:	4c0d      	ldr	r4, [pc, #52]	@ (8006a0c <__libc_init_array+0x3c>)
 80069d6:	1b64      	subs	r4, r4, r5
 80069d8:	10a4      	asrs	r4, r4, #2
 80069da:	2600      	movs	r6, #0
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006a10 <__libc_init_array+0x40>)
 80069e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006a14 <__libc_init_array+0x44>)
 80069e4:	f000 fec0 	bl	8007768 <_init>
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	2600      	movs	r6, #0
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	0800798c 	.word	0x0800798c
 8006a0c:	0800798c 	.word	0x0800798c
 8006a10:	0800798c 	.word	0x0800798c
 8006a14:	08007990 	.word	0x08007990

08006a18 <__retarget_lock_init_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_acquire_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <__retarget_lock_release_recursive>:
 8006a1c:	4770      	bx	lr

08006a1e <memcpy>:
 8006a1e:	440a      	add	r2, r1
 8006a20:	4291      	cmp	r1, r2
 8006a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a26:	d100      	bne.n	8006a2a <memcpy+0xc>
 8006a28:	4770      	bx	lr
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a34:	4291      	cmp	r1, r2
 8006a36:	d1f9      	bne.n	8006a2c <memcpy+0xe>
 8006a38:	bd10      	pop	{r4, pc}
	...

08006a3c <_free_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4605      	mov	r5, r0
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d041      	beq.n	8006ac8 <_free_r+0x8c>
 8006a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a48:	1f0c      	subs	r4, r1, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfb8      	it	lt
 8006a4e:	18e4      	addlt	r4, r4, r3
 8006a50:	f000 f8e0 	bl	8006c14 <__malloc_lock>
 8006a54:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <_free_r+0x90>)
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	b933      	cbnz	r3, 8006a68 <_free_r+0x2c>
 8006a5a:	6063      	str	r3, [r4, #4]
 8006a5c:	6014      	str	r4, [r2, #0]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a64:	f000 b8dc 	b.w	8006c20 <__malloc_unlock>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d908      	bls.n	8006a7e <_free_r+0x42>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	1821      	adds	r1, r4, r0
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf01      	itttt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	1809      	addeq	r1, r1, r0
 8006a7a:	6021      	streq	r1, [r4, #0]
 8006a7c:	e7ed      	b.n	8006a5a <_free_r+0x1e>
 8006a7e:	461a      	mov	r2, r3
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b10b      	cbz	r3, 8006a88 <_free_r+0x4c>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d9fa      	bls.n	8006a7e <_free_r+0x42>
 8006a88:	6811      	ldr	r1, [r2, #0]
 8006a8a:	1850      	adds	r0, r2, r1
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d10b      	bne.n	8006aa8 <_free_r+0x6c>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	4401      	add	r1, r0
 8006a94:	1850      	adds	r0, r2, r1
 8006a96:	4283      	cmp	r3, r0
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	d1e0      	bne.n	8006a5e <_free_r+0x22>
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	6053      	str	r3, [r2, #4]
 8006aa2:	4408      	add	r0, r1
 8006aa4:	6010      	str	r0, [r2, #0]
 8006aa6:	e7da      	b.n	8006a5e <_free_r+0x22>
 8006aa8:	d902      	bls.n	8006ab0 <_free_r+0x74>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	602b      	str	r3, [r5, #0]
 8006aae:	e7d6      	b.n	8006a5e <_free_r+0x22>
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	1821      	adds	r1, r4, r0
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	bf04      	itt	eq
 8006ab8:	6819      	ldreq	r1, [r3, #0]
 8006aba:	685b      	ldreq	r3, [r3, #4]
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	bf04      	itt	eq
 8006ac0:	1809      	addeq	r1, r1, r0
 8006ac2:	6021      	streq	r1, [r4, #0]
 8006ac4:	6054      	str	r4, [r2, #4]
 8006ac6:	e7ca      	b.n	8006a5e <_free_r+0x22>
 8006ac8:	bd38      	pop	{r3, r4, r5, pc}
 8006aca:	bf00      	nop
 8006acc:	200043f4 	.word	0x200043f4

08006ad0 <sbrk_aligned>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8006b10 <sbrk_aligned+0x40>)
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	b911      	cbnz	r1, 8006ae2 <sbrk_aligned+0x12>
 8006adc:	f000 fd7a 	bl	80075d4 <_sbrk_r>
 8006ae0:	6030      	str	r0, [r6, #0]
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fd75 	bl	80075d4 <_sbrk_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d103      	bne.n	8006af6 <sbrk_aligned+0x26>
 8006aee:	f04f 34ff 	mov.w	r4, #4294967295
 8006af2:	4620      	mov	r0, r4
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	1cc4      	adds	r4, r0, #3
 8006af8:	f024 0403 	bic.w	r4, r4, #3
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d0f8      	beq.n	8006af2 <sbrk_aligned+0x22>
 8006b00:	1a21      	subs	r1, r4, r0
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 fd66 	bl	80075d4 <_sbrk_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d1f2      	bne.n	8006af2 <sbrk_aligned+0x22>
 8006b0c:	e7ef      	b.n	8006aee <sbrk_aligned+0x1e>
 8006b0e:	bf00      	nop
 8006b10:	200043f0 	.word	0x200043f0

08006b14 <_malloc_r>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	1ccd      	adds	r5, r1, #3
 8006b1a:	f025 0503 	bic.w	r5, r5, #3
 8006b1e:	3508      	adds	r5, #8
 8006b20:	2d0c      	cmp	r5, #12
 8006b22:	bf38      	it	cc
 8006b24:	250c      	movcc	r5, #12
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	4606      	mov	r6, r0
 8006b2a:	db01      	blt.n	8006b30 <_malloc_r+0x1c>
 8006b2c:	42a9      	cmp	r1, r5
 8006b2e:	d904      	bls.n	8006b3a <_malloc_r+0x26>
 8006b30:	230c      	movs	r3, #12
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	2000      	movs	r0, #0
 8006b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c10 <_malloc_r+0xfc>
 8006b3e:	f000 f869 	bl	8006c14 <__malloc_lock>
 8006b42:	f8d8 3000 	ldr.w	r3, [r8]
 8006b46:	461c      	mov	r4, r3
 8006b48:	bb44      	cbnz	r4, 8006b9c <_malloc_r+0x88>
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ffbf 	bl	8006ad0 <sbrk_aligned>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	4604      	mov	r4, r0
 8006b56:	d158      	bne.n	8006c0a <_malloc_r+0xf6>
 8006b58:	f8d8 4000 	ldr.w	r4, [r8]
 8006b5c:	4627      	mov	r7, r4
 8006b5e:	2f00      	cmp	r7, #0
 8006b60:	d143      	bne.n	8006bea <_malloc_r+0xd6>
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	d04b      	beq.n	8006bfe <_malloc_r+0xea>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	eb04 0903 	add.w	r9, r4, r3
 8006b70:	f000 fd30 	bl	80075d4 <_sbrk_r>
 8006b74:	4581      	cmp	r9, r0
 8006b76:	d142      	bne.n	8006bfe <_malloc_r+0xea>
 8006b78:	6821      	ldr	r1, [r4, #0]
 8006b7a:	1a6d      	subs	r5, r5, r1
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ffa6 	bl	8006ad0 <sbrk_aligned>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d03a      	beq.n	8006bfe <_malloc_r+0xea>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	442b      	add	r3, r5
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	bb62      	cbnz	r2, 8006bf0 <_malloc_r+0xdc>
 8006b96:	f8c8 7000 	str.w	r7, [r8]
 8006b9a:	e00f      	b.n	8006bbc <_malloc_r+0xa8>
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	1b52      	subs	r2, r2, r5
 8006ba0:	d420      	bmi.n	8006be4 <_malloc_r+0xd0>
 8006ba2:	2a0b      	cmp	r2, #11
 8006ba4:	d917      	bls.n	8006bd6 <_malloc_r+0xc2>
 8006ba6:	1961      	adds	r1, r4, r5
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	6025      	str	r5, [r4, #0]
 8006bac:	bf18      	it	ne
 8006bae:	6059      	strne	r1, [r3, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	bf08      	it	eq
 8006bb4:	f8c8 1000 	streq.w	r1, [r8]
 8006bb8:	5162      	str	r2, [r4, r5]
 8006bba:	604b      	str	r3, [r1, #4]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 f82f 	bl	8006c20 <__malloc_unlock>
 8006bc2:	f104 000b 	add.w	r0, r4, #11
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	f020 0007 	bic.w	r0, r0, #7
 8006bcc:	1ac2      	subs	r2, r0, r3
 8006bce:	bf1c      	itt	ne
 8006bd0:	1a1b      	subne	r3, r3, r0
 8006bd2:	50a3      	strne	r3, [r4, r2]
 8006bd4:	e7af      	b.n	8006b36 <_malloc_r+0x22>
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	bf0c      	ite	eq
 8006bdc:	f8c8 2000 	streq.w	r2, [r8]
 8006be0:	605a      	strne	r2, [r3, #4]
 8006be2:	e7eb      	b.n	8006bbc <_malloc_r+0xa8>
 8006be4:	4623      	mov	r3, r4
 8006be6:	6864      	ldr	r4, [r4, #4]
 8006be8:	e7ae      	b.n	8006b48 <_malloc_r+0x34>
 8006bea:	463c      	mov	r4, r7
 8006bec:	687f      	ldr	r7, [r7, #4]
 8006bee:	e7b6      	b.n	8006b5e <_malloc_r+0x4a>
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d1fb      	bne.n	8006bf0 <_malloc_r+0xdc>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	6053      	str	r3, [r2, #4]
 8006bfc:	e7de      	b.n	8006bbc <_malloc_r+0xa8>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	4630      	mov	r0, r6
 8006c04:	f000 f80c 	bl	8006c20 <__malloc_unlock>
 8006c08:	e794      	b.n	8006b34 <_malloc_r+0x20>
 8006c0a:	6005      	str	r5, [r0, #0]
 8006c0c:	e7d6      	b.n	8006bbc <_malloc_r+0xa8>
 8006c0e:	bf00      	nop
 8006c10:	200043f4 	.word	0x200043f4

08006c14 <__malloc_lock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	@ (8006c1c <__malloc_lock+0x8>)
 8006c16:	f7ff bf00 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	200043ec 	.word	0x200043ec

08006c20 <__malloc_unlock>:
 8006c20:	4801      	ldr	r0, [pc, #4]	@ (8006c28 <__malloc_unlock+0x8>)
 8006c22:	f7ff befb 	b.w	8006a1c <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	200043ec 	.word	0x200043ec

08006c2c <__ssputs_r>:
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	688e      	ldr	r6, [r1, #8]
 8006c32:	461f      	mov	r7, r3
 8006c34:	42be      	cmp	r6, r7
 8006c36:	680b      	ldr	r3, [r1, #0]
 8006c38:	4682      	mov	sl, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	4690      	mov	r8, r2
 8006c3e:	d82d      	bhi.n	8006c9c <__ssputs_r+0x70>
 8006c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c48:	d026      	beq.n	8006c98 <__ssputs_r+0x6c>
 8006c4a:	6965      	ldr	r5, [r4, #20]
 8006c4c:	6909      	ldr	r1, [r1, #16]
 8006c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c52:	eba3 0901 	sub.w	r9, r3, r1
 8006c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c5a:	1c7b      	adds	r3, r7, #1
 8006c5c:	444b      	add	r3, r9
 8006c5e:	106d      	asrs	r5, r5, #1
 8006c60:	429d      	cmp	r5, r3
 8006c62:	bf38      	it	cc
 8006c64:	461d      	movcc	r5, r3
 8006c66:	0553      	lsls	r3, r2, #21
 8006c68:	d527      	bpl.n	8006cba <__ssputs_r+0x8e>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7ff ff52 	bl	8006b14 <_malloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	b360      	cbz	r0, 8006cce <__ssputs_r+0xa2>
 8006c74:	6921      	ldr	r1, [r4, #16]
 8006c76:	464a      	mov	r2, r9
 8006c78:	f7ff fed1 	bl	8006a1e <memcpy>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	6126      	str	r6, [r4, #16]
 8006c8a:	6165      	str	r5, [r4, #20]
 8006c8c:	444e      	add	r6, r9
 8006c8e:	eba5 0509 	sub.w	r5, r5, r9
 8006c92:	6026      	str	r6, [r4, #0]
 8006c94:	60a5      	str	r5, [r4, #8]
 8006c96:	463e      	mov	r6, r7
 8006c98:	42be      	cmp	r6, r7
 8006c9a:	d900      	bls.n	8006c9e <__ssputs_r+0x72>
 8006c9c:	463e      	mov	r6, r7
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	f000 fc7c 	bl	80075a0 <memmove>
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	1b9b      	subs	r3, r3, r6
 8006cac:	60a3      	str	r3, [r4, #8]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	4433      	add	r3, r6
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	462a      	mov	r2, r5
 8006cbc:	f000 fc9a 	bl	80075f4 <_realloc_r>
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d1e0      	bne.n	8006c88 <__ssputs_r+0x5c>
 8006cc6:	6921      	ldr	r1, [r4, #16]
 8006cc8:	4650      	mov	r0, sl
 8006cca:	f7ff feb7 	bl	8006a3c <_free_r>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	f8ca 3000 	str.w	r3, [sl]
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e7e9      	b.n	8006cb6 <__ssputs_r+0x8a>
	...

08006ce4 <_svfiprintf_r>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	4698      	mov	r8, r3
 8006cea:	898b      	ldrh	r3, [r1, #12]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	b09d      	sub	sp, #116	@ 0x74
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	d510      	bpl.n	8006d1a <_svfiprintf_r+0x36>
 8006cf8:	690b      	ldr	r3, [r1, #16]
 8006cfa:	b973      	cbnz	r3, 8006d1a <_svfiprintf_r+0x36>
 8006cfc:	2140      	movs	r1, #64	@ 0x40
 8006cfe:	f7ff ff09 	bl	8006b14 <_malloc_r>
 8006d02:	6028      	str	r0, [r5, #0]
 8006d04:	6128      	str	r0, [r5, #16]
 8006d06:	b930      	cbnz	r0, 8006d16 <_svfiprintf_r+0x32>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b01d      	add	sp, #116	@ 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	2340      	movs	r3, #64	@ 0x40
 8006d18:	616b      	str	r3, [r5, #20]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1e:	2320      	movs	r3, #32
 8006d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d28:	2330      	movs	r3, #48	@ 0x30
 8006d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ec8 <_svfiprintf_r+0x1e4>
 8006d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d32:	f04f 0901 	mov.w	r9, #1
 8006d36:	4623      	mov	r3, r4
 8006d38:	469a      	mov	sl, r3
 8006d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d3e:	b10a      	cbz	r2, 8006d44 <_svfiprintf_r+0x60>
 8006d40:	2a25      	cmp	r2, #37	@ 0x25
 8006d42:	d1f9      	bne.n	8006d38 <_svfiprintf_r+0x54>
 8006d44:	ebba 0b04 	subs.w	fp, sl, r4
 8006d48:	d00b      	beq.n	8006d62 <_svfiprintf_r+0x7e>
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	4638      	mov	r0, r7
 8006d52:	f7ff ff6b 	bl	8006c2c <__ssputs_r>
 8006d56:	3001      	adds	r0, #1
 8006d58:	f000 80a7 	beq.w	8006eaa <_svfiprintf_r+0x1c6>
 8006d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d5e:	445a      	add	r2, fp
 8006d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d62:	f89a 3000 	ldrb.w	r3, [sl]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 809f 	beq.w	8006eaa <_svfiprintf_r+0x1c6>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d76:	f10a 0a01 	add.w	sl, sl, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	9307      	str	r3, [sp, #28]
 8006d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d84:	4654      	mov	r4, sl
 8006d86:	2205      	movs	r2, #5
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	484e      	ldr	r0, [pc, #312]	@ (8006ec8 <_svfiprintf_r+0x1e4>)
 8006d8e:	f7f9 fa47 	bl	8000220 <memchr>
 8006d92:	9a04      	ldr	r2, [sp, #16]
 8006d94:	b9d8      	cbnz	r0, 8006dce <_svfiprintf_r+0xea>
 8006d96:	06d0      	lsls	r0, r2, #27
 8006d98:	bf44      	itt	mi
 8006d9a:	2320      	movmi	r3, #32
 8006d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006da0:	0711      	lsls	r1, r2, #28
 8006da2:	bf44      	itt	mi
 8006da4:	232b      	movmi	r3, #43	@ 0x2b
 8006da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006daa:	f89a 3000 	ldrb.w	r3, [sl]
 8006dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db0:	d015      	beq.n	8006dde <_svfiprintf_r+0xfa>
 8006db2:	9a07      	ldr	r2, [sp, #28]
 8006db4:	4654      	mov	r4, sl
 8006db6:	2000      	movs	r0, #0
 8006db8:	f04f 0c0a 	mov.w	ip, #10
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc2:	3b30      	subs	r3, #48	@ 0x30
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	d94b      	bls.n	8006e60 <_svfiprintf_r+0x17c>
 8006dc8:	b1b0      	cbz	r0, 8006df8 <_svfiprintf_r+0x114>
 8006dca:	9207      	str	r2, [sp, #28]
 8006dcc:	e014      	b.n	8006df8 <_svfiprintf_r+0x114>
 8006dce:	eba0 0308 	sub.w	r3, r0, r8
 8006dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	46a2      	mov	sl, r4
 8006ddc:	e7d2      	b.n	8006d84 <_svfiprintf_r+0xa0>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	1d19      	adds	r1, r3, #4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	9103      	str	r1, [sp, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfbb      	ittet	lt
 8006dea:	425b      	neglt	r3, r3
 8006dec:	f042 0202 	orrlt.w	r2, r2, #2
 8006df0:	9307      	strge	r3, [sp, #28]
 8006df2:	9307      	strlt	r3, [sp, #28]
 8006df4:	bfb8      	it	lt
 8006df6:	9204      	strlt	r2, [sp, #16]
 8006df8:	7823      	ldrb	r3, [r4, #0]
 8006dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dfc:	d10a      	bne.n	8006e14 <_svfiprintf_r+0x130>
 8006dfe:	7863      	ldrb	r3, [r4, #1]
 8006e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e02:	d132      	bne.n	8006e6a <_svfiprintf_r+0x186>
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	9203      	str	r2, [sp, #12]
 8006e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e10:	3402      	adds	r4, #2
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ed8 <_svfiprintf_r+0x1f4>
 8006e18:	7821      	ldrb	r1, [r4, #0]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f7f9 f9ff 	bl	8000220 <memchr>
 8006e22:	b138      	cbz	r0, 8006e34 <_svfiprintf_r+0x150>
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	eba0 000a 	sub.w	r0, r0, sl
 8006e2a:	2240      	movs	r2, #64	@ 0x40
 8006e2c:	4082      	lsls	r2, r0
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	3401      	adds	r4, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e38:	4824      	ldr	r0, [pc, #144]	@ (8006ecc <_svfiprintf_r+0x1e8>)
 8006e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e3e:	2206      	movs	r2, #6
 8006e40:	f7f9 f9ee 	bl	8000220 <memchr>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d036      	beq.n	8006eb6 <_svfiprintf_r+0x1d2>
 8006e48:	4b21      	ldr	r3, [pc, #132]	@ (8006ed0 <_svfiprintf_r+0x1ec>)
 8006e4a:	bb1b      	cbnz	r3, 8006e94 <_svfiprintf_r+0x1b0>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	3307      	adds	r3, #7
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	3308      	adds	r3, #8
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5a:	4433      	add	r3, r6
 8006e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e5e:	e76a      	b.n	8006d36 <_svfiprintf_r+0x52>
 8006e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e64:	460c      	mov	r4, r1
 8006e66:	2001      	movs	r0, #1
 8006e68:	e7a8      	b.n	8006dbc <_svfiprintf_r+0xd8>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f04f 0c0a 	mov.w	ip, #10
 8006e76:	4620      	mov	r0, r4
 8006e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7c:	3a30      	subs	r2, #48	@ 0x30
 8006e7e:	2a09      	cmp	r2, #9
 8006e80:	d903      	bls.n	8006e8a <_svfiprintf_r+0x1a6>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0c6      	beq.n	8006e14 <_svfiprintf_r+0x130>
 8006e86:	9105      	str	r1, [sp, #20]
 8006e88:	e7c4      	b.n	8006e14 <_svfiprintf_r+0x130>
 8006e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e8e:	4604      	mov	r4, r0
 8006e90:	2301      	movs	r3, #1
 8006e92:	e7f0      	b.n	8006e76 <_svfiprintf_r+0x192>
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <_svfiprintf_r+0x1f0>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f3af 8000 	nop.w
 8006ea4:	1c42      	adds	r2, r0, #1
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	d1d6      	bne.n	8006e58 <_svfiprintf_r+0x174>
 8006eaa:	89ab      	ldrh	r3, [r5, #12]
 8006eac:	065b      	lsls	r3, r3, #25
 8006eae:	f53f af2d 	bmi.w	8006d0c <_svfiprintf_r+0x28>
 8006eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eb4:	e72c      	b.n	8006d10 <_svfiprintf_r+0x2c>
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <_svfiprintf_r+0x1f0>)
 8006ebe:	a904      	add	r1, sp, #16
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f000 f9bb 	bl	800723c <_printf_i>
 8006ec6:	e7ed      	b.n	8006ea4 <_svfiprintf_r+0x1c0>
 8006ec8:	0800794e 	.word	0x0800794e
 8006ecc:	08007958 	.word	0x08007958
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	08006c2d 	.word	0x08006c2d
 8006ed8:	08007954 	.word	0x08007954

08006edc <__sfputc_r>:
 8006edc:	6893      	ldr	r3, [r2, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	b410      	push	{r4}
 8006ee4:	6093      	str	r3, [r2, #8]
 8006ee6:	da08      	bge.n	8006efa <__sfputc_r+0x1e>
 8006ee8:	6994      	ldr	r4, [r2, #24]
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	db01      	blt.n	8006ef2 <__sfputc_r+0x16>
 8006eee:	290a      	cmp	r1, #10
 8006ef0:	d103      	bne.n	8006efa <__sfputc_r+0x1e>
 8006ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef6:	f000 babf 	b.w	8007478 <__swbuf_r>
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	1c58      	adds	r0, r3, #1
 8006efe:	6010      	str	r0, [r2, #0]
 8006f00:	7019      	strb	r1, [r3, #0]
 8006f02:	4608      	mov	r0, r1
 8006f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <__sfputs_r>:
 8006f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	460f      	mov	r7, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	18d5      	adds	r5, r2, r3
 8006f14:	42ac      	cmp	r4, r5
 8006f16:	d101      	bne.n	8006f1c <__sfputs_r+0x12>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e007      	b.n	8006f2c <__sfputs_r+0x22>
 8006f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f20:	463a      	mov	r2, r7
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff ffda 	bl	8006edc <__sfputc_r>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d1f3      	bne.n	8006f14 <__sfputs_r+0xa>
 8006f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f30 <_vfiprintf_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	460d      	mov	r5, r1
 8006f36:	b09d      	sub	sp, #116	@ 0x74
 8006f38:	4614      	mov	r4, r2
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	b118      	cbz	r0, 8006f48 <_vfiprintf_r+0x18>
 8006f40:	6a03      	ldr	r3, [r0, #32]
 8006f42:	b90b      	cbnz	r3, 8006f48 <_vfiprintf_r+0x18>
 8006f44:	f7ff fc2e 	bl	80067a4 <__sinit>
 8006f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f4a:	07d9      	lsls	r1, r3, #31
 8006f4c:	d405      	bmi.n	8006f5a <_vfiprintf_r+0x2a>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	059a      	lsls	r2, r3, #22
 8006f52:	d402      	bmi.n	8006f5a <_vfiprintf_r+0x2a>
 8006f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f56:	f7ff fd60 	bl	8006a1a <__retarget_lock_acquire_recursive>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	071b      	lsls	r3, r3, #28
 8006f5e:	d501      	bpl.n	8006f64 <_vfiprintf_r+0x34>
 8006f60:	692b      	ldr	r3, [r5, #16]
 8006f62:	b99b      	cbnz	r3, 8006f8c <_vfiprintf_r+0x5c>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 fac4 	bl	80074f4 <__swsetup_r>
 8006f6c:	b170      	cbz	r0, 8006f8c <_vfiprintf_r+0x5c>
 8006f6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f70:	07dc      	lsls	r4, r3, #31
 8006f72:	d504      	bpl.n	8006f7e <_vfiprintf_r+0x4e>
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295
 8006f78:	b01d      	add	sp, #116	@ 0x74
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	0598      	lsls	r0, r3, #22
 8006f82:	d4f7      	bmi.n	8006f74 <_vfiprintf_r+0x44>
 8006f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f86:	f7ff fd49 	bl	8006a1c <__retarget_lock_release_recursive>
 8006f8a:	e7f3      	b.n	8006f74 <_vfiprintf_r+0x44>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f90:	2320      	movs	r3, #32
 8006f92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f9a:	2330      	movs	r3, #48	@ 0x30
 8006f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800714c <_vfiprintf_r+0x21c>
 8006fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fa4:	f04f 0901 	mov.w	r9, #1
 8006fa8:	4623      	mov	r3, r4
 8006faa:	469a      	mov	sl, r3
 8006fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb0:	b10a      	cbz	r2, 8006fb6 <_vfiprintf_r+0x86>
 8006fb2:	2a25      	cmp	r2, #37	@ 0x25
 8006fb4:	d1f9      	bne.n	8006faa <_vfiprintf_r+0x7a>
 8006fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fba:	d00b      	beq.n	8006fd4 <_vfiprintf_r+0xa4>
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7ff ffa1 	bl	8006f0a <__sfputs_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f000 80a7 	beq.w	800711c <_vfiprintf_r+0x1ec>
 8006fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd0:	445a      	add	r2, fp
 8006fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 809f 	beq.w	800711c <_vfiprintf_r+0x1ec>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe8:	f10a 0a01 	add.w	sl, sl, #1
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ff4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ff6:	4654      	mov	r4, sl
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffe:	4853      	ldr	r0, [pc, #332]	@ (800714c <_vfiprintf_r+0x21c>)
 8007000:	f7f9 f90e 	bl	8000220 <memchr>
 8007004:	9a04      	ldr	r2, [sp, #16]
 8007006:	b9d8      	cbnz	r0, 8007040 <_vfiprintf_r+0x110>
 8007008:	06d1      	lsls	r1, r2, #27
 800700a:	bf44      	itt	mi
 800700c:	2320      	movmi	r3, #32
 800700e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007012:	0713      	lsls	r3, r2, #28
 8007014:	bf44      	itt	mi
 8007016:	232b      	movmi	r3, #43	@ 0x2b
 8007018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800701c:	f89a 3000 	ldrb.w	r3, [sl]
 8007020:	2b2a      	cmp	r3, #42	@ 0x2a
 8007022:	d015      	beq.n	8007050 <_vfiprintf_r+0x120>
 8007024:	9a07      	ldr	r2, [sp, #28]
 8007026:	4654      	mov	r4, sl
 8007028:	2000      	movs	r0, #0
 800702a:	f04f 0c0a 	mov.w	ip, #10
 800702e:	4621      	mov	r1, r4
 8007030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007034:	3b30      	subs	r3, #48	@ 0x30
 8007036:	2b09      	cmp	r3, #9
 8007038:	d94b      	bls.n	80070d2 <_vfiprintf_r+0x1a2>
 800703a:	b1b0      	cbz	r0, 800706a <_vfiprintf_r+0x13a>
 800703c:	9207      	str	r2, [sp, #28]
 800703e:	e014      	b.n	800706a <_vfiprintf_r+0x13a>
 8007040:	eba0 0308 	sub.w	r3, r0, r8
 8007044:	fa09 f303 	lsl.w	r3, r9, r3
 8007048:	4313      	orrs	r3, r2
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	46a2      	mov	sl, r4
 800704e:	e7d2      	b.n	8006ff6 <_vfiprintf_r+0xc6>
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	1d19      	adds	r1, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	9103      	str	r1, [sp, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfbb      	ittet	lt
 800705c:	425b      	neglt	r3, r3
 800705e:	f042 0202 	orrlt.w	r2, r2, #2
 8007062:	9307      	strge	r3, [sp, #28]
 8007064:	9307      	strlt	r3, [sp, #28]
 8007066:	bfb8      	it	lt
 8007068:	9204      	strlt	r2, [sp, #16]
 800706a:	7823      	ldrb	r3, [r4, #0]
 800706c:	2b2e      	cmp	r3, #46	@ 0x2e
 800706e:	d10a      	bne.n	8007086 <_vfiprintf_r+0x156>
 8007070:	7863      	ldrb	r3, [r4, #1]
 8007072:	2b2a      	cmp	r3, #42	@ 0x2a
 8007074:	d132      	bne.n	80070dc <_vfiprintf_r+0x1ac>
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	1d1a      	adds	r2, r3, #4
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	9203      	str	r2, [sp, #12]
 800707e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007082:	3402      	adds	r4, #2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800715c <_vfiprintf_r+0x22c>
 800708a:	7821      	ldrb	r1, [r4, #0]
 800708c:	2203      	movs	r2, #3
 800708e:	4650      	mov	r0, sl
 8007090:	f7f9 f8c6 	bl	8000220 <memchr>
 8007094:	b138      	cbz	r0, 80070a6 <_vfiprintf_r+0x176>
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	eba0 000a 	sub.w	r0, r0, sl
 800709c:	2240      	movs	r2, #64	@ 0x40
 800709e:	4082      	lsls	r2, r0
 80070a0:	4313      	orrs	r3, r2
 80070a2:	3401      	adds	r4, #1
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070aa:	4829      	ldr	r0, [pc, #164]	@ (8007150 <_vfiprintf_r+0x220>)
 80070ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070b0:	2206      	movs	r2, #6
 80070b2:	f7f9 f8b5 	bl	8000220 <memchr>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d03f      	beq.n	800713a <_vfiprintf_r+0x20a>
 80070ba:	4b26      	ldr	r3, [pc, #152]	@ (8007154 <_vfiprintf_r+0x224>)
 80070bc:	bb1b      	cbnz	r3, 8007106 <_vfiprintf_r+0x1d6>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	3307      	adds	r3, #7
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	3308      	adds	r3, #8
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070cc:	443b      	add	r3, r7
 80070ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d0:	e76a      	b.n	8006fa8 <_vfiprintf_r+0x78>
 80070d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d6:	460c      	mov	r4, r1
 80070d8:	2001      	movs	r0, #1
 80070da:	e7a8      	b.n	800702e <_vfiprintf_r+0xfe>
 80070dc:	2300      	movs	r3, #0
 80070de:	3401      	adds	r4, #1
 80070e0:	9305      	str	r3, [sp, #20]
 80070e2:	4619      	mov	r1, r3
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	4620      	mov	r0, r4
 80070ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ee:	3a30      	subs	r2, #48	@ 0x30
 80070f0:	2a09      	cmp	r2, #9
 80070f2:	d903      	bls.n	80070fc <_vfiprintf_r+0x1cc>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0c6      	beq.n	8007086 <_vfiprintf_r+0x156>
 80070f8:	9105      	str	r1, [sp, #20]
 80070fa:	e7c4      	b.n	8007086 <_vfiprintf_r+0x156>
 80070fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007100:	4604      	mov	r4, r0
 8007102:	2301      	movs	r3, #1
 8007104:	e7f0      	b.n	80070e8 <_vfiprintf_r+0x1b8>
 8007106:	ab03      	add	r3, sp, #12
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	462a      	mov	r2, r5
 800710c:	4b12      	ldr	r3, [pc, #72]	@ (8007158 <_vfiprintf_r+0x228>)
 800710e:	a904      	add	r1, sp, #16
 8007110:	4630      	mov	r0, r6
 8007112:	f3af 8000 	nop.w
 8007116:	4607      	mov	r7, r0
 8007118:	1c78      	adds	r0, r7, #1
 800711a:	d1d6      	bne.n	80070ca <_vfiprintf_r+0x19a>
 800711c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	d405      	bmi.n	800712e <_vfiprintf_r+0x1fe>
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d402      	bmi.n	800712e <_vfiprintf_r+0x1fe>
 8007128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800712a:	f7ff fc77 	bl	8006a1c <__retarget_lock_release_recursive>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	065b      	lsls	r3, r3, #25
 8007132:	f53f af1f 	bmi.w	8006f74 <_vfiprintf_r+0x44>
 8007136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007138:	e71e      	b.n	8006f78 <_vfiprintf_r+0x48>
 800713a:	ab03      	add	r3, sp, #12
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	462a      	mov	r2, r5
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <_vfiprintf_r+0x228>)
 8007142:	a904      	add	r1, sp, #16
 8007144:	4630      	mov	r0, r6
 8007146:	f000 f879 	bl	800723c <_printf_i>
 800714a:	e7e4      	b.n	8007116 <_vfiprintf_r+0x1e6>
 800714c:	0800794e 	.word	0x0800794e
 8007150:	08007958 	.word	0x08007958
 8007154:	00000000 	.word	0x00000000
 8007158:	08006f0b 	.word	0x08006f0b
 800715c:	08007954 	.word	0x08007954

08007160 <_printf_common>:
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007164:	4616      	mov	r6, r2
 8007166:	4698      	mov	r8, r3
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	690b      	ldr	r3, [r1, #16]
 800716c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007170:	4293      	cmp	r3, r2
 8007172:	bfb8      	it	lt
 8007174:	4613      	movlt	r3, r2
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800717c:	4607      	mov	r7, r0
 800717e:	460c      	mov	r4, r1
 8007180:	b10a      	cbz	r2, 8007186 <_printf_common+0x26>
 8007182:	3301      	adds	r3, #1
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	0699      	lsls	r1, r3, #26
 800718a:	bf42      	ittt	mi
 800718c:	6833      	ldrmi	r3, [r6, #0]
 800718e:	3302      	addmi	r3, #2
 8007190:	6033      	strmi	r3, [r6, #0]
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	f015 0506 	ands.w	r5, r5, #6
 8007198:	d106      	bne.n	80071a8 <_printf_common+0x48>
 800719a:	f104 0a19 	add.w	sl, r4, #25
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	6832      	ldr	r2, [r6, #0]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dc26      	bgt.n	80071f6 <_printf_common+0x96>
 80071a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	3b00      	subs	r3, #0
 80071b0:	bf18      	it	ne
 80071b2:	2301      	movne	r3, #1
 80071b4:	0692      	lsls	r2, r2, #26
 80071b6:	d42b      	bmi.n	8007210 <_printf_common+0xb0>
 80071b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071bc:	4641      	mov	r1, r8
 80071be:	4638      	mov	r0, r7
 80071c0:	47c8      	blx	r9
 80071c2:	3001      	adds	r0, #1
 80071c4:	d01e      	beq.n	8007204 <_printf_common+0xa4>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	f003 0306 	and.w	r3, r3, #6
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf02      	ittt	eq
 80071d2:	68e5      	ldreq	r5, [r4, #12]
 80071d4:	6833      	ldreq	r3, [r6, #0]
 80071d6:	1aed      	subeq	r5, r5, r3
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	bf0c      	ite	eq
 80071dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071e0:	2500      	movne	r5, #0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	bfc4      	itt	gt
 80071e6:	1a9b      	subgt	r3, r3, r2
 80071e8:	18ed      	addgt	r5, r5, r3
 80071ea:	2600      	movs	r6, #0
 80071ec:	341a      	adds	r4, #26
 80071ee:	42b5      	cmp	r5, r6
 80071f0:	d11a      	bne.n	8007228 <_printf_common+0xc8>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e008      	b.n	8007208 <_printf_common+0xa8>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4641      	mov	r1, r8
 80071fc:	4638      	mov	r0, r7
 80071fe:	47c8      	blx	r9
 8007200:	3001      	adds	r0, #1
 8007202:	d103      	bne.n	800720c <_printf_common+0xac>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720c:	3501      	adds	r5, #1
 800720e:	e7c6      	b.n	800719e <_printf_common+0x3e>
 8007210:	18e1      	adds	r1, r4, r3
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	2030      	movs	r0, #48	@ 0x30
 8007216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800721a:	4422      	add	r2, r4
 800721c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007220:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007224:	3302      	adds	r3, #2
 8007226:	e7c7      	b.n	80071b8 <_printf_common+0x58>
 8007228:	2301      	movs	r3, #1
 800722a:	4622      	mov	r2, r4
 800722c:	4641      	mov	r1, r8
 800722e:	4638      	mov	r0, r7
 8007230:	47c8      	blx	r9
 8007232:	3001      	adds	r0, #1
 8007234:	d0e6      	beq.n	8007204 <_printf_common+0xa4>
 8007236:	3601      	adds	r6, #1
 8007238:	e7d9      	b.n	80071ee <_printf_common+0x8e>
	...

0800723c <_printf_i>:
 800723c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	7e0f      	ldrb	r7, [r1, #24]
 8007242:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007244:	2f78      	cmp	r7, #120	@ 0x78
 8007246:	4691      	mov	r9, r2
 8007248:	4680      	mov	r8, r0
 800724a:	460c      	mov	r4, r1
 800724c:	469a      	mov	sl, r3
 800724e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007252:	d807      	bhi.n	8007264 <_printf_i+0x28>
 8007254:	2f62      	cmp	r7, #98	@ 0x62
 8007256:	d80a      	bhi.n	800726e <_printf_i+0x32>
 8007258:	2f00      	cmp	r7, #0
 800725a:	f000 80d1 	beq.w	8007400 <_printf_i+0x1c4>
 800725e:	2f58      	cmp	r7, #88	@ 0x58
 8007260:	f000 80b8 	beq.w	80073d4 <_printf_i+0x198>
 8007264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800726c:	e03a      	b.n	80072e4 <_printf_i+0xa8>
 800726e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007272:	2b15      	cmp	r3, #21
 8007274:	d8f6      	bhi.n	8007264 <_printf_i+0x28>
 8007276:	a101      	add	r1, pc, #4	@ (adr r1, 800727c <_printf_i+0x40>)
 8007278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072e9 	.word	0x080072e9
 8007284:	08007265 	.word	0x08007265
 8007288:	08007265 	.word	0x08007265
 800728c:	08007265 	.word	0x08007265
 8007290:	08007265 	.word	0x08007265
 8007294:	080072e9 	.word	0x080072e9
 8007298:	08007265 	.word	0x08007265
 800729c:	08007265 	.word	0x08007265
 80072a0:	08007265 	.word	0x08007265
 80072a4:	08007265 	.word	0x08007265
 80072a8:	080073e7 	.word	0x080073e7
 80072ac:	08007313 	.word	0x08007313
 80072b0:	080073a1 	.word	0x080073a1
 80072b4:	08007265 	.word	0x08007265
 80072b8:	08007265 	.word	0x08007265
 80072bc:	08007409 	.word	0x08007409
 80072c0:	08007265 	.word	0x08007265
 80072c4:	08007313 	.word	0x08007313
 80072c8:	08007265 	.word	0x08007265
 80072cc:	08007265 	.word	0x08007265
 80072d0:	080073a9 	.word	0x080073a9
 80072d4:	6833      	ldr	r3, [r6, #0]
 80072d6:	1d1a      	adds	r2, r3, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6032      	str	r2, [r6, #0]
 80072dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072e4:	2301      	movs	r3, #1
 80072e6:	e09c      	b.n	8007422 <_printf_i+0x1e6>
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	6031      	str	r1, [r6, #0]
 80072f0:	0606      	lsls	r6, r0, #24
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0xbc>
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	e003      	b.n	8007300 <_printf_i+0xc4>
 80072f8:	0645      	lsls	r5, r0, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0xb8>
 80072fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007300:	2d00      	cmp	r5, #0
 8007302:	da03      	bge.n	800730c <_printf_i+0xd0>
 8007304:	232d      	movs	r3, #45	@ 0x2d
 8007306:	426d      	negs	r5, r5
 8007308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800730c:	4858      	ldr	r0, [pc, #352]	@ (8007470 <_printf_i+0x234>)
 800730e:	230a      	movs	r3, #10
 8007310:	e011      	b.n	8007336 <_printf_i+0xfa>
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	0608      	lsls	r0, r1, #24
 8007318:	f853 5b04 	ldr.w	r5, [r3], #4
 800731c:	d402      	bmi.n	8007324 <_printf_i+0xe8>
 800731e:	0649      	lsls	r1, r1, #25
 8007320:	bf48      	it	mi
 8007322:	b2ad      	uxthmi	r5, r5
 8007324:	2f6f      	cmp	r7, #111	@ 0x6f
 8007326:	4852      	ldr	r0, [pc, #328]	@ (8007470 <_printf_i+0x234>)
 8007328:	6033      	str	r3, [r6, #0]
 800732a:	bf14      	ite	ne
 800732c:	230a      	movne	r3, #10
 800732e:	2308      	moveq	r3, #8
 8007330:	2100      	movs	r1, #0
 8007332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007336:	6866      	ldr	r6, [r4, #4]
 8007338:	60a6      	str	r6, [r4, #8]
 800733a:	2e00      	cmp	r6, #0
 800733c:	db05      	blt.n	800734a <_printf_i+0x10e>
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	432e      	orrs	r6, r5
 8007342:	f021 0104 	bic.w	r1, r1, #4
 8007346:	6021      	str	r1, [r4, #0]
 8007348:	d04b      	beq.n	80073e2 <_printf_i+0x1a6>
 800734a:	4616      	mov	r6, r2
 800734c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007350:	fb03 5711 	mls	r7, r3, r1, r5
 8007354:	5dc7      	ldrb	r7, [r0, r7]
 8007356:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800735a:	462f      	mov	r7, r5
 800735c:	42bb      	cmp	r3, r7
 800735e:	460d      	mov	r5, r1
 8007360:	d9f4      	bls.n	800734c <_printf_i+0x110>
 8007362:	2b08      	cmp	r3, #8
 8007364:	d10b      	bne.n	800737e <_printf_i+0x142>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	07df      	lsls	r7, r3, #31
 800736a:	d508      	bpl.n	800737e <_printf_i+0x142>
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	6861      	ldr	r1, [r4, #4]
 8007370:	4299      	cmp	r1, r3
 8007372:	bfde      	ittt	le
 8007374:	2330      	movle	r3, #48	@ 0x30
 8007376:	f806 3c01 	strble.w	r3, [r6, #-1]
 800737a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800737e:	1b92      	subs	r2, r2, r6
 8007380:	6122      	str	r2, [r4, #16]
 8007382:	f8cd a000 	str.w	sl, [sp]
 8007386:	464b      	mov	r3, r9
 8007388:	aa03      	add	r2, sp, #12
 800738a:	4621      	mov	r1, r4
 800738c:	4640      	mov	r0, r8
 800738e:	f7ff fee7 	bl	8007160 <_printf_common>
 8007392:	3001      	adds	r0, #1
 8007394:	d14a      	bne.n	800742c <_printf_i+0x1f0>
 8007396:	f04f 30ff 	mov.w	r0, #4294967295
 800739a:	b004      	add	sp, #16
 800739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	f043 0320 	orr.w	r3, r3, #32
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	4832      	ldr	r0, [pc, #200]	@ (8007474 <_printf_i+0x238>)
 80073aa:	2778      	movs	r7, #120	@ 0x78
 80073ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	6831      	ldr	r1, [r6, #0]
 80073b4:	061f      	lsls	r7, r3, #24
 80073b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80073ba:	d402      	bmi.n	80073c2 <_printf_i+0x186>
 80073bc:	065f      	lsls	r7, r3, #25
 80073be:	bf48      	it	mi
 80073c0:	b2ad      	uxthmi	r5, r5
 80073c2:	6031      	str	r1, [r6, #0]
 80073c4:	07d9      	lsls	r1, r3, #31
 80073c6:	bf44      	itt	mi
 80073c8:	f043 0320 	orrmi.w	r3, r3, #32
 80073cc:	6023      	strmi	r3, [r4, #0]
 80073ce:	b11d      	cbz	r5, 80073d8 <_printf_i+0x19c>
 80073d0:	2310      	movs	r3, #16
 80073d2:	e7ad      	b.n	8007330 <_printf_i+0xf4>
 80073d4:	4826      	ldr	r0, [pc, #152]	@ (8007470 <_printf_i+0x234>)
 80073d6:	e7e9      	b.n	80073ac <_printf_i+0x170>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	f023 0320 	bic.w	r3, r3, #32
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	e7f6      	b.n	80073d0 <_printf_i+0x194>
 80073e2:	4616      	mov	r6, r2
 80073e4:	e7bd      	b.n	8007362 <_printf_i+0x126>
 80073e6:	6833      	ldr	r3, [r6, #0]
 80073e8:	6825      	ldr	r5, [r4, #0]
 80073ea:	6961      	ldr	r1, [r4, #20]
 80073ec:	1d18      	adds	r0, r3, #4
 80073ee:	6030      	str	r0, [r6, #0]
 80073f0:	062e      	lsls	r6, r5, #24
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	d501      	bpl.n	80073fa <_printf_i+0x1be>
 80073f6:	6019      	str	r1, [r3, #0]
 80073f8:	e002      	b.n	8007400 <_printf_i+0x1c4>
 80073fa:	0668      	lsls	r0, r5, #25
 80073fc:	d5fb      	bpl.n	80073f6 <_printf_i+0x1ba>
 80073fe:	8019      	strh	r1, [r3, #0]
 8007400:	2300      	movs	r3, #0
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	4616      	mov	r6, r2
 8007406:	e7bc      	b.n	8007382 <_printf_i+0x146>
 8007408:	6833      	ldr	r3, [r6, #0]
 800740a:	1d1a      	adds	r2, r3, #4
 800740c:	6032      	str	r2, [r6, #0]
 800740e:	681e      	ldr	r6, [r3, #0]
 8007410:	6862      	ldr	r2, [r4, #4]
 8007412:	2100      	movs	r1, #0
 8007414:	4630      	mov	r0, r6
 8007416:	f7f8 ff03 	bl	8000220 <memchr>
 800741a:	b108      	cbz	r0, 8007420 <_printf_i+0x1e4>
 800741c:	1b80      	subs	r0, r0, r6
 800741e:	6060      	str	r0, [r4, #4]
 8007420:	6863      	ldr	r3, [r4, #4]
 8007422:	6123      	str	r3, [r4, #16]
 8007424:	2300      	movs	r3, #0
 8007426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800742a:	e7aa      	b.n	8007382 <_printf_i+0x146>
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	4632      	mov	r2, r6
 8007430:	4649      	mov	r1, r9
 8007432:	4640      	mov	r0, r8
 8007434:	47d0      	blx	sl
 8007436:	3001      	adds	r0, #1
 8007438:	d0ad      	beq.n	8007396 <_printf_i+0x15a>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	079b      	lsls	r3, r3, #30
 800743e:	d413      	bmi.n	8007468 <_printf_i+0x22c>
 8007440:	68e0      	ldr	r0, [r4, #12]
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	4298      	cmp	r0, r3
 8007446:	bfb8      	it	lt
 8007448:	4618      	movlt	r0, r3
 800744a:	e7a6      	b.n	800739a <_printf_i+0x15e>
 800744c:	2301      	movs	r3, #1
 800744e:	4632      	mov	r2, r6
 8007450:	4649      	mov	r1, r9
 8007452:	4640      	mov	r0, r8
 8007454:	47d0      	blx	sl
 8007456:	3001      	adds	r0, #1
 8007458:	d09d      	beq.n	8007396 <_printf_i+0x15a>
 800745a:	3501      	adds	r5, #1
 800745c:	68e3      	ldr	r3, [r4, #12]
 800745e:	9903      	ldr	r1, [sp, #12]
 8007460:	1a5b      	subs	r3, r3, r1
 8007462:	42ab      	cmp	r3, r5
 8007464:	dcf2      	bgt.n	800744c <_printf_i+0x210>
 8007466:	e7eb      	b.n	8007440 <_printf_i+0x204>
 8007468:	2500      	movs	r5, #0
 800746a:	f104 0619 	add.w	r6, r4, #25
 800746e:	e7f5      	b.n	800745c <_printf_i+0x220>
 8007470:	0800795f 	.word	0x0800795f
 8007474:	08007970 	.word	0x08007970

08007478 <__swbuf_r>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	460e      	mov	r6, r1
 800747c:	4614      	mov	r4, r2
 800747e:	4605      	mov	r5, r0
 8007480:	b118      	cbz	r0, 800748a <__swbuf_r+0x12>
 8007482:	6a03      	ldr	r3, [r0, #32]
 8007484:	b90b      	cbnz	r3, 800748a <__swbuf_r+0x12>
 8007486:	f7ff f98d 	bl	80067a4 <__sinit>
 800748a:	69a3      	ldr	r3, [r4, #24]
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	071a      	lsls	r2, r3, #28
 8007492:	d501      	bpl.n	8007498 <__swbuf_r+0x20>
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b943      	cbnz	r3, 80074aa <__swbuf_r+0x32>
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 f82a 	bl	80074f4 <__swsetup_r>
 80074a0:	b118      	cbz	r0, 80074aa <__swbuf_r+0x32>
 80074a2:	f04f 37ff 	mov.w	r7, #4294967295
 80074a6:	4638      	mov	r0, r7
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	1a98      	subs	r0, r3, r2
 80074b0:	6963      	ldr	r3, [r4, #20]
 80074b2:	b2f6      	uxtb	r6, r6
 80074b4:	4283      	cmp	r3, r0
 80074b6:	4637      	mov	r7, r6
 80074b8:	dc05      	bgt.n	80074c6 <__swbuf_r+0x4e>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4628      	mov	r0, r5
 80074be:	f7ff f8a9 	bl	8006614 <_fflush_r>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d1ed      	bne.n	80074a2 <__swbuf_r+0x2a>
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	60a3      	str	r3, [r4, #8]
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	701e      	strb	r6, [r3, #0]
 80074d4:	6962      	ldr	r2, [r4, #20]
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	429a      	cmp	r2, r3
 80074da:	d004      	beq.n	80074e6 <__swbuf_r+0x6e>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	07db      	lsls	r3, r3, #31
 80074e0:	d5e1      	bpl.n	80074a6 <__swbuf_r+0x2e>
 80074e2:	2e0a      	cmp	r6, #10
 80074e4:	d1df      	bne.n	80074a6 <__swbuf_r+0x2e>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7ff f893 	bl	8006614 <_fflush_r>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d0d9      	beq.n	80074a6 <__swbuf_r+0x2e>
 80074f2:	e7d6      	b.n	80074a2 <__swbuf_r+0x2a>

080074f4 <__swsetup_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4b29      	ldr	r3, [pc, #164]	@ (800759c <__swsetup_r+0xa8>)
 80074f8:	4605      	mov	r5, r0
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	460c      	mov	r4, r1
 80074fe:	b118      	cbz	r0, 8007508 <__swsetup_r+0x14>
 8007500:	6a03      	ldr	r3, [r0, #32]
 8007502:	b90b      	cbnz	r3, 8007508 <__swsetup_r+0x14>
 8007504:	f7ff f94e 	bl	80067a4 <__sinit>
 8007508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750c:	0719      	lsls	r1, r3, #28
 800750e:	d422      	bmi.n	8007556 <__swsetup_r+0x62>
 8007510:	06da      	lsls	r2, r3, #27
 8007512:	d407      	bmi.n	8007524 <__swsetup_r+0x30>
 8007514:	2209      	movs	r2, #9
 8007516:	602a      	str	r2, [r5, #0]
 8007518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	e033      	b.n	800758c <__swsetup_r+0x98>
 8007524:	0758      	lsls	r0, r3, #29
 8007526:	d512      	bpl.n	800754e <__swsetup_r+0x5a>
 8007528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800752a:	b141      	cbz	r1, 800753e <__swsetup_r+0x4a>
 800752c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007530:	4299      	cmp	r1, r3
 8007532:	d002      	beq.n	800753a <__swsetup_r+0x46>
 8007534:	4628      	mov	r0, r5
 8007536:	f7ff fa81 	bl	8006a3c <_free_r>
 800753a:	2300      	movs	r3, #0
 800753c:	6363      	str	r3, [r4, #52]	@ 0x34
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	2300      	movs	r3, #0
 8007548:	6063      	str	r3, [r4, #4]
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f043 0308 	orr.w	r3, r3, #8
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	b94b      	cbnz	r3, 800756e <__swsetup_r+0x7a>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d003      	beq.n	800756e <__swsetup_r+0x7a>
 8007566:	4621      	mov	r1, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 f897 	bl	800769c <__smakebuf_r>
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	f013 0201 	ands.w	r2, r3, #1
 8007576:	d00a      	beq.n	800758e <__swsetup_r+0x9a>
 8007578:	2200      	movs	r2, #0
 800757a:	60a2      	str	r2, [r4, #8]
 800757c:	6962      	ldr	r2, [r4, #20]
 800757e:	4252      	negs	r2, r2
 8007580:	61a2      	str	r2, [r4, #24]
 8007582:	6922      	ldr	r2, [r4, #16]
 8007584:	b942      	cbnz	r2, 8007598 <__swsetup_r+0xa4>
 8007586:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800758a:	d1c5      	bne.n	8007518 <__swsetup_r+0x24>
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	0799      	lsls	r1, r3, #30
 8007590:	bf58      	it	pl
 8007592:	6962      	ldrpl	r2, [r4, #20]
 8007594:	60a2      	str	r2, [r4, #8]
 8007596:	e7f4      	b.n	8007582 <__swsetup_r+0x8e>
 8007598:	2000      	movs	r0, #0
 800759a:	e7f7      	b.n	800758c <__swsetup_r+0x98>
 800759c:	20000088 	.word	0x20000088

080075a0 <memmove>:
 80075a0:	4288      	cmp	r0, r1
 80075a2:	b510      	push	{r4, lr}
 80075a4:	eb01 0402 	add.w	r4, r1, r2
 80075a8:	d902      	bls.n	80075b0 <memmove+0x10>
 80075aa:	4284      	cmp	r4, r0
 80075ac:	4623      	mov	r3, r4
 80075ae:	d807      	bhi.n	80075c0 <memmove+0x20>
 80075b0:	1e43      	subs	r3, r0, #1
 80075b2:	42a1      	cmp	r1, r4
 80075b4:	d008      	beq.n	80075c8 <memmove+0x28>
 80075b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075be:	e7f8      	b.n	80075b2 <memmove+0x12>
 80075c0:	4402      	add	r2, r0
 80075c2:	4601      	mov	r1, r0
 80075c4:	428a      	cmp	r2, r1
 80075c6:	d100      	bne.n	80075ca <memmove+0x2a>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075d2:	e7f7      	b.n	80075c4 <memmove+0x24>

080075d4 <_sbrk_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d06      	ldr	r5, [pc, #24]	@ (80075f0 <_sbrk_r+0x1c>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7f9 fb14 	bl	8000c0c <_sbrk>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_sbrk_r+0x1a>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_sbrk_r+0x1a>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	200043e8 	.word	0x200043e8

080075f4 <_realloc_r>:
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	4607      	mov	r7, r0
 80075fa:	4614      	mov	r4, r2
 80075fc:	460d      	mov	r5, r1
 80075fe:	b921      	cbnz	r1, 800760a <_realloc_r+0x16>
 8007600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4611      	mov	r1, r2
 8007606:	f7ff ba85 	b.w	8006b14 <_malloc_r>
 800760a:	b92a      	cbnz	r2, 8007618 <_realloc_r+0x24>
 800760c:	f7ff fa16 	bl	8006a3c <_free_r>
 8007610:	4625      	mov	r5, r4
 8007612:	4628      	mov	r0, r5
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	f000 f89e 	bl	8007758 <_malloc_usable_size_r>
 800761c:	4284      	cmp	r4, r0
 800761e:	4606      	mov	r6, r0
 8007620:	d802      	bhi.n	8007628 <_realloc_r+0x34>
 8007622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007626:	d8f4      	bhi.n	8007612 <_realloc_r+0x1e>
 8007628:	4621      	mov	r1, r4
 800762a:	4638      	mov	r0, r7
 800762c:	f7ff fa72 	bl	8006b14 <_malloc_r>
 8007630:	4680      	mov	r8, r0
 8007632:	b908      	cbnz	r0, 8007638 <_realloc_r+0x44>
 8007634:	4645      	mov	r5, r8
 8007636:	e7ec      	b.n	8007612 <_realloc_r+0x1e>
 8007638:	42b4      	cmp	r4, r6
 800763a:	4622      	mov	r2, r4
 800763c:	4629      	mov	r1, r5
 800763e:	bf28      	it	cs
 8007640:	4632      	movcs	r2, r6
 8007642:	f7ff f9ec 	bl	8006a1e <memcpy>
 8007646:	4629      	mov	r1, r5
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff f9f7 	bl	8006a3c <_free_r>
 800764e:	e7f1      	b.n	8007634 <_realloc_r+0x40>

08007650 <__swhatbuf_r>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007658:	2900      	cmp	r1, #0
 800765a:	b096      	sub	sp, #88	@ 0x58
 800765c:	4615      	mov	r5, r2
 800765e:	461e      	mov	r6, r3
 8007660:	da0d      	bge.n	800767e <__swhatbuf_r+0x2e>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007668:	f04f 0100 	mov.w	r1, #0
 800766c:	bf14      	ite	ne
 800766e:	2340      	movne	r3, #64	@ 0x40
 8007670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007674:	2000      	movs	r0, #0
 8007676:	6031      	str	r1, [r6, #0]
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	b016      	add	sp, #88	@ 0x58
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	466a      	mov	r2, sp
 8007680:	f000 f848 	bl	8007714 <_fstat_r>
 8007684:	2800      	cmp	r0, #0
 8007686:	dbec      	blt.n	8007662 <__swhatbuf_r+0x12>
 8007688:	9901      	ldr	r1, [sp, #4]
 800768a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800768e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007692:	4259      	negs	r1, r3
 8007694:	4159      	adcs	r1, r3
 8007696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800769a:	e7eb      	b.n	8007674 <__swhatbuf_r+0x24>

0800769c <__smakebuf_r>:
 800769c:	898b      	ldrh	r3, [r1, #12]
 800769e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076a0:	079d      	lsls	r5, r3, #30
 80076a2:	4606      	mov	r6, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	d507      	bpl.n	80076b8 <__smakebuf_r+0x1c>
 80076a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	6123      	str	r3, [r4, #16]
 80076b0:	2301      	movs	r3, #1
 80076b2:	6163      	str	r3, [r4, #20]
 80076b4:	b003      	add	sp, #12
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b8:	ab01      	add	r3, sp, #4
 80076ba:	466a      	mov	r2, sp
 80076bc:	f7ff ffc8 	bl	8007650 <__swhatbuf_r>
 80076c0:	9f00      	ldr	r7, [sp, #0]
 80076c2:	4605      	mov	r5, r0
 80076c4:	4639      	mov	r1, r7
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff fa24 	bl	8006b14 <_malloc_r>
 80076cc:	b948      	cbnz	r0, 80076e2 <__smakebuf_r+0x46>
 80076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d2:	059a      	lsls	r2, r3, #22
 80076d4:	d4ee      	bmi.n	80076b4 <__smakebuf_r+0x18>
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	f043 0302 	orr.w	r3, r3, #2
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	e7e2      	b.n	80076a8 <__smakebuf_r+0xc>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	6020      	str	r0, [r4, #0]
 80076e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076f2:	b15b      	cbz	r3, 800770c <__smakebuf_r+0x70>
 80076f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f81d 	bl	8007738 <_isatty_r>
 80076fe:	b128      	cbz	r0, 800770c <__smakebuf_r+0x70>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	f043 0301 	orr.w	r3, r3, #1
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	431d      	orrs	r5, r3
 8007710:	81a5      	strh	r5, [r4, #12]
 8007712:	e7cf      	b.n	80076b4 <__smakebuf_r+0x18>

08007714 <_fstat_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	@ (8007734 <_fstat_r+0x20>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	4611      	mov	r1, r2
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	f7fe fd70 	bl	8006206 <_fstat>
 8007726:	1c43      	adds	r3, r0, #1
 8007728:	d102      	bne.n	8007730 <_fstat_r+0x1c>
 800772a:	682b      	ldr	r3, [r5, #0]
 800772c:	b103      	cbz	r3, 8007730 <_fstat_r+0x1c>
 800772e:	6023      	str	r3, [r4, #0]
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	bf00      	nop
 8007734:	200043e8 	.word	0x200043e8

08007738 <_isatty_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d06      	ldr	r5, [pc, #24]	@ (8007754 <_isatty_r+0x1c>)
 800773c:	2300      	movs	r3, #0
 800773e:	4604      	mov	r4, r0
 8007740:	4608      	mov	r0, r1
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	f7fe fec4 	bl	80064d0 <_isatty>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_isatty_r+0x1a>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_isatty_r+0x1a>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	200043e8 	.word	0x200043e8

08007758 <_malloc_usable_size_r>:
 8007758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775c:	1f18      	subs	r0, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfbc      	itt	lt
 8007762:	580b      	ldrlt	r3, [r1, r0]
 8007764:	18c0      	addlt	r0, r0, r3
 8007766:	4770      	bx	lr

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
